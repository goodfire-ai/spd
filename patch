diff --git a/spd/app/backend/api.py b/spd/app/backend/api.py
new file mode 100644
index 00000000..4c304d09
--- /dev/null
+++ b/spd/app/backend/api.py
@@ -0,0 +1,252 @@
+from typing import Any
+
+from pydantic import BaseModel
+
+
+class ActivationContext(BaseModel):
+    raw_text: str
+    offset_mapping: list[tuple[int, int]]
+    token_ci_values: list[float]
+    active_position: int
+    ci_value: float
+
+
+class TokenDensity(BaseModel):
+    token: str
+    density: float
+
+
+class SubcomponentActivationContexts(BaseModel):
+    subcomponent_idx: int
+    examples: list[ActivationContext]
+    token_densities: list[TokenDensity]
+
+
+class ModelActivationContexts(BaseModel):
+    layers: dict[str, list[SubcomponentActivationContexts]]
+
+
+class SparseVector(BaseModel):
+    l0: int
+    indices: list[int]
+    values: list[float]
+
+
+class MatrixCausalImportances(BaseModel):
+    subcomponent_cis_sparse: SparseVector
+    subcomponent_cis: list[float]
+    """the CI values for each subcomponent"""
+
+    component_agg_cis: list[float]
+    """len: M. For each component, the assigned CI value as aggregated from the subcomponents (usually via
+    max)"""
+
+
+class LayerCIs(BaseModel):
+    module: str
+    token_cis: list[MatrixCausalImportances]
+
+
+class OutputTokenLogit(BaseModel):
+    token: str
+    logit: float
+    probability: float
+
+
+class RunResponse(BaseModel):
+    prompt_id: str
+    prompt_tokens: list[str]
+    layer_cis: list[LayerCIs]
+    full_run_token_logits: list[list[OutputTokenLogit]]
+    ci_masked_token_logits: list[list[OutputTokenLogit]]
+
+
+class TokenLayerCosineSimilarityData(BaseModel):
+    input_singular_vectors: list[list[float]]
+    output_singular_vectors: list[list[float]]
+    component_indices: list[int]
+
+
+class RunRequest(BaseModel):
+    prompt: str
+
+
+class SubcomponentAblationRequest(BaseModel):
+    prompt_id: str
+    subcomponent_mask: dict[str, list[list[int]]]
+
+
+class SubcomponentAblationResponse(BaseModel):
+    token_logits: list[list[OutputTokenLogit]]
+
+
+class ComponentAblationRequest(BaseModel):
+    prompt_id: str
+    component_mask: dict[str, list[list[int]]]
+
+
+class TokenAblationStats(BaseModel):
+    original_active_count: int
+    """Number of components that were active (above threshold) in the original run"""
+    ablated_count: int
+    """Number of originally-active components that were ablated"""
+    ablated_magnitude: float
+    """Total CI magnitude lost due to ablation"""
+
+
+class LayerAblationStats(BaseModel):
+    module: str
+    token_stats: list[TokenAblationStats]
+
+
+class AblationStats(BaseModel):
+    layer_stats: list[LayerAblationStats]
+
+
+class InterventionResponse(BaseModel):
+    token_logits: list[list[OutputTokenLogit]]
+    ablation_stats: AblationStats
+
+
+class CombineMasksRequest(BaseModel):
+    prompt_id: str
+    layer: str
+    token_indices: list[int]  # List of token indices (positions) to combine
+    description: str | None = None
+
+
+class MaskOverrideDTO(BaseModel):
+    id: str
+    layer: str
+    combined_mask: SparseVector
+    description: str | None
+
+
+class CombineMasksResponse(BaseModel):
+    mask_id: str
+    mask_override: MaskOverrideDTO
+
+
+class SimulateMergeRequest(BaseModel):
+    prompt_id: str
+    layer: str
+    token_indices: list[int]
+
+
+class SimulateMergeResponse(BaseModel):
+    l0: int
+    jacc: float
+
+
+class ClusteringShape(BaseModel):
+    module_component_assignments: dict[str, list[int]]
+    """For each module, a length C list of indices mapping its subcomponents to a component"""
+    module_component_groups: dict[str, list[list[int]]]
+    """For each module, the groups of subcomponents that are assigned to a component (basically the
+    inverse of module_component_assignments)"""
+
+
+class ClusterRunDTO(BaseModel):
+    wandb_path: str
+    iteration: int
+    clustering_shape: ClusteringShape
+
+
+class TrainRunDTO(BaseModel):
+    wandb_path: str
+    component_layers: list[str]
+    available_cluster_runs: list[str]
+    config: dict[str, Any]
+
+
+class Status(BaseModel):
+    train_run: TrainRunDTO | None
+    cluster_run: ClusterRunDTO | None
+
+
+class AvailablePrompt(BaseModel):
+    index: int
+    full_text: str
+
+
+class Run(BaseModel):
+    id: str
+    url: str
+
+
+class ClusterIdDTO(BaseModel):
+    clustering_run: str
+    iteration: int
+    cluster_label: int
+    hash: str
+
+
+class HistogramDTO(BaseModel):
+    bin_edges: list[float]
+    bin_counts: list[int]
+
+
+class TokenActivationStatDTO(BaseModel):
+    token: str
+    count: int
+
+
+class TokenActivationsDTO(BaseModel):
+    top_tokens: list[TokenActivationStatDTO]
+    total_unique_tokens: int
+    total_activations: int
+    entropy: float
+    concentration_ratio: float
+    activation_threshold: float
+
+
+class ClusterComponentDTO(BaseModel):
+    module: str
+    index: int
+    label: str
+
+
+class ClusterStatsDTO(BaseModel):
+    all_activations: HistogramDTO
+    max_activation_position: HistogramDTO
+    n_samples: int
+    n_tokens: int
+    mean_activation: float
+    min_activation: float
+    max_activation: float
+    median_activation: float
+    token_activations: TokenActivationsDTO
+
+
+class ClusterDataDTO(BaseModel):
+    cluster_hash: str
+    components: list[ClusterComponentDTO]
+    criterion_samples: dict[str, list[str]]
+    stats: ClusterStatsDTO
+
+
+class TextSampleDTO(BaseModel):
+    text_hash: str
+    full_text: str
+    tokens: list[str]
+
+
+class ActivationBatchDTO(BaseModel):
+    cluster_id: ClusterIdDTO
+    text_hashes: list[str]
+    activations: list[list[float]]
+
+
+class ClusterDashboardResponse(BaseModel):
+    clusters: list[ClusterDataDTO]
+    text_samples: list[TextSampleDTO]
+    activation_batch: ActivationBatchDTO
+    activations_map: dict[str, int]
+    model_info: dict[str, Any]
+    iteration: int
+    run_path: str
+
+
+class ApplyMaskRequest(BaseModel):
+    prompt_id: str
+    mask_override_id: str
diff --git a/spd/app/backend/controller.py b/spd/app/backend/controller.py
new file mode 100644
index 00000000..16daa6b1
--- /dev/null
+++ b/spd/app/backend/controller.py
@@ -0,0 +1,258 @@
+import asyncio
+import traceback
+from contextlib import asynccontextmanager
+from functools import wraps
+
+import uvicorn
+from fastapi import FastAPI, HTTPException
+from fastapi.middleware.cors import CORSMiddleware
+
+from spd.app.backend.api import (
+    ApplyMaskRequest,
+    AvailablePrompt,
+    ClusterDashboardResponse,
+    CombineMasksRequest,
+    CombineMasksResponse,
+    ComponentAblationRequest,
+    InterventionResponse,
+    MaskOverrideDTO,
+    Run,
+    RunRequest,
+    RunResponse,
+    SimulateMergeRequest,
+    SimulateMergeResponse,
+    Status,
+    SubcomponentAblationRequest,
+    SubcomponentAblationResponse,
+    SubcomponentActivationContexts,
+    TokenLayerCosineSimilarityData,
+)
+from spd.app.backend.services.ablation_service import AblationService
+from spd.app.backend.services.activation_contexts_service import (
+    SubcomponentActivationContextsService,
+)
+from spd.app.backend.services.cluster_dashboard_service import ComponentActivationContextsService
+from spd.app.backend.services.geometry_service import GeometryService
+from spd.app.backend.services.run_context_service import (
+    CLUSTER_PROJECT,
+    ENTITY,
+    TRAIN_PROJECT,
+    RunContextService,
+)
+
+run_context_service = RunContextService()
+subcomponent_activations_context_service = SubcomponentActivationContextsService(
+    run_context_service
+)
+component_activation_contexts_service = ComponentActivationContextsService(run_context_service)
+ablation_service = AblationService(run_context_service, component_activation_contexts_service)
+geometry_service = GeometryService(run_context_service)
+
+
+def handle_errors(func):  # pyright: ignore[reportUnknownParameterType, reportMissingParameterType]
+    """Decorator to add error handling with traceback to endpoints.
+
+    Supports both sync and async route handlers.
+    """
+
+    if asyncio.iscoroutinefunction(func):
+
+        @wraps(func)
+        async def async_wrapper(*args, **kwargs):  # pyright: ignore[reportUnknownParameterType, reportMissingParameterType]
+            try:
+                return await func(*args, **kwargs)
+            except Exception as e:
+                traceback.print_exc()
+                raise HTTPException(status_code=500, detail=str(e)) from e
+
+        return async_wrapper
+
+    @wraps(func)
+    def sync_wrapper(*args, **kwargs):  # pyright: ignore[reportUnknownParameterType, reportMissingParameterType]
+        try:
+            return func(*args, **kwargs)
+        except Exception as e:
+            traceback.print_exc()
+            raise HTTPException(status_code=500, detail=str(e)) from e
+
+    return sync_wrapper
+
+
+DEFAULT_RUN_ID = "cztuy3va"
+
+
+@asynccontextmanager
+async def lifespan(_: FastAPI):
+    global run_context_service
+    # run_context_service.load_run(f"{ENTITY}/{TRAIN_PROJECT}/{DEFAULT_RUN_ID}")
+    try:
+        yield
+    finally:
+        pass
+
+
+app = FastAPI(lifespan=lifespan, debug=True)
+
+# Add CORS middleware
+app.add_middleware(
+    CORSMiddleware,
+    allow_origins=["*"],  # Don't host me publically lol
+    allow_credentials=True,
+    allow_methods=["*"],
+    allow_headers=["*"],
+)
+
+
+@app.post("/run")
+@handle_errors
+def run_prompt(request: RunRequest) -> RunResponse:
+    return ablation_service.run_prompt(request.prompt)
+
+
+@app.get("/available_prompts")
+@handle_errors
+def get_available_prompts() -> list[AvailablePrompt]:
+    return run_context_service.get_available_prompts()
+
+
+@app.post("/run_prompt/{dataset_index}")
+@handle_errors
+def run_prompt_by_index(dataset_index: int) -> RunResponse:
+    """Run a specific prompt from the dataset by index."""
+    return ablation_service.run_prompt_by_index(dataset_index)
+
+
+@app.post("/ablate_subcomponents")
+@handle_errors
+def ablate_subcomponents(request: SubcomponentAblationRequest) -> SubcomponentAblationResponse:
+    tokens_logits = ablation_service.ablate_subcomponents(
+        request.prompt_id,
+        request.subcomponent_mask,
+    )
+    return SubcomponentAblationResponse(token_logits=tokens_logits)
+
+
+@app.post("/ablate_components")
+@handle_errors
+def ablate_components(request: ComponentAblationRequest) -> InterventionResponse:
+    tokens_logits, ablation_stats = ablation_service.ablate_components(
+        request.prompt_id,
+        request.component_mask,
+    )
+    return InterventionResponse(token_logits=tokens_logits, ablation_stats=ablation_stats)
+
+
+@app.post("/apply_mask")
+@handle_errors
+def apply_mask_as_ablation(request: ApplyMaskRequest) -> InterventionResponse:
+    """Apply a saved mask as an ablation to a specific prompt."""
+    tokens_logits, ablation_stats = ablation_service.run_with_mask_override(
+        request.prompt_id, request.mask_override_id
+    )
+    return InterventionResponse(token_logits=tokens_logits, ablation_stats=ablation_stats)
+
+
+@app.post("/runs/load/{wandb_run_id}")
+@handle_errors
+def load_run(wandb_run_id: str):
+    global ablation_service
+    run_context_service.load_run(f"{ENTITY}/{TRAIN_PROJECT}/{wandb_run_id}")
+
+
+@app.post("/cluster-runs/load/{wandb_run_id}/{iteration}")
+@handle_errors
+def load_cluster_run(wandb_run_id: str, iteration: int):
+    global ablation_service
+    run_context_service.load_cluster_run(f"{ENTITY}/{CLUSTER_PROJECT}/{wandb_run_id}", iteration)
+
+
+@app.get("/runs")
+@handle_errors
+def get_wandb_runs() -> list[Run]:
+    return run_context_service.get_runs()
+
+
+@app.get("/status")
+@handle_errors
+def get_status() -> Status:
+    return run_context_service.get_status()
+
+
+@app.get("/cosine_similarities/{layer}/{component_idx}")
+@handle_errors
+def get_cosine_similarities(layer: str, component_idx: int) -> TokenLayerCosineSimilarityData:
+    return geometry_service.get_subcomponent_cosine_sims(layer, component_idx)
+
+
+@app.post("/combine_masks")
+@handle_errors
+def combine_masks(request: CombineMasksRequest) -> CombineMasksResponse:
+    mask_override = ablation_service.create_combined_mask(
+        prompt_id=request.prompt_id,
+        layer=request.layer,
+        token_indices=request.token_indices,
+        description=request.description,
+    )
+
+    return CombineMasksResponse(
+        mask_id=mask_override.id,
+        mask_override=mask_override.to_dto(),
+    )
+
+
+@app.post("/simulate_merge")
+@handle_errors
+def simulate_merge(request: SimulateMergeRequest) -> SimulateMergeResponse:
+    """Simulate merging masks without persisting the result"""
+    return ablation_service.get_merge_l0(
+        prompt_id=request.prompt_id, layer=request.layer, token_indices=request.token_indices
+    )
+
+
+@app.get("/mask_overrides")
+@handle_errors
+def get_mask_overrides() -> list[MaskOverrideDTO]:
+    return [mo.to_dto() for mo in ablation_service.mask_overrides.values()]
+
+
+@app.get("/activation_contexts/{layer}/subcomponents")
+@handle_errors
+async def get_layer_subcomponent_activation_contexts(
+    layer: str,
+    importance_threshold: float,
+    max_examples_per_subcomponent: int,
+    n_batches: int,
+    batch_size: int,
+    n_tokens_either_side: int,
+) -> list[SubcomponentActivationContexts]:
+    f = subcomponent_activations_context_service.get_layer_subcomponents_activation_contexts
+    return await f(
+        layer=layer,
+        importance_threshold=importance_threshold,
+        max_examples_per_subcomponent=max_examples_per_subcomponent,
+        n_batches=n_batches,
+        n_tokens_either_side=n_tokens_either_side,
+        batch_size=batch_size,
+    )
+
+
+@app.get("/cluster-dashboard/data")
+@handle_errors
+async def get_cluster_dashboard_data(
+    iteration: int,
+    n_samples: int,
+    n_batches: int,
+    batch_size: int,
+    context_length: int,
+) -> ClusterDashboardResponse:
+    return await component_activation_contexts_service.get_dashboard_data(
+        iteration=iteration,
+        n_samples=n_samples,
+        n_batches=n_batches,
+        batch_size=batch_size,
+        context_length=context_length,
+    )
+
+
+if __name__ == "__main__":
+    uvicorn.run(app, host="0.0.0.0", port=8000)
diff --git a/spd/app/backend/services/ablation_service.py b/spd/app/backend/services/ablation_service.py
new file mode 100644
index 00000000..9294c023
--- /dev/null
+++ b/spd/app/backend/services/ablation_service.py
@@ -0,0 +1,461 @@
+# %%
+import uuid
+from dataclasses import dataclass
+from typing import cast
+
+import torch
+from jaxtyping import Float, Int
+from torch._tensor import Tensor
+
+from spd.app.backend.api import (
+    AblationStats,
+    LayerAblationStats,
+    LayerCIs,
+    MaskOverrideDTO,
+    MatrixCausalImportances,
+    OutputTokenLogit,
+    RunResponse,
+    SimulateMergeResponse,
+    TokenAblationStats,
+)
+from spd.app.backend.services.cluster_dashboard_service import ComponentActivationContextsService
+from spd.app.backend.services.run_context_service import RunContextService
+from spd.app.backend.utils import tensor_to_sparse_vector
+from spd.log import logger
+from spd.models.components import make_mask_infos
+from spd.utils.distributed_utils import get_device
+from spd.utils.general_utils import runtime_cast
+
+
+@dataclass
+class PromptContext:
+    prompt: str
+    input_token_ids: Int[torch.Tensor, " seq_len"]
+    subcomponent_causal_importances: dict[str, Float[torch.Tensor, " seq_len C"]]
+
+
+@dataclass
+class MaskOverride:
+    id: str
+    description: str | None
+    layer: str
+    combined_mask: Float[Tensor, " C"]
+
+    def to_dto(self) -> MaskOverrideDTO:
+        return MaskOverrideDTO(
+            id=self.id,
+            description=self.description,
+            layer=self.layer,
+            combined_mask=tensor_to_sparse_vector(self.combined_mask),
+        )
+
+
+DEVICE = get_device()
+ACTIVE_THRESHOLD = 0.01
+
+
+class AblationService:
+    def __init__(
+        self,
+        run_context_service: RunContextService,
+        cluster_dashboard_service: ComponentActivationContextsService,
+        *,
+        dashboard_iteration: int = 3000,
+        dashboard_n_samples: int = 16,
+        dashboard_n_batches: int = 2,
+        dashboard_batch_size: int = 64,
+        dashboard_context_length: int = 64,
+    ):
+        self.run_context_service = run_context_service
+        self.cluster_dashboard_service = cluster_dashboard_service
+        self.prompt_contexts: dict[str, PromptContext] = {}
+        self.mask_overrides: dict[str, MaskOverride] = {}
+
+    def _aggregate_cis(
+        self,
+        module: str,
+        cis: Float[Tensor, "seq_len C"],
+    ) -> Float[Tensor, "seq_len M"]:
+        assert (ctx := self.run_context_service.cluster_run_context) is not None
+
+        assignments = torch.tensor(
+            ctx.clustering_shape.module_component_assignments[module], device=cis.device
+        )
+        assert assignments.ndim == 1, "Assignments must be 1D"
+        assert assignments.shape[0] == cis.shape[1], (
+            "Assignments must have the same length as the number of components"
+        )
+
+        n_tokens, _ = cis.shape
+        component_indices = assignments.unsqueeze(0).expand(n_tokens, -1)
+        num_components = int(assignments.max().item()) + 1 if assignments.numel() else 0
+        if num_components == 0:
+            return torch.zeros((n_tokens, 0), device=cis.device)
+
+        component_agg = torch.zeros((n_tokens, num_components), device=cis.device)
+        component_agg.scatter_reduce_(
+            dim=1,
+            index=component_indices,
+            src=cis,
+            reduce="amax",
+        )
+        return component_agg
+
+    def _materialize_prompt(
+        self, prompt: str | torch.Tensor
+    ) -> tuple[str, list[str], torch.Tensor]:
+        assert self.run_context_service.train_run_context is not None, "Run context not found"
+        run = self.run_context_service.train_run_context
+
+        match prompt:
+            case str():
+                inputs = runtime_cast(
+                    torch.Tensor, run.tokenizer.encode(prompt, return_tensors="pt")
+                )
+                assert inputs.ndim == 2, "Inputs must be 2D (batch, seq_len)"
+                assert inputs.shape[0] == 1, "batch size must be 1"
+                inputs = inputs[0]
+
+                prompt_str = prompt[:]
+                assert prompt_str == prompt
+            case torch.Tensor():
+                inputs = prompt
+                assert inputs.ndim == 1, "Inputs must be 1D (seq_len)"
+                prompt_str = run.tokenizer.decode(inputs)  # pyright: ignore[reportAttributeAccessIssue]
+
+        prompt_tokens = cast(list[str], run.tokenizer.batch_decode(inputs))  # pyright: ignore[reportAttributeAccessIssue]
+        assert isinstance(prompt_tokens, list)
+        assert isinstance(prompt_tokens[0], str)
+
+        inputs = inputs.to(DEVICE)
+
+        return prompt_str, prompt_tokens, inputs
+
+    def run_prompt(self, prompt: str | torch.Tensor) -> RunResponse:
+        assert (ctx := self.run_context_service.train_run_context) is not None
+
+        prompt_str, prompt_tokens, inputs = self._materialize_prompt(prompt)
+
+        logger.info(f"Inputs shape: {inputs.shape}")
+
+        target_logits_out, pre_weight_acts = ctx.cm.forward(
+            inputs[None],
+            mode="input_cache",
+            module_names=list(ctx.cm.components.keys()),
+        )
+
+        logger.info(f"Pre-weight acts shape: {pre_weight_acts.keys()}")
+
+        causal_importances, _ = ctx.cm.calc_causal_importances(
+            pre_weight_acts=pre_weight_acts,
+            sigmoid_type=ctx.config.sigmoid_type,
+            sampling=ctx.config.sampling,
+        )
+
+        logger.info(f"Causal importances shape: {causal_importances.keys()}")
+
+        # Run with overridden mask
+        ci_masked_logits = ctx.cm(
+            inputs[None],
+            mode="components",
+            mask_infos=make_mask_infos(causal_importances),
+        )
+
+        logger.info(f"CI masked logits shape: {ci_masked_logits.shape}")
+
+        # Store context
+        # Generate a unique prompt ID
+        prompt_id = str(uuid.uuid4())
+
+        # Store the prompt context with overridden masks
+        self.prompt_contexts[prompt_id] = PromptContext(
+            prompt=prompt_str,
+            input_token_ids=inputs,
+            subcomponent_causal_importances={k: v[0] for k, v in causal_importances.items()},
+        )
+
+        logger.info("saved")
+
+        return RunResponse(
+            prompt_id=prompt_id,
+            prompt_tokens=prompt_tokens,
+            layer_cis=self._to_layer_cis({k: v[0] for k, v in causal_importances.items()}),
+            full_run_token_logits=self._logits_to_token_logits(target_logits_out[0]),
+            ci_masked_token_logits=self._logits_to_token_logits(ci_masked_logits[0]),
+        )
+
+    def _to_layer_cis(
+        self,
+        causal_importances: dict[str, Float[Tensor, "seq_len C"]],
+    ) -> list[LayerCIs]:
+        layer_cis = []
+        for module, layer_ci in causal_importances.items():
+            component_agg_cis: Float[Tensor, "seq_len M"] = self._aggregate_cis(module, layer_ci)
+
+            token_cis = []
+            # tok_component_agg_ci: (M,)
+            # tok_layer_ci: (C,)
+            for tok_component_agg_ci, tok_layer_ci in zip(component_agg_cis, layer_ci, strict=True):
+                token_cis.append(
+                    MatrixCausalImportances(
+                        subcomponent_cis_sparse=tensor_to_sparse_vector(tok_layer_ci),
+                        subcomponent_cis=tok_layer_ci.tolist(),
+                        component_agg_cis=tok_component_agg_ci.tolist(),
+                    )
+                )
+
+            layer_cis.append(LayerCIs(module=module, token_cis=token_cis))
+
+        return layer_cis
+
+    def run_with_mask_override(
+        self, prompt_id: str, mask_override_id: str
+    ) -> tuple[list[list[OutputTokenLogit]], AblationStats]:
+        """Apply a saved mask override as an ablation to a specific prompt."""
+        assert (ctx := self.run_context_service.train_run_context) is not None
+        assert (prompt_context := self.prompt_contexts.get(prompt_id)) is not None
+        assert (mask_override := self.mask_overrides.get(mask_override_id)) is not None
+
+        # Start with the prompt's causal importances
+        original_cis = prompt_context.subcomponent_causal_importances.copy()
+        ablated_cis = prompt_context.subcomponent_causal_importances.copy()
+
+        # Override the specified layer with the saved mask for ALL tokens
+        ablated_cis[mask_override.layer].copy_(mask_override.combined_mask)
+
+        # Compute stats before running inference
+        ablation_stats = self._compute_ablation_stats(original_cis, ablated_cis)
+
+        # Run with the mask override
+        ci_masked_logits = ctx.cm(
+            prompt_context.input_token_ids[None],
+            mode="components",
+            mask_infos=make_mask_infos(ablated_cis),
+        )[0]
+
+        return self._logits_to_token_logits(ci_masked_logits), ablation_stats
+
+    def ablate_subcomponents(
+        self, prompt_id: str, subcomponent_mask: dict[str, list[list[int]]]
+    ) -> list[list[OutputTokenLogit]]:
+        assert (ctx := self.run_context_service.train_run_context) is not None
+        assert (prompt_context := self.prompt_contexts.get(prompt_id)) is not None
+
+        masked_ci = prompt_context.subcomponent_causal_importances.copy()
+        for module, token_subcomponent_masks in subcomponent_mask.items():
+            for token_idx, token_subcomponent_mask in enumerate(token_subcomponent_masks):
+                masked_ci[module][token_idx][token_subcomponent_mask] = 0
+
+        ci_masked_logits = ctx.cm(
+            prompt_context.input_token_ids[None],
+            mode="components",
+            mask_infos=make_mask_infos(masked_ci),
+        )[0]
+
+        return self._logits_to_token_logits(ci_masked_logits)
+
+    def ablate_components(
+        self,
+        prompt_id: str,
+        component_mask: dict[str, list[list[int]]],
+    ) -> tuple[list[list[OutputTokenLogit]], AblationStats]:
+        assert (ctx := self.run_context_service.train_run_context) is not None
+        assert (prompt_context := self.prompt_contexts.get(prompt_id)) is not None
+        assert (cluster_ctx := self.run_context_service.cluster_run_context) is not None
+
+        original_cis = prompt_context.subcomponent_causal_importances.copy()
+        ablated_cis = prompt_context.subcomponent_causal_importances.copy()
+
+        for module, token_component_masks in component_mask.items():
+            components = cluster_ctx.clustering_shape.module_component_groups[module]
+            for token_idx, token_component_mask in enumerate(token_component_masks):
+                for component_idx in token_component_mask:
+                    assert component_idx < len(components)
+                    component_subcomponent_indices = components[component_idx]
+                    ablated_cis[module][token_idx][component_subcomponent_indices] = 0
+
+        # Compute stats
+        ablation_stats = self._compute_ablation_stats(original_cis, ablated_cis)
+
+        ci_masked_logits = ctx.cm(
+            prompt_context.input_token_ids[None],  # add batch dim
+            mode="components",
+            mask_infos=make_mask_infos(ablated_cis),
+        )[0]  # remove batch dim
+
+        return self._logits_to_token_logits(ci_masked_logits), ablation_stats
+
+    def _compute_ablation_stats(
+        self,
+        original_cis: dict[str, Float[Tensor, "seq_len C"]],
+        ablated_cis: dict[str, Float[Tensor, "seq_len C"]],
+    ) -> AblationStats:
+        """Compute statistics about what was ablated."""
+        assert self.run_context_service.cluster_run_context is not None
+
+        layer_stats = []
+        for module in original_cis.keys():
+            original_layer_cis = original_cis[module]
+            ablated_layer_cis = ablated_cis[module]
+            seq_len = original_layer_cis.shape[0]
+
+            # Aggregate to component level
+            original_component_cis = self._aggregate_cis(module, original_layer_cis)
+            ablated_component_cis = self._aggregate_cis(module, ablated_layer_cis)
+
+            token_stats = []
+            for token_idx in range(seq_len):
+                orig_token_cis = original_component_cis[token_idx]
+                abl_token_cis = ablated_component_cis[token_idx]
+
+                # Binary: count active components
+                originally_active = orig_token_cis > ACTIVE_THRESHOLD
+                now_inactive = abl_token_cis <= ACTIVE_THRESHOLD
+                ablated_mask = originally_active & now_inactive
+
+                original_active_count = int(originally_active.sum().item())
+                ablated_count = int(ablated_mask.sum().item())
+
+                # Magnitude: sum of CI lost
+                ci_diff = orig_token_cis - abl_token_cis
+                ablated_magnitude = float(ci_diff.clamp_min(0).sum().item())
+
+                token_stats.append(
+                    TokenAblationStats(
+                        original_active_count=original_active_count,
+                        ablated_count=ablated_count,
+                        ablated_magnitude=ablated_magnitude,
+                    )
+                )
+
+            layer_stats.append(LayerAblationStats(module=module, token_stats=token_stats))
+
+        return AblationStats(layer_stats=layer_stats)
+
+    TOP_K = 5
+
+    def _logits_to_token_logits(
+        self,
+        logits: Float[torch.Tensor, "seq_len vocab"],
+    ) -> list[list[OutputTokenLogit]]:
+        assert (ctx := self.run_context_service.train_run_context) is not None, (
+            "Run context not found"
+        )
+
+        assert logits.ndim == 2, "Logits must be 2D (seq_len, vocab)"
+        # assert logits.shape[0] == 24
+        assert logits.shape[1] == len(ctx.tokenizer.vocab), (  # pyright: ignore[reportAttributeAccessIssue]
+            f"Logits must have the same length as the vocabulary, {logits.shape[2]} != {len(ctx.tokenizer.vocab)}"  # pyright: ignore[reportAttributeAccessIssue]
+        )
+
+        tokens_logits: list[list[OutputTokenLogit]] = []
+        for token_logits in logits:
+            assert token_logits.ndim == 1, f"Token logits must be 1D, got {token_logits.ndim}"
+            token_probs = torch.softmax(token_logits, dim=-1)
+
+            this_token_logits = []
+            ordered_indices = torch.argsort(token_logits, dim=-1, descending=True)
+            for tok_id in ordered_indices[: self.TOP_K]:
+                tok_id = int(tok_id.item())
+                tok_str = ctx.tokenizer.convert_ids_to_tokens([tok_id])[0]  # pyright: ignore[reportAttributeAccessIssue]
+                logit = float(token_logits[tok_id])
+                prob = float(token_probs[tok_id])
+                this_token_logits.append(
+                    OutputTokenLogit(token=tok_str, logit=logit, probability=prob)
+                )
+
+            tokens_logits.append(this_token_logits)
+        return tokens_logits
+
+    def run_prompt_by_index(self, dataset_index: int) -> RunResponse:
+        """Run a specific prompt from the dataset by index."""
+        assert (ctx := self.run_context_service.train_run_context) is not None, (
+            "Run context not found"
+        )
+
+        if dataset_index >= len(ctx.train_loader.dataset):  # pyright: ignore[reportArgumentType]
+            raise ValueError(
+                f"Index {dataset_index} out of range for dataset of size {len(ctx.train_loader.dataset)}"  # pyright: ignore[reportArgumentType]
+            )
+
+        example = ctx.train_loader.dataset[dataset_index]["input_ids"]
+
+        assert isinstance(example, torch.Tensor)
+        assert example.ndim == 1, "Example must be 1D (seq_len)"
+        logger.info(f"Running prompt by index: {dataset_index}, shape: {example.shape}")
+
+        return self.run_prompt(example)
+
+    def create_combined_mask(
+        self,
+        prompt_id: str,
+        layer: str,
+        token_indices: list[int],
+        description: str | None = None,
+        save: bool = True,
+    ) -> MaskOverride:
+        assert self.run_context_service.train_run_context is not None, "Run context not found"
+        assert prompt_id in self.prompt_contexts, f"Prompt {prompt_id} not found"
+
+        # Get the CIs for the specified layer
+        prompt_context = self.prompt_contexts[prompt_id]
+        layer_ci = prompt_context.subcomponent_causal_importances[layer]
+
+        # Combine masks using element-wise max
+        token_masks: Float[Tensor, "seq_len C"] = layer_ci[token_indices]
+        combined_mask: Float[Tensor, " C"] = torch.max(token_masks, dim=0).values
+
+        mask_override = MaskOverride(
+            id=str(uuid.uuid4()),
+            layer=layer,
+            combined_mask=combined_mask,
+            description=description,
+        )
+
+        if save:
+            self.mask_overrides[mask_override.id] = mask_override
+
+        return mask_override
+
+    # change this to also return the metric
+    def get_merge_l0(
+        self, prompt_id: str, layer: str, token_indices: list[int]
+    ) -> SimulateMergeResponse:
+        mask_override = self.create_combined_mask(
+            prompt_id=prompt_id,
+            layer=layer,
+            token_indices=token_indices,
+            description=None,
+            save=False,
+        )
+        l0 = tensor_to_sparse_vector(mask_override.combined_mask).l0
+
+        # Compute the k-way Jaccard on the original token masks for this layer
+        assert prompt_id in self.prompt_contexts, f"Prompt {prompt_id} not found"
+        prompt_context = self.prompt_contexts[prompt_id]
+        layer_ci = prompt_context.subcomponent_causal_importances[layer]  # (seq_len, C)
+        token_masks: Float[Tensor, "m C"] = layer_ci[token_indices]
+
+        # Weighted/tensor Jaccard (choose this or the set version below)
+        jacc = k_way_weighted_jaccard(token_masks)
+
+        # If you prefer the set/binary interpretation (presence > 0.0), use:
+        # jacc = k_way_set_jaccard(token_masks, threshold=0.0)
+
+        return SimulateMergeResponse(l0=l0, jacc=jacc)
+
+
+def k_way_weighted_jaccard(token_masks: Float[Tensor, "m C"]) -> float:
+    """
+    Weighted (Ruzicka/Tanimoto) k-way Jaccard for nonnegative masks.
+    token_masks: shape (m, C) where m=len(token_indices)
+    Returns a scalar in [0, 1]. If the union is empty, returns 1.0 by convention.
+    """
+    assert token_masks.ndim == 2, "Expected (m, C)"
+    # Assumes nonnegative entries; clamp to be safe against tiny negatives from numerics
+    token_masks = token_masks.clamp_min(0.0)
+    mins = token_masks.min(dim=0).values  # (C,)
+    maxs = token_masks.max(dim=0).values  # (C,)
+    numerator = mins.sum()
+    denominator = maxs.sum()
+    return float(numerator / denominator) if float(denominator) > 0.0 else 1.0
diff --git a/spd/app/backend/services/activation_contexts_service.py b/spd/app/backend/services/activation_contexts_service.py
new file mode 100644
index 00000000..da96cbc9
--- /dev/null
+++ b/spd/app/backend/services/activation_contexts_service.py
@@ -0,0 +1,70 @@
+import asyncio
+import gc
+from pathlib import Path
+
+import torch
+
+from spd.app.backend.api import ModelActivationContexts
+from spd.app.backend.services.run_context_service import RunContextService
+from spd.app.backend.workers.activation_contexts_worker import (
+    get_topk_by_subcomponent,
+    map_to_model_ctxs,
+)
+from spd.log import logger
+from spd.settings import SPD_CACHE_DIR
+
+
+class SubcomponentActivationContextsService:
+    def __init__(self, run_context_service: RunContextService):
+        self.run_context_service = run_context_service
+        self._inflight: dict[str, asyncio.Task[ModelActivationContexts]] = {}
+
+    def _cache_path(self, wandb_path: str) -> Path:
+        run_dir: Path = SPD_CACHE_DIR / "subcomponent_activation_contexts" / f"{wandb_path}"
+        run_dir.mkdir(parents=True, exist_ok=True)
+        return run_dir / "data.json"
+
+    async def get_layer_subcomponents_activation_contexts(
+        self,
+        layer: str,
+        importance_threshold: float,
+        max_examples_per_subcomponent: int,
+        n_batches: int,
+        n_tokens_either_side: int,
+        batch_size: int,
+    ):
+        assert (run_context := self.run_context_service.train_run_context) is not None, (
+            "Run context not found"
+        )
+        logger.info(f"worker: starting with batch size {batch_size}")
+
+        topk_by_subcomponent = None
+        while batch_size > 0:
+            try:
+                gc.collect()
+                torch.cuda.empty_cache()
+                topk_by_subcomponent = get_topk_by_subcomponent(
+                    run_context,
+                    importance_threshold,
+                    max_examples_per_subcomponent,
+                    n_batches,
+                    n_tokens_either_side,
+                    batch_size,
+                )
+                break
+            except RuntimeError as e:
+                if "out of memory" in str(e).lower():
+                    old_batch_size = batch_size
+                    batch_size //= 2
+                    n_batches = int(n_batches * (old_batch_size / batch_size))
+                    logger.error(
+                        f"worker: out of memory, halving batch size to {batch_size}, "
+                        f"increasing n_batches to {n_batches} [factor: {old_batch_size / batch_size}]"
+                    )
+                    continue
+                raise e
+        assert topk_by_subcomponent is not None, (
+            f"topk_by_subcomponent not found, batch size: {batch_size}"
+        )
+
+        return map_to_model_ctxs(run_context, topk_by_subcomponent).layers[layer]
diff --git a/spd/app/backend/services/cluster_dashboard_service.py b/spd/app/backend/services/cluster_dashboard_service.py
new file mode 100644
index 00000000..813f1ec3
--- /dev/null
+++ b/spd/app/backend/services/cluster_dashboard_service.py
@@ -0,0 +1,272 @@
+"""Service for computing cluster dashboard data on demand."""
+
+import asyncio
+import json
+import os
+from collections import defaultdict
+from pathlib import Path
+from typing import Any
+from uuid import uuid4
+
+from spd.app.backend.api import (
+    ActivationBatchDTO,
+    ClusterComponentDTO,
+    ClusterDashboardResponse,
+    ClusterDataDTO,
+    ClusterIdDTO,
+    ClusterStatsDTO,
+    HistogramDTO,
+    TextSampleDTO,
+    TokenActivationsDTO,
+)
+from spd.app.backend.services.run_context_service import RunContextService
+from spd.clustering.dashboard.compute_max_act import compute_max_activations
+from spd.clustering.dashboard.core import (
+    ActivationSampleBatch,
+    BinnedData,
+    ClusterData,
+    TextSample,
+    TextSampleHash,
+)
+from spd.clustering.dashboard.dashboard_io import (
+    generate_model_info,
+    load_wandb_artifacts,
+    setup_model_and_data,
+)
+from spd.log import logger
+from spd.settings import SPD_CACHE_DIR
+from spd.utils.general_utils import runtime_cast
+
+
+class ComponentActivationContextsService:
+    """Compute dashboard data using the loaded run context."""
+
+    def __init__(self, run_context_service: RunContextService):
+        self.run_context_service = run_context_service
+        self._inflight: dict[str, asyncio.Task[ClusterDashboardResponse]] = {}
+
+    @staticmethod
+    def _cache_path(
+        cluster_run_wandb_path: str,
+        iteration: int,
+        n_samples: int,
+        n_batches: int,
+        batch_size: int,
+        context_length: int,
+    ) -> Path:
+        safe_cluster = cluster_run_wandb_path.replace("/", "-")
+        filename = (
+            f"i{iteration}_ns{n_samples}_nb{n_batches}_bs{batch_size}_ctx{context_length}.json"
+        )
+        return SPD_CACHE_DIR / "cluster_dashboard" / safe_cluster / filename
+
+    @staticmethod
+    def _load_cache(path: Path) -> ClusterDashboardResponse:
+        with open(path) as f:
+            data = json.load(f)
+        return ClusterDashboardResponse.model_validate(data)
+
+    @staticmethod
+    def _write_cache(path: Path, response: ClusterDashboardResponse) -> None:
+        path.parent.mkdir(parents=True, exist_ok=True)
+        tmp = path.with_name(f"{path.name}.{uuid4().hex}.tmp")
+        with open(tmp, "w") as f:
+            json.dump(response.model_dump(mode="json"), f)
+        os.replace(tmp, path)
+
+    async def get_dashboard_data(
+        self,
+        iteration: int,
+        n_samples: int,
+        n_batches: int,
+        batch_size: int,
+        context_length: int,
+    ) -> ClusterDashboardResponse:
+        assert (ctx := self.run_context_service.cluster_run_context) is not None, (
+            "Run context not found"
+        )
+
+        logger.info(
+            f"Getting dashboard data run={ctx.wandb_path} requested={iteration} n_samples={n_samples} "
+            f"n_batches={n_batches} batch_size={batch_size} context_length={context_length}",
+        )
+
+        cache_path = self._cache_path(
+            cluster_run_wandb_path=ctx.wandb_path,
+            iteration=iteration,
+            n_samples=n_samples,
+            n_batches=n_batches,
+            batch_size=batch_size,
+            context_length=context_length,
+        )
+
+        task_key = str(cache_path)
+
+        existing = self._inflight.get(task_key)
+        if existing:
+            return await existing
+
+        loop = asyncio.get_running_loop()
+
+        async def _produce() -> ClusterDashboardResponse:
+            if cache_path.exists():
+                logger.info(f"Loading cached dashboard data from {cache_path}")
+                return self._load_cache(cache_path)
+
+            logger.info(f"Computing dashboard data for {ctx.wandb_path} iteration={iteration}")
+            result = await loop.run_in_executor(
+                None,
+                lambda: self._compute_dashboard_data(
+                    cluster_run_wandb_path=ctx.wandb_path,
+                    iteration=iteration,
+                    n_samples=n_samples,
+                    n_batches=n_batches,
+                    batch_size=batch_size,
+                    context_length=context_length,
+                ),
+            )
+            logger.info(f"Writing cached dashboard data to {cache_path}")
+            self._write_cache(cache_path, result)
+            return result
+
+        task: asyncio.Task[ClusterDashboardResponse] = asyncio.create_task(_produce())
+        self._inflight[task_key] = task
+        task.add_done_callback(lambda _: self._inflight.pop(task_key, None))
+        return await task
+
+    def _compute_dashboard_data(
+        self,
+        cluster_run_wandb_path: str,
+        iteration: int,
+        n_samples: int,
+        n_batches: int,
+        batch_size: int,
+        context_length: int,
+    ) -> ClusterDashboardResponse:
+        merge_history, run_config = load_wandb_artifacts(cluster_run_wandb_path)
+
+        model, tokenizer, dataloader, config = setup_model_and_data(
+            run_config=run_config,
+            context_length=context_length,
+            batch_size=batch_size,
+        )
+        model.eval()
+        cluster_run_id = cluster_run_wandb_path.split("/")[-1]
+
+        dashboard_data, _, _ = compute_max_activations(
+            model=model,
+            sigmoid_type=config.sigmoid_type,
+            tokenizer=tokenizer,
+            dataloader=dataloader,
+            merge_history=merge_history,
+            iteration=iteration,
+            n_samples=n_samples,
+            n_batches=n_batches,
+            clustering_run=cluster_run_id,
+        )
+
+        merge = merge_history.merges[iteration]
+        model_path = run_config.get("model_path", "")
+
+        model_info = generate_model_info(
+            model=model,
+            merge_history=merge_history,
+            merge=merge,
+            iteration=iteration,
+            model_path=model_path,
+            tokenizer_name=runtime_cast(str, config.tokenizer_name),
+            config_dict=config.model_dump(mode="json"),
+            wandb_run_path=cluster_run_wandb_path,
+        )
+        clusters = [_cluster_to_dto(cluster) for cluster in dashboard_data.clusters.values()]
+        text_samples = [
+            _text_sample_to_dto(text_hash, sample)
+            for text_hash, sample in dashboard_data.text_samples.items()
+        ]
+        activation_batch = _activation_batch_to_dto(dashboard_data.activations)
+        activations_map = {str(key): value for key, value in dashboard_data.activations_map.items()}
+
+        module_cluster_map: dict[str, dict[str, list[int]]] = defaultdict(lambda: defaultdict(list))
+        for cluster_hash, cluster in dashboard_data.clusters.items():
+            for component in cluster.components:
+                module_cluster_map[component.module][cluster_hash].append(component.index)
+
+        return ClusterDashboardResponse(
+            clusters=clusters,
+            text_samples=text_samples,
+            activation_batch=activation_batch,
+            activations_map=activations_map,
+            model_info=model_info,
+            iteration=iteration,
+            run_path=cluster_run_wandb_path,
+        )
+
+
+def _cluster_stats_to_dto(stats: dict[str, Any]) -> ClusterStatsDTO:
+    all_activations = runtime_cast(BinnedData, stats["all_activations"])
+    all_acts_dto = HistogramDTO(
+        bin_edges=list(all_activations.bin_edges),
+        bin_counts=list(all_activations.bin_counts),
+    )
+
+    max_activation_position = runtime_cast(BinnedData, stats["max_activation_position"])
+    max_activation_position_dto = HistogramDTO(
+        bin_edges=list(max_activation_position.bin_edges),
+        bin_counts=list(max_activation_position.bin_counts),
+    )
+
+    return ClusterStatsDTO(
+        all_activations=all_acts_dto,
+        max_activation_position=max_activation_position_dto,
+        n_samples=runtime_cast(int, stats["n_samples"]),
+        n_tokens=runtime_cast(int, stats["n_tokens"]),
+        mean_activation=runtime_cast(float, stats["mean_activation"]),
+        min_activation=runtime_cast(float, stats["min_activation"]),
+        max_activation=runtime_cast(float, stats["max_activation"]),
+        median_activation=runtime_cast(float, stats["median_activation"]),
+        token_activations=TokenActivationsDTO(**stats["token_activations"]),
+    )
+
+
+def _cluster_to_dto(cluster: ClusterData) -> ClusterDataDTO:
+    """Map a domain cluster object directly into its DTO."""
+
+    components = [
+        ClusterComponentDTO(module=component.module, index=component.index, label=component.label)
+        for component in cluster.components
+    ]
+    criterion_samples = {
+        str(criterion): [str(sample_hash) for sample_hash in hashes]
+        for criterion, hashes in cluster.criterion_samples.items()
+    }
+    return ClusterDataDTO(
+        cluster_hash=str(cluster.cluster_hash),
+        components=components,
+        criterion_samples=criterion_samples,
+        stats=_cluster_stats_to_dto(cluster.stats),
+    )
+
+
+def _text_sample_to_dto(text_hash: TextSampleHash, sample: TextSample) -> TextSampleDTO:
+    """Convert a TextSample into its DTO counterpart."""
+
+    return TextSampleDTO(
+        text_hash=str(text_hash),
+        full_text=sample.full_text,
+        tokens=sample.tokens,
+    )
+
+
+def _activation_batch_to_dto(batch: ActivationSampleBatch) -> ActivationBatchDTO:
+    """Convert activation batches without intermediate dict representations."""
+    cluster_id = batch.cluster_id
+    return ActivationBatchDTO(
+        cluster_id=ClusterIdDTO(
+            clustering_run=cluster_id.clustering_run,
+            iteration=cluster_id.iteration,
+            cluster_label=int(cluster_id.cluster_label),
+            hash=str(cluster_id.to_string()),
+        ),
+        text_hashes=[str(text_hash) for text_hash in batch.text_hashes],
+        activations=batch.activations.tolist(),
+    )
diff --git a/spd/app/backend/services/geometry_service.py b/spd/app/backend/services/geometry_service.py
new file mode 100644
index 00000000..fa1bc331
--- /dev/null
+++ b/spd/app/backend/services/geometry_service.py
@@ -0,0 +1,72 @@
+import torch
+import torch.nn.functional as F
+from jaxtyping import Float
+from torch import Tensor
+
+from spd.app.backend.api import TokenLayerCosineSimilarityData
+from spd.app.backend.services.run_context_service import RunContextService
+from spd.log import logger
+from spd.utils.distributed_utils import get_device
+
+DEVICE = get_device()
+
+
+class GeometryService:
+    def __init__(self, run_context_service: RunContextService):
+        self.run_context_service = run_context_service
+
+    def get_subcomponent_cosine_sims(
+        self, layer: str, component_idx: int
+    ) -> TokenLayerCosineSimilarityData:
+        assert (run := self.run_context_service.train_run_context) is not None, (
+            "Run context not found"
+        )
+        assert (components := run.cm.components.get(layer)) is not None, f"Layer {layer} not found"
+
+        logger.info(f"component index: {component_idx}")
+
+        assert (cluster_ctx := self.run_context_service.cluster_run_context) is not None
+        layer_components = cluster_ctx.clustering_shape.module_component_groups[layer]
+
+        component_subcomponent_indices = torch.tensor(
+            layer_components[component_idx], device=DEVICE, dtype=torch.long
+        )
+
+        assert component_subcomponent_indices.ndim == 1, "Nonzero indices must be 1D"
+        n_nonzero = component_subcomponent_indices.shape[0]
+
+        # =========================================================#
+        # Where C is the number of subcomponents in the component #
+        # =========================================================#
+
+        u_singular_vectors: Float[torch.Tensor, "C d_in"] = components.U[
+            component_subcomponent_indices
+        ]
+        logger.info(f"{u_singular_vectors.shape=}")
+        u_pairwise_cosine_similarities = pairwise_cosine_similarities(u_singular_vectors)
+        assert u_pairwise_cosine_similarities.shape == (n_nonzero, n_nonzero)
+
+        v_singular_vectors: Float[torch.Tensor, "d_out C"] = components.V[
+            :, component_subcomponent_indices
+        ]
+        logger.info(f"{v_singular_vectors.T.shape=}")
+        v_pairwise_cosine_similarities = pairwise_cosine_similarities(v_singular_vectors.T)
+        logger.info(f"{v_pairwise_cosine_similarities.shape=}")
+        assert v_pairwise_cosine_similarities.shape == (n_nonzero, n_nonzero)
+
+        # Zero out diagonal for display (self-similarity is always 1 and distracting)
+        u_pairwise_cosine_similarities.fill_diagonal_(0.0)
+        v_pairwise_cosine_similarities.fill_diagonal_(0.0)
+
+        logger.info(f"U pairwise cosine similarities: {u_pairwise_cosine_similarities.shape}")
+        logger.info(f"V pairwise cosine similarities: {v_pairwise_cosine_similarities.shape}")
+
+        return TokenLayerCosineSimilarityData(
+            input_singular_vectors=u_pairwise_cosine_similarities.tolist(),
+            output_singular_vectors=v_pairwise_cosine_similarities.tolist(),
+            component_indices=component_subcomponent_indices.tolist(),
+        )
+
+
+def pairwise_cosine_similarities(vectors: Float[Tensor, "n d"]) -> Float[Tensor, "n n"]:
+    return F.cosine_similarity(vectors[:, None, :], vectors[None, :, :], dim=-1)
diff --git a/spd/app/backend/services/run_context_service.py b/spd/app/backend/services/run_context_service.py
new file mode 100644
index 00000000..c7a715b2
--- /dev/null
+++ b/spd/app/backend/services/run_context_service.py
@@ -0,0 +1,315 @@
+import pickle
+from collections import defaultdict
+from collections.abc import Callable
+from dataclasses import dataclass
+from pathlib import Path
+from typing import Any
+
+import torch
+import wandb
+from torch.utils.data import DataLoader
+from transformers import PreTrainedTokenizer
+
+from spd.app.backend.api import (
+    AvailablePrompt,
+    ClusteringShape,
+    ClusterRunDTO,
+    Run,
+    Status,
+    TrainRunDTO,
+)
+from spd.clustering.dashboard.dashboard_io import load_wandb_artifacts
+from spd.clustering.merge_history import MergeHistory
+from spd.configs import Config
+from spd.data import DatasetConfig, create_data_loader
+from spd.experiments.lm.configs import LMTaskConfig
+from spd.log import logger
+from spd.models.component_model import ComponentModel, SPDRunInfo
+from spd.utils.distributed_utils import get_device
+from spd.utils.general_utils import runtime_cast
+
+ENTITY = "goodfire"
+TRAIN_PROJECT = "spd"
+CLUSTER_PROJECT = "spd-cluster"
+DEVICE = get_device()
+
+
+@dataclass
+class ActivatingExamplesArgs:
+    iteration: int
+    n_samples: int
+    n_batches: int
+    batch_size: int
+    context_length: int
+
+
+@dataclass
+class TrainRunContext:
+    run: wandb.Run
+    wandb_id: str
+    wandb_path: str
+    config: Config
+    cm: ComponentModel
+    tokenizer: PreTrainedTokenizer
+    train_loader: DataLoader[Any]
+    # batched_loader: DataLoader[Any]
+    available_cluster_runs: list[str]
+
+
+@dataclass
+class ClusterRunContext:
+    wandb_path: str
+    iteration: int
+    clustering_shape: ClusteringShape
+
+    def to_dto(self) -> ClusterRunDTO:
+        return ClusterRunDTO(
+            wandb_path=self.wandb_path,
+            iteration=self.iteration,
+            clustering_shape=self.clustering_shape,
+        )
+
+
+class RunContextService:
+    def __init__(self):
+        self.train_run_context: TrainRunContext | None = None
+        self.cluster_run_context: ClusterRunContext | None = None
+        self.api = wandb.Api()
+
+    def get_runs(self) -> list[Run]:
+        return [Run(id=run.id, url=run.url) for run in self.api.runs(TRAIN_PROJECT)]
+
+    @staticmethod
+    def _parse_run_path(path: str) -> tuple[str, str, str]:
+        parts = path.split("/")
+        if len(parts) >= 3:
+            return parts[0], parts[1], parts[-1]
+        raise ValueError(f"Invalid WandB path: {path}")
+
+    def _discover_cluster_runs(self, training_run: wandb.Run) -> list[str]:
+        model_tag = f"model:{training_run.id}"
+        cluster_project = f"{ENTITY}/{CLUSTER_PROJECT}"
+        runs: list[str] = []
+        logger.info(f"Discovering cluster runs for {training_run.id}")
+        for run in self.api.runs(cluster_project, filters={"tags": {"$in": [model_tag]}}):
+            if model_tag in run.tags:
+                runs.append("/".join(runtime_cast(list, run.path)))
+        logger.info(
+            f"Found {len(runs)} clustering runs for {training_run.id}: [{', '.join(runs[:3])}...]"
+        )
+        return sorted(set(runs))
+
+    def _get_cluster_data(
+        self,
+        wandb_path: str,
+        iteration: int,
+        train_ctx: TrainRunContext,
+    ):
+        merge_history, _ = load_wandb_artifacts(wandb_path)
+        unique_cluster_indices = merge_history.get_unique_clusters(iteration)
+
+        # todo: validate this these are actually subcomponents, not components
+        subcomponents_by_cluster_id: dict[int, list[MergeHistory.ClusterComponentInfo]] = {
+            cid: merge_history.get_cluster_components_info(iteration, cid)
+            for cid in unique_cluster_indices
+        }
+
+        module_cluster_map: dict[str, dict[int, list[int]]] = defaultdict(lambda: defaultdict(list))
+        for cluster_id, cluster_subcomponents in subcomponents_by_cluster_id.items():
+            for component in cluster_subcomponents:
+                module_cluster_map[component.module][cluster_id].append(component.index)
+
+        module_component_assignments: dict[str, list[int]] = {}
+        module_component_groups: dict[str, list[list[int]]] = {}
+
+        for module_name, components_module in train_ctx.cm.components.items():
+            C = components_module.C
+            assignments = [-1] * C
+            groups: list[list[int]] = []
+
+            cluster_groups = module_cluster_map.get(module_name, {})
+            for indices in sorted(cluster_groups.values()):
+                if any(int(i) < 0 or int(i) >= C for i in indices):
+                    raise ValueError(f"Invalid indices: {indices}")
+                unique_indices = sorted({int(i) for i in indices})
+                component_idx = len(groups)
+                for sub_idx in unique_indices:
+                    assignments[sub_idx] = component_idx
+                groups.append(unique_indices)
+
+            unassigned = [sub_idx for sub_idx in range(C) if assignments[sub_idx] == -1]
+            for sub_idx in unassigned:
+                assignments[sub_idx] = len(groups)
+                groups.append([sub_idx])
+
+            module_component_assignments[module_name] = assignments
+            module_component_groups[module_name] = groups
+
+        return ClusteringShape(
+            module_component_assignments=module_component_assignments,
+            module_component_groups=module_component_groups,
+        )
+
+    def get_status(self) -> Status:
+        if (train_ctx := self.train_run_context) is None:
+            return Status(
+                train_run=None,
+                cluster_run=None,
+            )
+
+        train_run = TrainRunDTO(
+            wandb_path=train_ctx.wandb_path,
+            component_layers=list(train_ctx.cm.components.keys()),
+            available_cluster_runs=train_ctx.available_cluster_runs,
+            config=train_ctx.config.model_dump(),
+        )
+
+        if (cluster_ctx := self.cluster_run_context) is None:
+            return Status(
+                train_run=train_run,
+                cluster_run=None,
+            )
+
+        cluster_run = cluster_ctx.to_dto()
+
+        return Status(
+            train_run=train_run,
+            cluster_run=cluster_run,
+        )
+
+    def load_run(self, wandb_path: str):
+        # self.train_run_context = get_pickle_cached(
+        #     key=wandb_path.replace("/", "-"),
+        #     get_func=lambda: self._load_run_from_wandb_path(wandb_path),
+        # )
+        self.train_run_context = self._load_run_from_wandb_path(wandb_path)
+        logger.info(f"Loaded run from wandb id: {wandb_path}")
+
+    def _load_run_from_wandb_path(self, wandb_id: str):
+        logger.info(f"Loading run from wandb id: {wandb_id}")
+
+        wandb_run: wandb.Run = self.api.run(f"{ENTITY}/{TRAIN_PROJECT}/{wandb_id}")
+        if wandb_run is None:
+            raise ValueError(f"WandB run not found for id {wandb_id}")
+
+        wandb_path = "/".join(wandb_run.path)
+        model_path = f"wandb:{wandb_run.entity}/{wandb_run.project}/runs/{wandb_run.id}"
+
+        run_info = SPDRunInfo.from_path(model_path)
+
+        task_config = runtime_cast(LMTaskConfig, run_info.config.task_config)
+
+        train_data_config = DatasetConfig(
+            name=task_config.dataset_name,
+            hf_tokenizer_path=run_info.config.tokenizer_name,
+            split=task_config.train_data_split,
+            n_ctx=task_config.max_seq_len,
+            is_tokenized=task_config.is_tokenized,
+            streaming=task_config.streaming,
+            column_name=task_config.column_name,
+            shuffle_each_epoch=task_config.shuffle_each_epoch,
+            seed=None,
+        )
+
+        logger.info("Creating train loader from run info")
+        train_loader, tokenizer = create_data_loader(
+            dataset_config=train_data_config,
+            batch_size=1,
+            buffer_size=task_config.buffer_size,
+            global_seed=run_info.config.seed,
+            ddp_rank=0,
+            ddp_world_size=0,
+        )
+
+        # batched_loader, _ = create_data_loader(
+        #     dataset_config=train_data_config,
+        #     batch_size=run_info.config.microbatch_size,
+        #     buffer_size=task_config.buffer_size,
+        #     global_seed=run_info.config.seed,
+        #     ddp_rank=0,
+        #     ddp_world_size=0,
+        # )
+
+
+        logger.info("Creating component model from run info")
+        cm = ComponentModel.from_run_info(run_info)
+        cm.to(DEVICE)
+
+        available_cluster_runs = self._discover_cluster_runs(wandb_run)
+
+        return TrainRunContext(
+            run=wandb_run,
+            wandb_id=wandb_id,
+            wandb_path=wandb_path,
+            config=run_info.config,
+            cm=cm,
+            tokenizer=tokenizer,
+            train_loader=train_loader,
+            # batched_loader=batched_loader,
+            available_cluster_runs=available_cluster_runs,
+        )
+
+    def load_cluster_run(self, wandb_path: str, iteration: int):
+        logger.info(f"Loading cluster run from wandb path: {wandb_path}")
+        # self.cluster_run_context = get_pickle_cached(
+        #     key=f"{wandb_path.replace('/', '-')}-{iteration}",
+        #     get_func=lambda: self._load_cluster_run_from_wandb_path(wandb_path, iteration),
+        # )
+        self.cluster_run_context = self._load_cluster_run_from_wandb_path(wandb_path, iteration)
+        logger.info(f"Loaded cluster run from wandb path: {wandb_path}")
+
+    def _load_cluster_run_from_wandb_path(self, wandb_path: str, iteration: int):
+        assert (train_ctx := self.train_run_context) is not None
+        # assert (cluster_run_ctx := self.cluster_run_context) is not None
+
+        logger.info(f"Loading cluster run from wandb path: {wandb_path}")
+        # wandb_run = runtime_cast(Run, self.api.run(wandb_path))
+
+        return ClusterRunContext(
+            wandb_path=wandb_path,
+            iteration=iteration,
+            clustering_shape=self._get_cluster_data(wandb_path, iteration, train_ctx),
+        )
+
+    def get_available_prompts(self) -> list[AvailablePrompt]:
+        """Get first 100 prompts from the dataset with their indices and text."""
+        assert (ctx := self.train_run_context) is not None, "Run context not found"
+
+        prompts = []
+        for idx in range(min(100, len(ctx.train_loader.dataset))):  # pyright: ignore[reportArgumentType]
+            example = ctx.train_loader.dataset[idx]["input_ids"]
+            assert isinstance(example, torch.Tensor)
+            assert example.ndim == 1, "Example must be 1D (seq_len)"
+
+            # Decode to text for display
+            text = ctx.tokenizer.decode(example, skip_special_tokens=True)  # pyright: ignore[reportAttributeAccessIssue]
+
+            prompts.append(AvailablePrompt(index=idx, full_text=text))
+
+        return prompts
+
+
+CACHE_DIR = Path(".data/cache")
+
+
+def get_pickle_cached(key: str, get_func: Callable[[], Any]) -> Any:
+    # Ensure the cache directory exists
+    CACHE_DIR.mkdir(parents=True, exist_ok=True)
+
+    file = CACHE_DIR / f"{key}.pkl"
+
+    if file.exists():
+        logger.info(f"cache hit for {key}")
+        with open(file, "rb") as f:
+            logger.info(f"loading from cache for {key}")
+            res = pickle.load(f)
+        logger.info(f"loaded from cache for {key}")
+        return res
+
+    logger.info(f"cache miss for {key}")
+    res = get_func()
+    logger.info(f"saving to cache for {key}")
+    with open(file, "wb") as f:
+        pickle.dump(res, f, protocol=pickle.HIGHEST_PROTOCOL)
+    logger.info(f"saved to cache for {key}")
+    return res
diff --git a/spd/app/backend/services/wandb_service.py b/spd/app/backend/services/wandb_service.py
new file mode 100644
index 00000000..e69de29b
diff --git a/spd/app/backend/utils.py b/spd/app/backend/utils.py
new file mode 100644
index 00000000..b4528c72
--- /dev/null
+++ b/spd/app/backend/utils.py
@@ -0,0 +1,15 @@
+import torch
+from jaxtyping import Float
+from torch import Tensor
+
+from spd.app.backend.api import SparseVector
+
+
+def tensor_to_sparse_vector(tensor: Float[Tensor, " C"]) -> SparseVector:
+    assert tensor.ndim == 1, "Tensor must be 1D"
+    assert torch.all(tensor >= 0), "Tensor must be non-negative"
+    return SparseVector(
+        l0=int((tensor > 0).sum().item()),
+        indices=tensor.nonzero().flatten().tolist(),
+        values=tensor.tolist(),
+    )
diff --git a/spd/app/backend/workers/activation_contexts_worker.py b/spd/app/backend/workers/activation_contexts_worker.py
new file mode 100644
index 00000000..6df6c522
--- /dev/null
+++ b/spd/app/backend/workers/activation_contexts_worker.py
@@ -0,0 +1,348 @@
+from __future__ import annotations
+
+import gc
+import heapq
+import sys
+from collections import defaultdict
+from collections.abc import Generator, Iterable
+from dataclasses import dataclass
+
+import torch
+from tqdm import tqdm
+from transformers import PreTrainedTokenizer
+
+from spd.app.backend.api import (
+    ActivationContext,
+    ModelActivationContexts,
+    SubcomponentActivationContexts,
+    TokenDensity,
+)
+from spd.app.backend.services.run_context_service import RunContextService, TrainRunContext
+from spd.configs import Config
+from spd.log import logger
+from spd.models.component_model import ComponentModel
+from spd.utils.distributed_utils import get_device
+from spd.utils.general_utils import extract_batch_data
+
+DEVICE = get_device()
+
+
+@dataclass
+class SubcomponentExample:
+    window_tokens: list[int]
+    """Windowed tokens around the firing position"""
+    pos: int
+    """Absolute position within the original sequence"""
+    active_pos_in_window: int
+    """Position within window_tokens corresponding to pos"""
+    token_ci_values: list[float]
+    """CI values aligned to window_tokens"""
+    last_tok_importance: float
+    """CI value at the firing position"""
+
+
+@dataclass
+class FastComponentSummary:
+    module_name: str
+    component_idx: int
+    density: float
+    examples: list[SubcomponentExample]
+
+
+class _TopKExamples:
+    def __init__(self, k: int):
+        self.k = k
+        # Min-heap of tuples (importance, counter, example)
+        self.heap: list[tuple[float, int, SubcomponentExample]] = []
+        self._counter: int = 0
+
+    def maybe_add(self, example: SubcomponentExample) -> None:
+        key = (example.last_tok_importance, self._counter, example)
+        self._counter += 1
+        if len(self.heap) < self.k:
+            heapq.heappush(self.heap, key)
+            return
+        # Heap full: replace min if better
+        if self.heap[0][0] < example.last_tok_importance:
+            heapq.heapreplace(self.heap, key)
+
+    def to_sorted_list_desc(self) -> list[SubcomponentExample]:
+        # Return examples sorted by importance descending
+        return [ex for _, _, ex in sorted(self.heap, key=lambda t: t[0], reverse=True)]
+
+
+@dataclass
+class WorkerArgs:
+    wandb_path: str
+    importance_threshold: float
+    # separation_threshold_tokens: int
+    max_examples_per_subcomponent: int
+    n_batches: int
+    n_tokens_either_side: int
+    batch_size: int
+
+
+def worker_main(args: WorkerArgs) -> ModelActivationContexts:
+    logger.info("worker: Getting activation contexts")
+
+    rcs = RunContextService()
+    logger.info("worker: Loading run context")
+    rcs.load_run(args.wandb_path)
+    assert (run_context := rcs.train_run_context) is not None, "Run context not found"
+
+    run_context.cm.to(DEVICE)
+
+    topk_by_subcomponent = get_topk_by_subcomponent(
+        run_context,
+        args.importance_threshold,
+        args.max_examples_per_subcomponent,
+        args.n_batches,
+        args.n_tokens_either_side,
+        args.batch_size,
+    )
+
+    return map_to_model_ctxs(run_context, topk_by_subcomponent)
+
+
+def roll_batch_size_1_into_x(
+    singleton_batches: Iterable[torch.Tensor],
+    batch_size: int,
+) -> Generator[torch.Tensor, None, None]:
+    logger.info(f"worker: rolling batch size 1 into {batch_size}")
+    examples = []
+    for batch in singleton_batches:
+        assert batch.shape[0] == 1, "Batch size must be 1"
+        examples.append(batch[0])
+        if len(examples) == batch_size:
+            yield torch.stack(examples)
+            examples = []
+    if examples:
+        yield torch.stack(examples)
+
+
+def get_topk_by_subcomponent(
+    run_context: TrainRunContext,
+    importance_threshold: float,
+    # separation_threshold_tokens: int,
+    max_examples_per_subcomponent: int,
+    n_batches: int,
+    n_tokens_either_side: int,
+    batch_size: int,
+) -> dict[tuple[str, int], _TopKExamples]:
+    # Tracks top-k examples per (module_name, component_idx)
+    topk_by_subcomponent: dict[tuple[str, int], _TopKExamples] = {}
+    # Counts of total firings per (module_name, component_idx) (kept for density)
+    firing_counts: dict[tuple[str, int], int] = {}
+
+    C = run_context.cm.C
+
+    logger.info("worker: starting data iteration")
+
+    batches = roll_batch_size_1_into_x(
+        singleton_batches=(extract_batch_data(b).to(DEVICE) for b in run_context.train_loader),
+        batch_size=batch_size,
+    )
+
+    for i in tqdm(range(n_batches), desc="Processing data", file=sys.stderr):
+        batch = next(batches)
+
+        assert isinstance(batch, torch.Tensor)
+        assert batch.ndim == 2, "Expected batch tensor of shape (B, S)"
+        B, S = batch.shape
+        if i == 0:
+            print(f"Batch shape: {B}, {S}, batch_size: {batch_size}")
+
+        # IMPORTANT: separation should be enforced only *within this batch's sequences*.
+        # Reset cache each batch so slots (b = 0..B-1) from previous batches don't suppress new sequences.
+        last_pos_in_seq: dict[tuple[str, int, int], int] = {}
+
+        importances_by_module = _get_importances_by_module(
+            run_context.cm, batch, run_context.config
+        )
+
+        for module_name, causal_importances in importances_by_module.items():
+            assert causal_importances.shape == (B, S, C), "Expected (B,S,C) per module"
+
+            # Thresholding to find "firings"
+            mask = causal_importances > importance_threshold
+            if not mask.any():
+                continue
+
+            # (K,) indices of all firings
+            b_idx, s_idx, m_idx = torch.where(mask)
+            K = b_idx.numel()
+
+            # Update density numerators via bincount on component index
+            comp_counts = torch.bincount(m_idx, minlength=C)
+            for comp_i in range(C):
+                c = int(comp_counts[comp_i].item())
+                if c:
+                    firing_counts[(module_name, comp_i)] = (
+                        firing_counts.get((module_name, comp_i), 0) + c
+                    )
+
+            # Sort for cache-friendly iteration
+            order = torch.argsort(b_idx * S + s_idx)
+            b_idx = b_idx[order]
+            s_idx = s_idx[order]
+            m_idx = m_idx[order]
+
+            # Iterate across K firings
+            for j in range(K):
+                b = int(b_idx[j].item())
+                s = int(s_idx[j].item())
+                m = int(m_idx[j].item())
+                key = (module_name, m)
+
+                # Enforce separation within this batch's sequence only
+                lp_key = (module_name, m, b)
+                # last = last_pos_in_seq.get(lp_key, -separation_threshold_tokens - 1)
+                # if s < last + separation_threshold_tokens:
+                #     continue
+
+                importance_val = float(causal_importances[b, s, m].item())
+
+                # Maintain bounded top-k heap per subcomponent
+                if key not in topk_by_subcomponent:
+                    topk_by_subcomponent[key] = _TopKExamples(max_examples_per_subcomponent)
+
+                heap = topk_by_subcomponent[key].heap
+                if len(heap) == max_examples_per_subcomponent and importance_val <= heap[0][0]:
+                    # Keep original behavior: still advance separation to avoid clustering,
+                    # even when we skip due to not beating the heap minimum.
+                    last_pos_in_seq[lp_key] = s
+                    continue
+
+                # Build window around the firing position
+                start_idx = max(0, s - n_tokens_either_side)
+                end_idx = min(S, s + n_tokens_either_side + 1)
+
+                window_tokens = batch[b, start_idx:end_idx].detach().clone().to("cpu").tolist()
+                active_pos_in_window = s - start_idx
+
+                # Build token_ci_values aligned with the window
+                token_ci_values: list[float] = []
+                for k in range(len(window_tokens)):
+                    orig_idx = start_idx + k
+                    if orig_idx < S and bool(mask[b, orig_idx, m].item()):
+                        token_ci_values.append(float(causal_importances[b, orig_idx, m].item()))
+                    else:
+                        token_ci_values.append(0.0)
+                # Ensure active token uses the exact firing value
+                token_ci_values[active_pos_in_window] = importance_val
+
+                ex = SubcomponentExample(
+                    window_tokens=window_tokens,
+                    pos=s,
+                    active_pos_in_window=active_pos_in_window,
+                    token_ci_values=token_ci_values,
+                    last_tok_importance=importance_val,
+                )
+                topk_by_subcomponent[key].maybe_add(ex)
+
+                # Update separation cursor for this sequence slot
+                last_pos_in_seq[lp_key] = s
+
+    return topk_by_subcomponent
+
+
+def _get_importances_by_module(
+    cm: ComponentModel, batch: torch.Tensor, config: Config
+) -> dict[str, torch.Tensor]:
+    with torch.no_grad():
+        _, pre_weight_acts = cm(
+            batch,
+            mode="input_cache",
+            module_names=list(cm.components.keys()),
+        )
+        importances_by_module, _ = cm.calc_causal_importances(
+            pre_weight_acts=pre_weight_acts,
+            sigmoid_type=config.sigmoid_type,
+            detach_inputs=True,
+            sampling=config.sampling,
+        )
+    return importances_by_module
+
+
+def example_to_activation_context(
+    ex: SubcomponentExample,
+    tokenizer: PreTrainedTokenizer,
+) -> ActivationContext:
+    raw_text = tokenizer.decode(ex.window_tokens, add_special_tokens=False)  # pyright: ignore[reportAttributeAccessIssue]
+    tokenized = tokenizer.encode_plus(  # pyright: ignore[reportAttributeAccessIssue]
+        raw_text,
+        return_tensors="pt",
+        return_offsets_mapping=True,
+        truncation=False,
+        padding=False,
+        add_special_tokens=False,
+    )
+    offset_mapping = tokenized["offset_mapping"][0].tolist()
+    return ActivationContext(
+        raw_text=raw_text,
+        offset_mapping=offset_mapping,
+        token_ci_values=ex.token_ci_values,
+        active_position=ex.active_pos_in_window,
+        ci_value=ex.last_tok_importance,
+    )
+
+
+def map_to_model_ctxs(
+    run_context: TrainRunContext,
+    topk_by_subcomponent: dict[tuple[str, int], _TopKExamples],
+) -> ModelActivationContexts:
+    # use dict of dicts to achieve ≈O(1) access
+    layers = defaultdict[str, defaultdict[int, list[ActivationContext]]](lambda: defaultdict(list))
+    for (module_name, subcomponent_idx), heap_obj in topk_by_subcomponent.items():
+        for ex in heap_obj.to_sorted_list_desc():
+            activation_context = example_to_activation_context(ex, run_context.tokenizer)
+            layers[module_name][subcomponent_idx].append(activation_context)
+
+    # convert to ModelActivationContexts which uses tuple form for persistence
+    return ModelActivationContexts(
+        layers={
+            layer: [
+                SubcomponentActivationContexts(
+                    subcomponent_idx=subcomponent_idx,
+                    examples=examples,
+                    token_densities=_compute_token_densities(examples, run_context),
+                )
+                for subcomponent_idx, examples in subcomponents.items()
+            ]
+            for layer, subcomponents in layers.items()
+        }
+    )
+
+
+def _compute_token_densities(
+    examples: list[ActivationContext], run_context: TrainRunContext
+) -> list[TokenDensity]:
+    from collections import Counter
+
+    from spd.app.backend.api import TokenDensity
+
+    token_counts = Counter[int]()
+    total = 0
+
+    for context in examples:
+        active_tok_idx = context.active_position
+        if 0 <= active_tok_idx < len(context.offset_mapping):
+            start, end = context.offset_mapping[active_tok_idx]
+            token_text = context.raw_text[start:end]
+            try:
+                token_id = run_context.tokenizer.encode(token_text, add_special_tokens=False)[0]  # pyright: ignore[reportAttributeAccessIssue]
+                token_counts[token_id] += 1
+                total += 1
+            except (IndexError, KeyError):
+                continue
+
+    if total == 0:
+        return []
+
+    return [
+        TokenDensity(
+            token=run_context.tokenizer.decode([tok_id]),  # pyright: ignore[reportAttributeAccessIssue]
+            density=count / total,
+        )
+        for tok_id, count in token_counts.most_common()
+    ]
diff --git a/spd/app/frontend/.gitignore b/spd/app/frontend/.gitignore
new file mode 100644
index 00000000..3b462cb0
--- /dev/null
+++ b/spd/app/frontend/.gitignore
@@ -0,0 +1,23 @@
+node_modules
+
+# Output
+.output
+.vercel
+.netlify
+.wrangler
+/.svelte-kit
+/build
+
+# OS
+.DS_Store
+Thumbs.db
+
+# Env
+.env
+.env.*
+!.env.example
+!.env.test
+
+# Vite
+vite.config.js.timestamp-*
+vite.config.ts.timestamp-*
diff --git a/spd/app/frontend/.npmrc b/spd/app/frontend/.npmrc
new file mode 100644
index 00000000..b6f27f13
--- /dev/null
+++ b/spd/app/frontend/.npmrc
@@ -0,0 +1 @@
+engine-strict=true
diff --git a/spd/app/frontend/.prettierignore b/spd/app/frontend/.prettierignore
new file mode 100644
index 00000000..7d74fe24
--- /dev/null
+++ b/spd/app/frontend/.prettierignore
@@ -0,0 +1,9 @@
+# Package Managers
+package-lock.json
+pnpm-lock.yaml
+yarn.lock
+bun.lock
+bun.lockb
+
+# Miscellaneous
+/static/
diff --git a/spd/app/frontend/.prettierrc b/spd/app/frontend/.prettierrc
new file mode 100644
index 00000000..432f2739
--- /dev/null
+++ b/spd/app/frontend/.prettierrc
@@ -0,0 +1,17 @@
+{
+	"tabWidth": 4,
+	"useTabs": false,
+	"singleQuote": false,
+	"trailingComma": "none",
+	"printWidth": 100,
+	"plugins": ["prettier-plugin-svelte", "prettier-plugin-tailwindcss"],
+	"overrides": [
+		{
+			"files": "*.svelte",
+			"options": {
+				"parser": "svelte"
+			}
+		}
+	],
+	"tailwindStylesheet": "./src/app.css"
+}
diff --git a/spd/app/frontend/README.md b/spd/app/frontend/README.md
new file mode 100644
index 00000000..75842c40
--- /dev/null
+++ b/spd/app/frontend/README.md
@@ -0,0 +1,38 @@
+# sv
+
+Everything you need to build a Svelte project, powered by [`sv`](https://github.com/sveltejs/cli).
+
+## Creating a project
+
+If you're seeing this, you've probably already done this step. Congrats!
+
+```sh
+# create a new project in the current directory
+npx sv create
+
+# create a new project in my-app
+npx sv create my-app
+```
+
+## Developing
+
+Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:
+
+```sh
+npm run dev
+
+# or start the server and open the app in a new browser tab
+npm run dev -- --open
+```
+
+## Building
+
+To create a production version of your app:
+
+```sh
+npm run build
+```
+
+You can preview the production build with `npm run preview`.
+
+> To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.
diff --git a/spd/app/frontend/eslint.config.js b/spd/app/frontend/eslint.config.js
new file mode 100644
index 00000000..2c49fa64
--- /dev/null
+++ b/spd/app/frontend/eslint.config.js
@@ -0,0 +1,41 @@
+import prettier from 'eslint-config-prettier';
+import { fileURLToPath } from 'node:url';
+import { includeIgnoreFile } from '@eslint/compat';
+import js from '@eslint/js';
+import svelte from 'eslint-plugin-svelte';
+import { defineConfig } from 'eslint/config';
+import globals from 'globals';
+import ts from 'typescript-eslint';
+import svelteConfig from './svelte.config.js';
+
+const gitignorePath = fileURLToPath(new URL('./.gitignore', import.meta.url));
+
+export default defineConfig(
+	includeIgnoreFile(gitignorePath),
+	js.configs.recommended,
+	...ts.configs.recommended,
+	...svelte.configs.recommended,
+	prettier,
+	...svelte.configs.prettier,
+	{
+		languageOptions: {
+			globals: { ...globals.browser, ...globals.node }
+		},
+		rules: {
+			// typescript-eslint strongly recommend that you do not use the no-undef lint rule on TypeScript projects.
+			// see: https://typescript-eslint.io/troubleshooting/faqs/eslint/#i-get-errors-from-the-no-undef-rule-about-global-variables-not-being-defined-even-though-there-are-no-typescript-errors
+			'no-undef': 'off'
+		}
+	},
+	{
+		files: ['**/*.svelte', '**/*.svelte.ts', '**/*.svelte.js'],
+		languageOptions: {
+			parserOptions: {
+				projectService: true,
+				extraFileExtensions: ['.svelte'],
+				parser: ts.parser,
+				svelteConfig
+			}
+		}
+	}
+);
diff --git a/spd/app/frontend/package-lock.json b/spd/app/frontend/package-lock.json
new file mode 100644
index 00000000..70a12433
--- /dev/null
+++ b/spd/app/frontend/package-lock.json
@@ -0,0 +1,4195 @@
+{
+	"name": "frontend",
+	"version": "0.0.1",
+	"lockfileVersion": 3,
+	"requires": true,
+	"packages": {
+		"": {
+			"name": "frontend",
+			"version": "0.0.1",
+			"devDependencies": {
+				"@eslint/compat": "^1.2.5",
+				"@eslint/js": "^9.22.0",
+				"@sveltejs/adapter-auto": "^6.0.0",
+				"@sveltejs/kit": "^2.22.0",
+				"@sveltejs/vite-plugin-svelte": "^6.0.0",
+				"@tailwindcss/vite": "^4.0.0",
+				"@types/node": "^22",
+				"eslint": "^9.22.0",
+				"eslint-config-prettier": "^10.0.1",
+				"eslint-plugin-svelte": "^3.0.0",
+				"globals": "^16.0.0",
+				"prettier": "^3.4.2",
+				"prettier-plugin-svelte": "^3.3.3",
+				"prettier-plugin-tailwindcss": "^0.6.11",
+				"svelte": "^5.0.0",
+				"svelte-check": "^4.0.0",
+				"tailwindcss": "^4.0.0",
+				"typescript": "^5.0.0",
+				"typescript-eslint": "^8.20.0",
+				"vite": "^7.0.4"
+			}
+		},
+		"node_modules/@esbuild/aix-ppc64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.10.tgz",
+			"integrity": "sha512-0NFWnA+7l41irNuaSVlLfgNT12caWJVLzp5eAVhZ0z1qpxbockccEt3s+149rE64VUI3Ml2zt8Nv5JVc4QXTsw==",
+			"cpu": [
+				"ppc64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"aix"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/android-arm": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.10.tgz",
+			"integrity": "sha512-dQAxF1dW1C3zpeCDc5KqIYuZ1tgAdRXNoZP7vkBIRtKZPYe2xVr/d3SkirklCHudW1B45tGiUlz2pUWDfbDD4w==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/android-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.10.tgz",
+			"integrity": "sha512-LSQa7eDahypv/VO6WKohZGPSJDq5OVOo3UoFR1E4t4Gj1W7zEQMUhI+lo81H+DtB+kP+tDgBp+M4oNCwp6kffg==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/android-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.10.tgz",
+			"integrity": "sha512-MiC9CWdPrfhibcXwr39p9ha1x0lZJ9KaVfvzA0Wxwz9ETX4v5CHfF09bx935nHlhi+MxhA63dKRRQLiVgSUtEg==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/darwin-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.10.tgz",
+			"integrity": "sha512-JC74bdXcQEpW9KkV326WpZZjLguSZ3DfS8wrrvPMHgQOIEIG/sPXEN/V8IssoJhbefLRcRqw6RQH2NnpdprtMA==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/darwin-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.10.tgz",
+			"integrity": "sha512-tguWg1olF6DGqzws97pKZ8G2L7Ig1vjDmGTwcTuYHbuU6TTjJe5FXbgs5C1BBzHbJ2bo1m3WkQDbWO2PvamRcg==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/freebsd-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.10.tgz",
+			"integrity": "sha512-3ZioSQSg1HT2N05YxeJWYR+Libe3bREVSdWhEEgExWaDtyFbbXWb49QgPvFH8u03vUPX10JhJPcz7s9t9+boWg==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"freebsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/freebsd-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.10.tgz",
+			"integrity": "sha512-LLgJfHJk014Aa4anGDbh8bmI5Lk+QidDmGzuC2D+vP7mv/GeSN+H39zOf7pN5N8p059FcOfs2bVlrRr4SK9WxA==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"freebsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-arm": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.10.tgz",
+			"integrity": "sha512-oR31GtBTFYCqEBALI9r6WxoU/ZofZl962pouZRTEYECvNF/dtXKku8YXcJkhgK/beU+zedXfIzHijSRapJY3vg==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.10.tgz",
+			"integrity": "sha512-5luJWN6YKBsawd5f9i4+c+geYiVEw20FVW5x0v1kEMWNq8UctFjDiMATBxLvmmHA4bf7F6hTRaJgtghFr9iziQ==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-ia32": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.10.tgz",
+			"integrity": "sha512-NrSCx2Kim3EnnWgS4Txn0QGt0Xipoumb6z6sUtl5bOEZIVKhzfyp/Lyw4C1DIYvzeW/5mWYPBFJU3a/8Yr75DQ==",
+			"cpu": [
+				"ia32"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-loong64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.10.tgz",
+			"integrity": "sha512-xoSphrd4AZda8+rUDDfD9J6FUMjrkTz8itpTITM4/xgerAZZcFW7Dv+sun7333IfKxGG8gAq+3NbfEMJfiY+Eg==",
+			"cpu": [
+				"loong64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-mips64el": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.10.tgz",
+			"integrity": "sha512-ab6eiuCwoMmYDyTnyptoKkVS3k8fy/1Uvq7Dj5czXI6DF2GqD2ToInBI0SHOp5/X1BdZ26RKc5+qjQNGRBelRA==",
+			"cpu": [
+				"mips64el"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-ppc64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.10.tgz",
+			"integrity": "sha512-NLinzzOgZQsGpsTkEbdJTCanwA5/wozN9dSgEl12haXJBzMTpssebuXR42bthOF3z7zXFWH1AmvWunUCkBE4EA==",
+			"cpu": [
+				"ppc64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-riscv64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.10.tgz",
+			"integrity": "sha512-FE557XdZDrtX8NMIeA8LBJX3dC2M8VGXwfrQWU7LB5SLOajfJIxmSdyL/gU1m64Zs9CBKvm4UAuBp5aJ8OgnrA==",
+			"cpu": [
+				"riscv64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-s390x": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.10.tgz",
+			"integrity": "sha512-3BBSbgzuB9ajLoVZk0mGu+EHlBwkusRmeNYdqmznmMc9zGASFjSsxgkNsqmXugpPk00gJ0JNKh/97nxmjctdew==",
+			"cpu": [
+				"s390x"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.10.tgz",
+			"integrity": "sha512-QSX81KhFoZGwenVyPoberggdW1nrQZSvfVDAIUXr3WqLRZGZqWk/P4T8p2SP+de2Sr5HPcvjhcJzEiulKgnxtA==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/netbsd-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.10.tgz",
+			"integrity": "sha512-AKQM3gfYfSW8XRk8DdMCzaLUFB15dTrZfnX8WXQoOUpUBQ+NaAFCP1kPS/ykbbGYz7rxn0WS48/81l9hFl3u4A==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"netbsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/netbsd-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.10.tgz",
+			"integrity": "sha512-7RTytDPGU6fek/hWuN9qQpeGPBZFfB4zZgcz2VK2Z5VpdUxEI8JKYsg3JfO0n/Z1E/6l05n0unDCNc4HnhQGig==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"netbsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/openbsd-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.10.tgz",
+			"integrity": "sha512-5Se0VM9Wtq797YFn+dLimf2Zx6McttsH2olUBsDml+lm0GOCRVebRWUvDtkY4BWYv/3NgzS8b/UM3jQNh5hYyw==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"openbsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/openbsd-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.10.tgz",
+			"integrity": "sha512-XkA4frq1TLj4bEMB+2HnI0+4RnjbuGZfet2gs/LNs5Hc7D89ZQBHQ0gL2ND6Lzu1+QVkjp3x1gIcPKzRNP8bXw==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"openbsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/openharmony-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.10.tgz",
+			"integrity": "sha512-AVTSBhTX8Y/Fz6OmIVBip9tJzZEUcY8WLh7I59+upa5/GPhh2/aM6bvOMQySspnCCHvFi79kMtdJS1w0DXAeag==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"openharmony"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/sunos-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.10.tgz",
+			"integrity": "sha512-fswk3XT0Uf2pGJmOpDB7yknqhVkJQkAQOcW/ccVOtfx05LkbWOaRAtn5SaqXypeKQra1QaEa841PgrSL9ubSPQ==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"sunos"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/win32-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.10.tgz",
+			"integrity": "sha512-ah+9b59KDTSfpaCg6VdJoOQvKjI33nTaQr4UluQwW7aEwZQsbMCfTmfEO4VyewOxx4RaDT/xCy9ra2GPWmO7Kw==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/win32-ia32": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.10.tgz",
+			"integrity": "sha512-QHPDbKkrGO8/cz9LKVnJU22HOi4pxZnZhhA2HYHez5Pz4JeffhDjf85E57Oyco163GnzNCVkZK0b/n4Y0UHcSw==",
+			"cpu": [
+				"ia32"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/win32-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.10.tgz",
+			"integrity": "sha512-9KpxSVFCu0iK1owoez6aC/s/EdUQLDN3adTxGCqxMVhrPDj6bt5dbrHDXUuq+Bs2vATFBBrQS5vdQ/Ed2P+nbw==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@eslint-community/eslint-utils": {
+			"version": "4.9.0",
+			"resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
+			"integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"eslint-visitor-keys": "^3.4.3"
+			},
+			"engines": {
+				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+			},
+			"funding": {
+				"url": "https://opencollective.com/eslint"
+			},
+			"peerDependencies": {
+				"eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
+			}
+		},
+		"node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
+			"version": "3.4.3",
+			"resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
+			"integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+			},
+			"funding": {
+				"url": "https://opencollective.com/eslint"
+			}
+		},
+		"node_modules/@eslint-community/regexpp": {
+			"version": "4.12.1",
+			"resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
+			"integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": "^12.0.0 || ^14.0.0 || >=16.0.0"
+			}
+		},
+		"node_modules/@eslint/compat": {
+			"version": "1.4.0",
+			"resolved": "https://registry.npmjs.org/@eslint/compat/-/compat-1.4.0.tgz",
+			"integrity": "sha512-DEzm5dKeDBPm3r08Ixli/0cmxr8LkRdwxMRUIJBlSCpAwSrvFEJpVBzV+66JhDxiaqKxnRzCXhtiMiczF7Hglg==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"dependencies": {
+				"@eslint/core": "^0.16.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"peerDependencies": {
+				"eslint": "^8.40 || 9"
+			},
+			"peerDependenciesMeta": {
+				"eslint": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/@eslint/config-array": {
+			"version": "0.21.0",
+			"resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
+			"integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"dependencies": {
+				"@eslint/object-schema": "^2.1.6",
+				"debug": "^4.3.1",
+				"minimatch": "^3.1.2"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			}
+		},
+		"node_modules/@eslint/config-helpers": {
+			"version": "0.3.1",
+			"resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.1.tgz",
+			"integrity": "sha512-xR93k9WhrDYpXHORXpxVL5oHj3Era7wo6k/Wd8/IsQNnZUTzkGS29lyn3nAT05v6ltUuTFVCCYDEGfy2Or/sPA==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			}
+		},
+		"node_modules/@eslint/core": {
+			"version": "0.16.0",
+			"resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.16.0.tgz",
+			"integrity": "sha512-nmC8/totwobIiFcGkDza3GIKfAw1+hLiYVrh3I1nIomQ8PEr5cxg34jnkmGawul/ep52wGRAcyeDCNtWKSOj4Q==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"dependencies": {
+				"@types/json-schema": "^7.0.15"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			}
+		},
+		"node_modules/@eslint/eslintrc": {
+			"version": "3.3.1",
+			"resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
+			"integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"ajv": "^6.12.4",
+				"debug": "^4.3.2",
+				"espree": "^10.0.1",
+				"globals": "^14.0.0",
+				"ignore": "^5.2.0",
+				"import-fresh": "^3.2.1",
+				"js-yaml": "^4.1.0",
+				"minimatch": "^3.1.2",
+				"strip-json-comments": "^3.1.1"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"url": "https://opencollective.com/eslint"
+			}
+		},
+		"node_modules/@eslint/eslintrc/node_modules/globals": {
+			"version": "14.0.0",
+			"resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
+			"integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=18"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/@eslint/js": {
+			"version": "9.36.0",
+			"resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.36.0.tgz",
+			"integrity": "sha512-uhCbYtYynH30iZErszX78U+nR3pJU3RHGQ57NXy5QupD4SBVwDeU8TNBy+MjMngc1UyIW9noKqsRqfjQTBU2dw==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"url": "https://eslint.org/donate"
+			}
+		},
+		"node_modules/@eslint/object-schema": {
+			"version": "2.1.6",
+			"resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
+			"integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			}
+		},
+		"node_modules/@eslint/plugin-kit": {
+			"version": "0.3.5",
+			"resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.5.tgz",
+			"integrity": "sha512-Z5kJ+wU3oA7MMIqVR9tyZRtjYPr4OC004Q4Rw7pgOKUOKkJfZ3O24nz3WYfGRpMDNmcOi3TwQOmgm7B7Tpii0w==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"dependencies": {
+				"@eslint/core": "^0.15.2",
+				"levn": "^0.4.1"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			}
+		},
+		"node_modules/@eslint/plugin-kit/node_modules/@eslint/core": {
+			"version": "0.15.2",
+			"resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.2.tgz",
+			"integrity": "sha512-78Md3/Rrxh83gCxoUc0EiciuOHsIITzLy53m3d9UyiW8y9Dj2D29FeETqyKA+BRK76tnTp6RXWb3pCay8Oyomg==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"dependencies": {
+				"@types/json-schema": "^7.0.15"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			}
+		},
+		"node_modules/@humanfs/core": {
+			"version": "0.19.1",
+			"resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
+			"integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": ">=18.18.0"
+			}
+		},
+		"node_modules/@humanfs/node": {
+			"version": "0.16.7",
+			"resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.7.tgz",
+			"integrity": "sha512-/zUx+yOsIrG4Y43Eh2peDeKCxlRt/gET6aHfaKpuq267qXdYDFViVHfMaLyygZOnl0kGWxFIgsBy8QFuTLUXEQ==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"dependencies": {
+				"@humanfs/core": "^0.19.1",
+				"@humanwhocodes/retry": "^0.4.0"
+			},
+			"engines": {
+				"node": ">=18.18.0"
+			}
+		},
+		"node_modules/@humanwhocodes/module-importer": {
+			"version": "1.0.1",
+			"resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
+			"integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": ">=12.22"
+			},
+			"funding": {
+				"type": "github",
+				"url": "https://github.com/sponsors/nzakas"
+			}
+		},
+		"node_modules/@humanwhocodes/retry": {
+			"version": "0.4.3",
+			"resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
+			"integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": ">=18.18"
+			},
+			"funding": {
+				"type": "github",
+				"url": "https://github.com/sponsors/nzakas"
+			}
+		},
+		"node_modules/@isaacs/fs-minipass": {
+			"version": "4.0.1",
+			"resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
+			"integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
+			"dev": true,
+			"license": "ISC",
+			"dependencies": {
+				"minipass": "^7.0.4"
+			},
+			"engines": {
+				"node": ">=18.0.0"
+			}
+		},
+		"node_modules/@jridgewell/gen-mapping": {
+			"version": "0.3.13",
+			"resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
+			"integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@jridgewell/sourcemap-codec": "^1.5.0",
+				"@jridgewell/trace-mapping": "^0.3.24"
+			}
+		},
+		"node_modules/@jridgewell/remapping": {
+			"version": "2.3.5",
+			"resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
+			"integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@jridgewell/gen-mapping": "^0.3.5",
+				"@jridgewell/trace-mapping": "^0.3.24"
+			}
+		},
+		"node_modules/@jridgewell/resolve-uri": {
+			"version": "3.1.2",
+			"resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+			"integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=6.0.0"
+			}
+		},
+		"node_modules/@jridgewell/sourcemap-codec": {
+			"version": "1.5.5",
+			"resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
+			"integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/@jridgewell/trace-mapping": {
+			"version": "0.3.31",
+			"resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
+			"integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@jridgewell/resolve-uri": "^3.1.0",
+				"@jridgewell/sourcemap-codec": "^1.4.14"
+			}
+		},
+		"node_modules/@nodelib/fs.scandir": {
+			"version": "2.1.5",
+			"resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+			"integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@nodelib/fs.stat": "2.0.5",
+				"run-parallel": "^1.1.9"
+			},
+			"engines": {
+				"node": ">= 8"
+			}
+		},
+		"node_modules/@nodelib/fs.stat": {
+			"version": "2.0.5",
+			"resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+			"integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">= 8"
+			}
+		},
+		"node_modules/@nodelib/fs.walk": {
+			"version": "1.2.8",
+			"resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+			"integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@nodelib/fs.scandir": "2.1.5",
+				"fastq": "^1.6.0"
+			},
+			"engines": {
+				"node": ">= 8"
+			}
+		},
+		"node_modules/@polka/url": {
+			"version": "1.0.0-next.29",
+			"resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.29.tgz",
+			"integrity": "sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/@rollup/rollup-android-arm-eabi": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.52.3.tgz",
+			"integrity": "sha512-h6cqHGZ6VdnwliFG1NXvMPTy/9PS3h8oLh7ImwR+kl+oYnQizgjxsONmmPSb2C66RksfkfIxEVtDSEcJiO0tqw==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			]
+		},
+		"node_modules/@rollup/rollup-android-arm64": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.52.3.tgz",
+			"integrity": "sha512-wd+u7SLT/u6knklV/ifG7gr5Qy4GUbH2hMWcDauPFJzmCZUAJ8L2bTkVXC2niOIxp8lk3iH/QX8kSrUxVZrOVw==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			]
+		},
+		"node_modules/@rollup/rollup-darwin-arm64": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.52.3.tgz",
+			"integrity": "sha512-lj9ViATR1SsqycwFkJCtYfQTheBdvlWJqzqxwc9f2qrcVrQaF/gCuBRTiTolkRWS6KvNxSk4KHZWG7tDktLgjg==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			]
+		},
+		"node_modules/@rollup/rollup-darwin-x64": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.52.3.tgz",
+			"integrity": "sha512-+Dyo7O1KUmIsbzx1l+4V4tvEVnVQqMOIYtrxK7ncLSknl1xnMHLgn7gddJVrYPNZfEB8CIi3hK8gq8bDhb3h5A==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			]
+		},
+		"node_modules/@rollup/rollup-freebsd-arm64": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.52.3.tgz",
+			"integrity": "sha512-u9Xg2FavYbD30g3DSfNhxgNrxhi6xVG4Y6i9Ur1C7xUuGDW3banRbXj+qgnIrwRN4KeJ396jchwy9bCIzbyBEQ==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"freebsd"
+			]
+		},
+		"node_modules/@rollup/rollup-freebsd-x64": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.52.3.tgz",
+			"integrity": "sha512-5M8kyi/OX96wtD5qJR89a/3x5x8x5inXBZO04JWhkQb2JWavOWfjgkdvUqibGJeNNaz1/Z1PPza5/tAPXICI6A==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"freebsd"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-arm-gnueabihf": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.52.3.tgz",
+			"integrity": "sha512-IoerZJ4l1wRMopEHRKOO16e04iXRDyZFZnNZKrWeNquh5d6bucjezgd+OxG03mOMTnS1x7hilzb3uURPkJ0OfA==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-arm-musleabihf": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.52.3.tgz",
+			"integrity": "sha512-ZYdtqgHTDfvrJHSh3W22TvjWxwOgc3ThK/XjgcNGP2DIwFIPeAPNsQxrJO5XqleSlgDux2VAoWQ5iJrtaC1TbA==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-arm64-gnu": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.52.3.tgz",
+			"integrity": "sha512-NcViG7A0YtuFDA6xWSgmFb6iPFzHlf5vcqb2p0lGEbT+gjrEEz8nC/EeDHvx6mnGXnGCC1SeVV+8u+smj0CeGQ==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-arm64-musl": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.52.3.tgz",
+			"integrity": "sha512-d3pY7LWno6SYNXRm6Ebsq0DJGoiLXTb83AIPCXl9fmtIQs/rXoS8SJxxUNtFbJ5MiOvs+7y34np77+9l4nfFMw==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-loong64-gnu": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loong64-gnu/-/rollup-linux-loong64-gnu-4.52.3.tgz",
+			"integrity": "sha512-3y5GA0JkBuirLqmjwAKwB0keDlI6JfGYduMlJD/Rl7fvb4Ni8iKdQs1eiunMZJhwDWdCvrcqXRY++VEBbvk6Eg==",
+			"cpu": [
+				"loong64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-ppc64-gnu": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.52.3.tgz",
+			"integrity": "sha512-AUUH65a0p3Q0Yfm5oD2KVgzTKgwPyp9DSXc3UA7DtxhEb/WSPfbG4wqXeSN62OG5gSo18em4xv6dbfcUGXcagw==",
+			"cpu": [
+				"ppc64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-riscv64-gnu": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.52.3.tgz",
+			"integrity": "sha512-1makPhFFVBqZE+XFg3Dkq+IkQ7JvmUrwwqaYBL2CE+ZpxPaqkGaiWFEWVGyvTwZace6WLJHwjVh/+CXbKDGPmg==",
+			"cpu": [
+				"riscv64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-riscv64-musl": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.52.3.tgz",
+			"integrity": "sha512-OOFJa28dxfl8kLOPMUOQBCO6z3X2SAfzIE276fwT52uXDWUS178KWq0pL7d6p1kz7pkzA0yQwtqL0dEPoVcRWg==",
+			"cpu": [
+				"riscv64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-s390x-gnu": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.52.3.tgz",
+			"integrity": "sha512-jMdsML2VI5l+V7cKfZx3ak+SLlJ8fKvLJ0Eoa4b9/vCUrzXKgoKxvHqvJ/mkWhFiyp88nCkM5S2v6nIwRtPcgg==",
+			"cpu": [
+				"s390x"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-x64-gnu": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.52.3.tgz",
+			"integrity": "sha512-tPgGd6bY2M2LJTA1uGq8fkSPK8ZLYjDjY+ZLK9WHncCnfIz29LIXIqUgzCR0hIefzy6Hpbe8Th5WOSwTM8E7LA==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-linux-x64-musl": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.52.3.tgz",
+			"integrity": "sha512-BCFkJjgk+WFzP+tcSMXq77ymAPIxsX9lFJWs+2JzuZTLtksJ2o5hvgTdIcZ5+oKzUDMwI0PfWzRBYAydAHF2Mw==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			]
+		},
+		"node_modules/@rollup/rollup-openharmony-arm64": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.52.3.tgz",
+			"integrity": "sha512-KTD/EqjZF3yvRaWUJdD1cW+IQBk4fbQaHYJUmP8N4XoKFZilVL8cobFSTDnjTtxWJQ3JYaMgF4nObY/+nYkumA==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"openharmony"
+			]
+		},
+		"node_modules/@rollup/rollup-win32-arm64-msvc": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.52.3.tgz",
+			"integrity": "sha512-+zteHZdoUYLkyYKObGHieibUFLbttX2r+58l27XZauq0tcWYYuKUwY2wjeCN9oK1Um2YgH2ibd6cnX/wFD7DuA==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			]
+		},
+		"node_modules/@rollup/rollup-win32-ia32-msvc": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.52.3.tgz",
+			"integrity": "sha512-of1iHkTQSo3kr6dTIRX6t81uj/c/b15HXVsPcEElN5sS859qHrOepM5p9G41Hah+CTqSh2r8Bm56dL2z9UQQ7g==",
+			"cpu": [
+				"ia32"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			]
+		},
+		"node_modules/@rollup/rollup-win32-x64-gnu": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-gnu/-/rollup-win32-x64-gnu-4.52.3.tgz",
+			"integrity": "sha512-s0hybmlHb56mWVZQj8ra9048/WZTPLILKxcvcq+8awSZmyiSUZjjem1AhU3Tf4ZKpYhK4mg36HtHDOe8QJS5PQ==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			]
+		},
+		"node_modules/@rollup/rollup-win32-x64-msvc": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.52.3.tgz",
+			"integrity": "sha512-zGIbEVVXVtauFgl3MRwGWEN36P5ZGenHRMgNw88X5wEhEBpq0XrMEZwOn07+ICrwM17XO5xfMZqh0OldCH5VTA==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			]
+		},
+		"node_modules/@standard-schema/spec": {
+			"version": "1.0.0",
+			"resolved": "https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0.tgz",
+			"integrity": "sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/@sveltejs/acorn-typescript": {
+			"version": "1.0.6",
+			"resolved": "https://registry.npmjs.org/@sveltejs/acorn-typescript/-/acorn-typescript-1.0.6.tgz",
+			"integrity": "sha512-4awhxtMh4cx9blePWl10HRHj8Iivtqj+2QdDCSMDzxG+XKa9+VCNupQuCuvzEhYPzZSrX+0gC+0lHA/0fFKKQQ==",
+			"dev": true,
+			"license": "MIT",
+			"peerDependencies": {
+				"acorn": "^8.9.0"
+			}
+		},
+		"node_modules/@sveltejs/adapter-auto": {
+			"version": "6.1.0",
+			"resolved": "https://registry.npmjs.org/@sveltejs/adapter-auto/-/adapter-auto-6.1.0.tgz",
+			"integrity": "sha512-shOuLI5D2s+0zTv2ab5M5PqfknXqWbKi+0UwB9yLTRIdzsK1R93JOO8jNhIYSHdW+IYXIYnLniu+JZqXs7h9Wg==",
+			"dev": true,
+			"license": "MIT",
+			"peerDependencies": {
+				"@sveltejs/kit": "^2.0.0"
+			}
+		},
+		"node_modules/@sveltejs/kit": {
+			"version": "2.43.6",
+			"resolved": "https://registry.npmjs.org/@sveltejs/kit/-/kit-2.43.6.tgz",
+			"integrity": "sha512-Ch9YlU2UvQmkF3Gr7ufJxfMhYbtnau4ZemRdpRNX602chlFfEWGO1DplQxkF0TWsL+8sWhGwXOU+k6/gd83JgQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@standard-schema/spec": "^1.0.0",
+				"@sveltejs/acorn-typescript": "^1.0.5",
+				"@types/cookie": "^0.6.0",
+				"acorn": "^8.14.1",
+				"cookie": "^0.6.0",
+				"devalue": "^5.3.2",
+				"esm-env": "^1.2.2",
+				"kleur": "^4.1.5",
+				"magic-string": "^0.30.5",
+				"mrmime": "^2.0.0",
+				"sade": "^1.8.1",
+				"set-cookie-parser": "^2.6.0",
+				"sirv": "^3.0.0"
+			},
+			"bin": {
+				"svelte-kit": "svelte-kit.js"
+			},
+			"engines": {
+				"node": ">=18.13"
+			},
+			"peerDependencies": {
+				"@opentelemetry/api": "^1.0.0",
+				"@sveltejs/vite-plugin-svelte": "^3.0.0 || ^4.0.0-next.1 || ^5.0.0 || ^6.0.0-next.0",
+				"svelte": "^4.0.0 || ^5.0.0-next.0",
+				"vite": "^5.0.3 || ^6.0.0 || ^7.0.0-beta.0"
+			},
+			"peerDependenciesMeta": {
+				"@opentelemetry/api": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/@sveltejs/vite-plugin-svelte": {
+			"version": "6.2.1",
+			"resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte/-/vite-plugin-svelte-6.2.1.tgz",
+			"integrity": "sha512-YZs/OSKOQAQCnJvM/P+F1URotNnYNeU3P2s4oIpzm1uFaqUEqRxUB0g5ejMjEb5Gjb9/PiBI5Ktrq4rUUF8UVQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@sveltejs/vite-plugin-svelte-inspector": "^5.0.0",
+				"debug": "^4.4.1",
+				"deepmerge": "^4.3.1",
+				"magic-string": "^0.30.17",
+				"vitefu": "^1.1.1"
+			},
+			"engines": {
+				"node": "^20.19 || ^22.12 || >=24"
+			},
+			"peerDependencies": {
+				"svelte": "^5.0.0",
+				"vite": "^6.3.0 || ^7.0.0"
+			}
+		},
+		"node_modules/@sveltejs/vite-plugin-svelte-inspector": {
+			"version": "5.0.1",
+			"resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte-inspector/-/vite-plugin-svelte-inspector-5.0.1.tgz",
+			"integrity": "sha512-ubWshlMk4bc8mkwWbg6vNvCeT7lGQojE3ijDh3QTR6Zr/R+GXxsGbyH4PExEPpiFmqPhYiVSVmHBjUcVc1JIrA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"debug": "^4.4.1"
+			},
+			"engines": {
+				"node": "^20.19 || ^22.12 || >=24"
+			},
+			"peerDependencies": {
+				"@sveltejs/vite-plugin-svelte": "^6.0.0-next.0",
+				"svelte": "^5.0.0",
+				"vite": "^6.3.0 || ^7.0.0"
+			}
+		},
+		"node_modules/@tailwindcss/node": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/node/-/node-4.1.13.tgz",
+			"integrity": "sha512-eq3ouolC1oEFOAvOMOBAmfCIqZBJuvWvvYWh5h5iOYfe1HFC6+GZ6EIL0JdM3/niGRJmnrOc+8gl9/HGUaaptw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@jridgewell/remapping": "^2.3.4",
+				"enhanced-resolve": "^5.18.3",
+				"jiti": "^2.5.1",
+				"lightningcss": "1.30.1",
+				"magic-string": "^0.30.18",
+				"source-map-js": "^1.2.1",
+				"tailwindcss": "4.1.13"
+			}
+		},
+		"node_modules/@tailwindcss/oxide": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide/-/oxide-4.1.13.tgz",
+			"integrity": "sha512-CPgsM1IpGRa880sMbYmG1s4xhAy3xEt1QULgTJGQmZUeNgXFR7s1YxYygmJyBGtou4SyEosGAGEeYqY7R53bIA==",
+			"dev": true,
+			"hasInstallScript": true,
+			"license": "MIT",
+			"dependencies": {
+				"detect-libc": "^2.0.4",
+				"tar": "^7.4.3"
+			},
+			"engines": {
+				"node": ">= 10"
+			},
+			"optionalDependencies": {
+				"@tailwindcss/oxide-android-arm64": "4.1.13",
+				"@tailwindcss/oxide-darwin-arm64": "4.1.13",
+				"@tailwindcss/oxide-darwin-x64": "4.1.13",
+				"@tailwindcss/oxide-freebsd-x64": "4.1.13",
+				"@tailwindcss/oxide-linux-arm-gnueabihf": "4.1.13",
+				"@tailwindcss/oxide-linux-arm64-gnu": "4.1.13",
+				"@tailwindcss/oxide-linux-arm64-musl": "4.1.13",
+				"@tailwindcss/oxide-linux-x64-gnu": "4.1.13",
+				"@tailwindcss/oxide-linux-x64-musl": "4.1.13",
+				"@tailwindcss/oxide-wasm32-wasi": "4.1.13",
+				"@tailwindcss/oxide-win32-arm64-msvc": "4.1.13",
+				"@tailwindcss/oxide-win32-x64-msvc": "4.1.13"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-android-arm64": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-android-arm64/-/oxide-android-arm64-4.1.13.tgz",
+			"integrity": "sha512-BrpTrVYyejbgGo57yc8ieE+D6VT9GOgnNdmh5Sac6+t0m+v+sKQevpFVpwX3pBrM2qKrQwJ0c5eDbtjouY/+ew==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-darwin-arm64": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-arm64/-/oxide-darwin-arm64-4.1.13.tgz",
+			"integrity": "sha512-YP+Jksc4U0KHcu76UhRDHq9bx4qtBftp9ShK/7UGfq0wpaP96YVnnjFnj3ZFrUAjc5iECzODl/Ts0AN7ZPOANQ==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-darwin-x64": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-x64/-/oxide-darwin-x64-4.1.13.tgz",
+			"integrity": "sha512-aAJ3bbwrn/PQHDxCto9sxwQfT30PzyYJFG0u/BWZGeVXi5Hx6uuUOQEI2Fa43qvmUjTRQNZnGqe9t0Zntexeuw==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-freebsd-x64": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-freebsd-x64/-/oxide-freebsd-x64-4.1.13.tgz",
+			"integrity": "sha512-Wt8KvASHwSXhKE/dJLCCWcTSVmBj3xhVhp/aF3RpAhGeZ3sVo7+NTfgiN8Vey/Fi8prRClDs6/f0KXPDTZE6nQ==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"freebsd"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-linux-arm-gnueabihf": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm-gnueabihf/-/oxide-linux-arm-gnueabihf-4.1.13.tgz",
+			"integrity": "sha512-mbVbcAsW3Gkm2MGwA93eLtWrwajz91aXZCNSkGTx/R5eb6KpKD5q8Ueckkh9YNboU8RH7jiv+ol/I7ZyQ9H7Bw==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-linux-arm64-gnu": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-gnu/-/oxide-linux-arm64-gnu-4.1.13.tgz",
+			"integrity": "sha512-wdtfkmpXiwej/yoAkrCP2DNzRXCALq9NVLgLELgLim1QpSfhQM5+ZxQQF8fkOiEpuNoKLp4nKZ6RC4kmeFH0HQ==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-linux-arm64-musl": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-musl/-/oxide-linux-arm64-musl-4.1.13.tgz",
+			"integrity": "sha512-hZQrmtLdhyqzXHB7mkXfq0IYbxegaqTmfa1p9MBj72WPoDD3oNOh1Lnxf6xZLY9C3OV6qiCYkO1i/LrzEdW2mg==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-linux-x64-gnu": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-gnu/-/oxide-linux-x64-gnu-4.1.13.tgz",
+			"integrity": "sha512-uaZTYWxSXyMWDJZNY1Ul7XkJTCBRFZ5Fo6wtjrgBKzZLoJNrG+WderJwAjPzuNZOnmdrVg260DKwXCFtJ/hWRQ==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-linux-x64-musl": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-musl/-/oxide-linux-x64-musl-4.1.13.tgz",
+			"integrity": "sha512-oXiPj5mi4Hdn50v5RdnuuIms0PVPI/EG4fxAfFiIKQh5TgQgX7oSuDWntHW7WNIi/yVLAiS+CRGW4RkoGSSgVQ==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-wasm32-wasi": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-wasm32-wasi/-/oxide-wasm32-wasi-4.1.13.tgz",
+			"integrity": "sha512-+LC2nNtPovtrDwBc/nqnIKYh/W2+R69FA0hgoeOn64BdCX522u19ryLh3Vf3F8W49XBcMIxSe665kwy21FkhvA==",
+			"bundleDependencies": [
+				"@napi-rs/wasm-runtime",
+				"@emnapi/core",
+				"@emnapi/runtime",
+				"@tybys/wasm-util",
+				"@emnapi/wasi-threads",
+				"tslib"
+			],
+			"cpu": [
+				"wasm32"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"dependencies": {
+				"@emnapi/core": "^1.4.5",
+				"@emnapi/runtime": "^1.4.5",
+				"@emnapi/wasi-threads": "^1.0.4",
+				"@napi-rs/wasm-runtime": "^0.2.12",
+				"@tybys/wasm-util": "^0.10.0",
+				"tslib": "^2.8.0"
+			},
+			"engines": {
+				"node": ">=14.0.0"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-win32-arm64-msvc": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-arm64-msvc/-/oxide-win32-arm64-msvc-4.1.13.tgz",
+			"integrity": "sha512-dziTNeQXtoQ2KBXmrjCxsuPk3F3CQ/yb7ZNZNA+UkNTeiTGgfeh+gH5Pi7mRncVgcPD2xgHvkFCh/MhZWSgyQg==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/oxide-win32-x64-msvc": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-x64-msvc/-/oxide-win32-x64-msvc-4.1.13.tgz",
+			"integrity": "sha512-3+LKesjXydTkHk5zXX01b5KMzLV1xl2mcktBJkje7rhFUpUlYJy7IMOLqjIRQncLTa1WZZiFY/foAeB5nmaiTw==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">= 10"
+			}
+		},
+		"node_modules/@tailwindcss/vite": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/@tailwindcss/vite/-/vite-4.1.13.tgz",
+			"integrity": "sha512-0PmqLQ010N58SbMTJ7BVJ4I2xopiQn/5i6nlb4JmxzQf8zcS5+m2Cv6tqh+sfDwtIdjoEnOvwsGQ1hkUi8QEHQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@tailwindcss/node": "4.1.13",
+				"@tailwindcss/oxide": "4.1.13",
+				"tailwindcss": "4.1.13"
+			},
+			"peerDependencies": {
+				"vite": "^5.2.0 || ^6 || ^7"
+			}
+		},
+		"node_modules/@types/cookie": {
+			"version": "0.6.0",
+			"resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.6.0.tgz",
+			"integrity": "sha512-4Kh9a6B2bQciAhf7FSuMRRkUWecJgJu9nPnx3yzpsfXX/c50REIqpHY4C82bXP90qrLtXtkDxTZosYO3UpOwlA==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/@types/estree": {
+			"version": "1.0.8",
+			"resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
+			"integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/@types/json-schema": {
+			"version": "7.0.15",
+			"resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
+			"integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/@types/node": {
+			"version": "22.18.8",
+			"resolved": "https://registry.npmjs.org/@types/node/-/node-22.18.8.tgz",
+			"integrity": "sha512-pAZSHMiagDR7cARo/cch1f3rXy0AEXwsVsVH09FcyeJVAzCnGgmYis7P3JidtTUjyadhTeSo8TgRPswstghDaw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"undici-types": "~6.21.0"
+			}
+		},
+		"node_modules/@typescript-eslint/eslint-plugin": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.45.0.tgz",
+			"integrity": "sha512-HC3y9CVuevvWCl/oyZuI47dOeDF9ztdMEfMH8/DW/Mhwa9cCLnK1oD7JoTVGW/u7kFzNZUKUoyJEqkaJh5y3Wg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@eslint-community/regexpp": "^4.10.0",
+				"@typescript-eslint/scope-manager": "8.45.0",
+				"@typescript-eslint/type-utils": "8.45.0",
+				"@typescript-eslint/utils": "8.45.0",
+				"@typescript-eslint/visitor-keys": "8.45.0",
+				"graphemer": "^1.4.0",
+				"ignore": "^7.0.0",
+				"natural-compare": "^1.4.0",
+				"ts-api-utils": "^2.1.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			},
+			"peerDependencies": {
+				"@typescript-eslint/parser": "^8.45.0",
+				"eslint": "^8.57.0 || ^9.0.0",
+				"typescript": ">=4.8.4 <6.0.0"
+			}
+		},
+		"node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
+			"version": "7.0.5",
+			"resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
+			"integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">= 4"
+			}
+		},
+		"node_modules/@typescript-eslint/parser": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.45.0.tgz",
+			"integrity": "sha512-TGf22kon8KW+DeKaUmOibKWktRY8b2NSAZNdtWh798COm1NWx8+xJ6iFBtk3IvLdv6+LGLJLRlyhrhEDZWargQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@typescript-eslint/scope-manager": "8.45.0",
+				"@typescript-eslint/types": "8.45.0",
+				"@typescript-eslint/typescript-estree": "8.45.0",
+				"@typescript-eslint/visitor-keys": "8.45.0",
+				"debug": "^4.3.4"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			},
+			"peerDependencies": {
+				"eslint": "^8.57.0 || ^9.0.0",
+				"typescript": ">=4.8.4 <6.0.0"
+			}
+		},
+		"node_modules/@typescript-eslint/project-service": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.45.0.tgz",
+			"integrity": "sha512-3pcVHwMG/iA8afdGLMuTibGR7pDsn9RjDev6CCB+naRsSYs2pns5QbinF4Xqw6YC/Sj3lMrm/Im0eMfaa61WUg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@typescript-eslint/tsconfig-utils": "^8.45.0",
+				"@typescript-eslint/types": "^8.45.0",
+				"debug": "^4.3.4"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			},
+			"peerDependencies": {
+				"typescript": ">=4.8.4 <6.0.0"
+			}
+		},
+		"node_modules/@typescript-eslint/scope-manager": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.45.0.tgz",
+			"integrity": "sha512-clmm8XSNj/1dGvJeO6VGH7EUSeA0FMs+5au/u3lrA3KfG8iJ4u8ym9/j2tTEoacAffdW1TVUzXO30W1JTJS7dA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@typescript-eslint/types": "8.45.0",
+				"@typescript-eslint/visitor-keys": "8.45.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			}
+		},
+		"node_modules/@typescript-eslint/tsconfig-utils": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.45.0.tgz",
+			"integrity": "sha512-aFdr+c37sc+jqNMGhH+ajxPXwjv9UtFZk79k8pLoJ6p4y0snmYpPA52GuWHgt2ZF4gRRW6odsEj41uZLojDt5w==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			},
+			"peerDependencies": {
+				"typescript": ">=4.8.4 <6.0.0"
+			}
+		},
+		"node_modules/@typescript-eslint/type-utils": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.45.0.tgz",
+			"integrity": "sha512-bpjepLlHceKgyMEPglAeULX1vixJDgaKocp0RVJ5u4wLJIMNuKtUXIczpJCPcn2waII0yuvks/5m5/h3ZQKs0A==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@typescript-eslint/types": "8.45.0",
+				"@typescript-eslint/typescript-estree": "8.45.0",
+				"@typescript-eslint/utils": "8.45.0",
+				"debug": "^4.3.4",
+				"ts-api-utils": "^2.1.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			},
+			"peerDependencies": {
+				"eslint": "^8.57.0 || ^9.0.0",
+				"typescript": ">=4.8.4 <6.0.0"
+			}
+		},
+		"node_modules/@typescript-eslint/types": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.45.0.tgz",
+			"integrity": "sha512-WugXLuOIq67BMgQInIxxnsSyRLFxdkJEJu8r4ngLR56q/4Q5LrbfkFRH27vMTjxEK8Pyz7QfzuZe/G15qQnVRA==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			}
+		},
+		"node_modules/@typescript-eslint/typescript-estree": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.45.0.tgz",
+			"integrity": "sha512-GfE1NfVbLam6XQ0LcERKwdTTPlLvHvXXhOeUGC1OXi4eQBoyy1iVsW+uzJ/J9jtCz6/7GCQ9MtrQ0fml/jWCnA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@typescript-eslint/project-service": "8.45.0",
+				"@typescript-eslint/tsconfig-utils": "8.45.0",
+				"@typescript-eslint/types": "8.45.0",
+				"@typescript-eslint/visitor-keys": "8.45.0",
+				"debug": "^4.3.4",
+				"fast-glob": "^3.3.2",
+				"is-glob": "^4.0.3",
+				"minimatch": "^9.0.4",
+				"semver": "^7.6.0",
+				"ts-api-utils": "^2.1.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			},
+			"peerDependencies": {
+				"typescript": ">=4.8.4 <6.0.0"
+			}
+		},
+		"node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
+			"version": "2.0.2",
+			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+			"integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"balanced-match": "^1.0.0"
+			}
+		},
+		"node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
+			"version": "9.0.5",
+			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+			"integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+			"dev": true,
+			"license": "ISC",
+			"dependencies": {
+				"brace-expansion": "^2.0.1"
+			},
+			"engines": {
+				"node": ">=16 || 14 >=14.17"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/isaacs"
+			}
+		},
+		"node_modules/@typescript-eslint/utils": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.45.0.tgz",
+			"integrity": "sha512-bxi1ht+tLYg4+XV2knz/F7RVhU0k6VrSMc9sb8DQ6fyCTrGQLHfo7lDtN0QJjZjKkLA2ThrKuCdHEvLReqtIGg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@eslint-community/eslint-utils": "^4.7.0",
+				"@typescript-eslint/scope-manager": "8.45.0",
+				"@typescript-eslint/types": "8.45.0",
+				"@typescript-eslint/typescript-estree": "8.45.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			},
+			"peerDependencies": {
+				"eslint": "^8.57.0 || ^9.0.0",
+				"typescript": ">=4.8.4 <6.0.0"
+			}
+		},
+		"node_modules/@typescript-eslint/visitor-keys": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.45.0.tgz",
+			"integrity": "sha512-qsaFBA3e09MIDAGFUrTk+dzqtfv1XPVz8t8d1f0ybTzrCY7BKiMC5cjrl1O/P7UmHsNyW90EYSkU/ZWpmXelag==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@typescript-eslint/types": "8.45.0",
+				"eslint-visitor-keys": "^4.2.1"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			}
+		},
+		"node_modules/acorn": {
+			"version": "8.15.0",
+			"resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
+			"integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
+			"dev": true,
+			"license": "MIT",
+			"bin": {
+				"acorn": "bin/acorn"
+			},
+			"engines": {
+				"node": ">=0.4.0"
+			}
+		},
+		"node_modules/acorn-jsx": {
+			"version": "5.3.2",
+			"resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
+			"integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
+			"dev": true,
+			"license": "MIT",
+			"peerDependencies": {
+				"acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
+			}
+		},
+		"node_modules/ajv": {
+			"version": "6.12.6",
+			"resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+			"integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"fast-deep-equal": "^3.1.1",
+				"fast-json-stable-stringify": "^2.0.0",
+				"json-schema-traverse": "^0.4.1",
+				"uri-js": "^4.2.2"
+			},
+			"funding": {
+				"type": "github",
+				"url": "https://github.com/sponsors/epoberezkin"
+			}
+		},
+		"node_modules/ansi-styles": {
+			"version": "4.3.0",
+			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+			"integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"color-convert": "^2.0.1"
+			},
+			"engines": {
+				"node": ">=8"
+			},
+			"funding": {
+				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
+			}
+		},
+		"node_modules/argparse": {
+			"version": "2.0.1",
+			"resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+			"integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
+			"dev": true,
+			"license": "Python-2.0"
+		},
+		"node_modules/aria-query": {
+			"version": "5.3.2",
+			"resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
+			"integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": ">= 0.4"
+			}
+		},
+		"node_modules/axobject-query": {
+			"version": "4.1.0",
+			"resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
+			"integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": ">= 0.4"
+			}
+		},
+		"node_modules/balanced-match": {
+			"version": "1.0.2",
+			"resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+			"integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/brace-expansion": {
+			"version": "1.1.12",
+			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+			"integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"balanced-match": "^1.0.0",
+				"concat-map": "0.0.1"
+			}
+		},
+		"node_modules/braces": {
+			"version": "3.0.3",
+			"resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+			"integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"fill-range": "^7.1.1"
+			},
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/callsites": {
+			"version": "3.1.0",
+			"resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+			"integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=6"
+			}
+		},
+		"node_modules/chalk": {
+			"version": "4.1.2",
+			"resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+			"integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"ansi-styles": "^4.1.0",
+				"supports-color": "^7.1.0"
+			},
+			"engines": {
+				"node": ">=10"
+			},
+			"funding": {
+				"url": "https://github.com/chalk/chalk?sponsor=1"
+			}
+		},
+		"node_modules/chokidar": {
+			"version": "4.0.3",
+			"resolved": "https://registry.npmjs.org/chokidar/-/chokidar-4.0.3.tgz",
+			"integrity": "sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"readdirp": "^4.0.1"
+			},
+			"engines": {
+				"node": ">= 14.16.0"
+			},
+			"funding": {
+				"url": "https://paulmillr.com/funding/"
+			}
+		},
+		"node_modules/chownr": {
+			"version": "3.0.0",
+			"resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
+			"integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
+			"dev": true,
+			"license": "BlueOak-1.0.0",
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/clsx": {
+			"version": "2.1.1",
+			"resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
+			"integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=6"
+			}
+		},
+		"node_modules/color-convert": {
+			"version": "2.0.1",
+			"resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+			"integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"color-name": "~1.1.4"
+			},
+			"engines": {
+				"node": ">=7.0.0"
+			}
+		},
+		"node_modules/color-name": {
+			"version": "1.1.4",
+			"resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+			"integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/concat-map": {
+			"version": "0.0.1",
+			"resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+			"integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/cookie": {
+			"version": "0.6.0",
+			"resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
+			"integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">= 0.6"
+			}
+		},
+		"node_modules/cross-spawn": {
+			"version": "7.0.6",
+			"resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
+			"integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"path-key": "^3.1.0",
+				"shebang-command": "^2.0.0",
+				"which": "^2.0.1"
+			},
+			"engines": {
+				"node": ">= 8"
+			}
+		},
+		"node_modules/cssesc": {
+			"version": "3.0.0",
+			"resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
+			"integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
+			"dev": true,
+			"license": "MIT",
+			"bin": {
+				"cssesc": "bin/cssesc"
+			},
+			"engines": {
+				"node": ">=4"
+			}
+		},
+		"node_modules/debug": {
+			"version": "4.4.3",
+			"resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
+			"integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"ms": "^2.1.3"
+			},
+			"engines": {
+				"node": ">=6.0"
+			},
+			"peerDependenciesMeta": {
+				"supports-color": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/deep-is": {
+			"version": "0.1.4",
+			"resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
+			"integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/deepmerge": {
+			"version": "4.3.1",
+			"resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
+			"integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=0.10.0"
+			}
+		},
+		"node_modules/detect-libc": {
+			"version": "2.1.1",
+			"resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.1.1.tgz",
+			"integrity": "sha512-ecqj/sy1jcK1uWrwpR67UhYrIFQ+5WlGxth34WquCbamhFA6hkkwiu37o6J5xCHdo1oixJRfVRw+ywV+Hq/0Aw==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/devalue": {
+			"version": "5.3.2",
+			"resolved": "https://registry.npmjs.org/devalue/-/devalue-5.3.2.tgz",
+			"integrity": "sha512-UDsjUbpQn9kvm68slnrs+mfxwFkIflOhkanmyabZ8zOYk8SMEIbJ3TK+88g70hSIeytu4y18f0z/hYHMTrXIWw==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/enhanced-resolve": {
+			"version": "5.18.3",
+			"resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.3.tgz",
+			"integrity": "sha512-d4lC8xfavMeBjzGr2vECC3fsGXziXZQyJxD868h2M/mBI3PwAuODxAkLkq5HYuvrPYcUtiLzsTo8U3PgX3Ocww==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"graceful-fs": "^4.2.4",
+				"tapable": "^2.2.0"
+			},
+			"engines": {
+				"node": ">=10.13.0"
+			}
+		},
+		"node_modules/esbuild": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.10.tgz",
+			"integrity": "sha512-9RiGKvCwaqxO2owP61uQ4BgNborAQskMR6QusfWzQqv7AZOg5oGehdY2pRJMTKuwxd1IDBP4rSbI5lHzU7SMsQ==",
+			"dev": true,
+			"hasInstallScript": true,
+			"license": "MIT",
+			"bin": {
+				"esbuild": "bin/esbuild"
+			},
+			"engines": {
+				"node": ">=18"
+			},
+			"optionalDependencies": {
+				"@esbuild/aix-ppc64": "0.25.10",
+				"@esbuild/android-arm": "0.25.10",
+				"@esbuild/android-arm64": "0.25.10",
+				"@esbuild/android-x64": "0.25.10",
+				"@esbuild/darwin-arm64": "0.25.10",
+				"@esbuild/darwin-x64": "0.25.10",
+				"@esbuild/freebsd-arm64": "0.25.10",
+				"@esbuild/freebsd-x64": "0.25.10",
+				"@esbuild/linux-arm": "0.25.10",
+				"@esbuild/linux-arm64": "0.25.10",
+				"@esbuild/linux-ia32": "0.25.10",
+				"@esbuild/linux-loong64": "0.25.10",
+				"@esbuild/linux-mips64el": "0.25.10",
+				"@esbuild/linux-ppc64": "0.25.10",
+				"@esbuild/linux-riscv64": "0.25.10",
+				"@esbuild/linux-s390x": "0.25.10",
+				"@esbuild/linux-x64": "0.25.10",
+				"@esbuild/netbsd-arm64": "0.25.10",
+				"@esbuild/netbsd-x64": "0.25.10",
+				"@esbuild/openbsd-arm64": "0.25.10",
+				"@esbuild/openbsd-x64": "0.25.10",
+				"@esbuild/openharmony-arm64": "0.25.10",
+				"@esbuild/sunos-x64": "0.25.10",
+				"@esbuild/win32-arm64": "0.25.10",
+				"@esbuild/win32-ia32": "0.25.10",
+				"@esbuild/win32-x64": "0.25.10"
+			}
+		},
+		"node_modules/escape-string-regexp": {
+			"version": "4.0.0",
+			"resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+			"integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=10"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/eslint": {
+			"version": "9.36.0",
+			"resolved": "https://registry.npmjs.org/eslint/-/eslint-9.36.0.tgz",
+			"integrity": "sha512-hB4FIzXovouYzwzECDcUkJ4OcfOEkXTv2zRY6B9bkwjx/cprAq0uvm1nl7zvQ0/TsUk0zQiN4uPfJpB9m+rPMQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@eslint-community/eslint-utils": "^4.8.0",
+				"@eslint-community/regexpp": "^4.12.1",
+				"@eslint/config-array": "^0.21.0",
+				"@eslint/config-helpers": "^0.3.1",
+				"@eslint/core": "^0.15.2",
+				"@eslint/eslintrc": "^3.3.1",
+				"@eslint/js": "9.36.0",
+				"@eslint/plugin-kit": "^0.3.5",
+				"@humanfs/node": "^0.16.6",
+				"@humanwhocodes/module-importer": "^1.0.1",
+				"@humanwhocodes/retry": "^0.4.2",
+				"@types/estree": "^1.0.6",
+				"@types/json-schema": "^7.0.15",
+				"ajv": "^6.12.4",
+				"chalk": "^4.0.0",
+				"cross-spawn": "^7.0.6",
+				"debug": "^4.3.2",
+				"escape-string-regexp": "^4.0.0",
+				"eslint-scope": "^8.4.0",
+				"eslint-visitor-keys": "^4.2.1",
+				"espree": "^10.4.0",
+				"esquery": "^1.5.0",
+				"esutils": "^2.0.2",
+				"fast-deep-equal": "^3.1.3",
+				"file-entry-cache": "^8.0.0",
+				"find-up": "^5.0.0",
+				"glob-parent": "^6.0.2",
+				"ignore": "^5.2.0",
+				"imurmurhash": "^0.1.4",
+				"is-glob": "^4.0.0",
+				"json-stable-stringify-without-jsonify": "^1.0.1",
+				"lodash.merge": "^4.6.2",
+				"minimatch": "^3.1.2",
+				"natural-compare": "^1.4.0",
+				"optionator": "^0.9.3"
+			},
+			"bin": {
+				"eslint": "bin/eslint.js"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"url": "https://eslint.org/donate"
+			},
+			"peerDependencies": {
+				"jiti": "*"
+			},
+			"peerDependenciesMeta": {
+				"jiti": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/eslint-config-prettier": {
+			"version": "10.1.8",
+			"resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-10.1.8.tgz",
+			"integrity": "sha512-82GZUjRS0p/jganf6q1rEO25VSoHH0hKPCTrgillPjdI/3bgBhAE1QzHrHTizjpRvy6pGAvKjDJtk2pF9NDq8w==",
+			"dev": true,
+			"license": "MIT",
+			"bin": {
+				"eslint-config-prettier": "bin/cli.js"
+			},
+			"funding": {
+				"url": "https://opencollective.com/eslint-config-prettier"
+			},
+			"peerDependencies": {
+				"eslint": ">=7.0.0"
+			}
+		},
+		"node_modules/eslint-plugin-svelte": {
+			"version": "3.12.4",
+			"resolved": "https://registry.npmjs.org/eslint-plugin-svelte/-/eslint-plugin-svelte-3.12.4.tgz",
+			"integrity": "sha512-hD7wPe+vrPgx3U2X2b/wyTMtWobm660PygMGKrWWYTc9lvtY8DpNFDaU2CJQn1szLjGbn/aJ3g8WiXuKakrEkw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@eslint-community/eslint-utils": "^4.6.1",
+				"@jridgewell/sourcemap-codec": "^1.5.0",
+				"esutils": "^2.0.3",
+				"globals": "^16.0.0",
+				"known-css-properties": "^0.37.0",
+				"postcss": "^8.4.49",
+				"postcss-load-config": "^3.1.4",
+				"postcss-safe-parser": "^7.0.0",
+				"semver": "^7.6.3",
+				"svelte-eslint-parser": "^1.3.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/ota-meshi"
+			},
+			"peerDependencies": {
+				"eslint": "^8.57.1 || ^9.0.0",
+				"svelte": "^3.37.0 || ^4.0.0 || ^5.0.0"
+			},
+			"peerDependenciesMeta": {
+				"svelte": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/eslint-scope": {
+			"version": "8.4.0",
+			"resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
+			"integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
+			"dev": true,
+			"license": "BSD-2-Clause",
+			"dependencies": {
+				"esrecurse": "^4.3.0",
+				"estraverse": "^5.2.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"url": "https://opencollective.com/eslint"
+			}
+		},
+		"node_modules/eslint-visitor-keys": {
+			"version": "4.2.1",
+			"resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
+			"integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"url": "https://opencollective.com/eslint"
+			}
+		},
+		"node_modules/eslint/node_modules/@eslint/core": {
+			"version": "0.15.2",
+			"resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.2.tgz",
+			"integrity": "sha512-78Md3/Rrxh83gCxoUc0EiciuOHsIITzLy53m3d9UyiW8y9Dj2D29FeETqyKA+BRK76tnTp6RXWb3pCay8Oyomg==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"dependencies": {
+				"@types/json-schema": "^7.0.15"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			}
+		},
+		"node_modules/esm-env": {
+			"version": "1.2.2",
+			"resolved": "https://registry.npmjs.org/esm-env/-/esm-env-1.2.2.tgz",
+			"integrity": "sha512-Epxrv+Nr/CaL4ZcFGPJIYLWFom+YeV1DqMLHJoEd9SYRxNbaFruBwfEX/kkHUJf55j2+TUbmDcmuilbP1TmXHA==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/espree": {
+			"version": "10.4.0",
+			"resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
+			"integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
+			"dev": true,
+			"license": "BSD-2-Clause",
+			"dependencies": {
+				"acorn": "^8.15.0",
+				"acorn-jsx": "^5.3.2",
+				"eslint-visitor-keys": "^4.2.1"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"url": "https://opencollective.com/eslint"
+			}
+		},
+		"node_modules/esquery": {
+			"version": "1.6.0",
+			"resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
+			"integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
+			"dev": true,
+			"license": "BSD-3-Clause",
+			"dependencies": {
+				"estraverse": "^5.1.0"
+			},
+			"engines": {
+				"node": ">=0.10"
+			}
+		},
+		"node_modules/esrap": {
+			"version": "2.1.0",
+			"resolved": "https://registry.npmjs.org/esrap/-/esrap-2.1.0.tgz",
+			"integrity": "sha512-yzmPNpl7TBbMRC5Lj2JlJZNPml0tzqoqP5B1JXycNUwtqma9AKCO0M2wHrdgsHcy1WRW7S9rJknAMtByg3usgA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@jridgewell/sourcemap-codec": "^1.4.15"
+			}
+		},
+		"node_modules/esrecurse": {
+			"version": "4.3.0",
+			"resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
+			"integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
+			"dev": true,
+			"license": "BSD-2-Clause",
+			"dependencies": {
+				"estraverse": "^5.2.0"
+			},
+			"engines": {
+				"node": ">=4.0"
+			}
+		},
+		"node_modules/estraverse": {
+			"version": "5.3.0",
+			"resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+			"integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
+			"dev": true,
+			"license": "BSD-2-Clause",
+			"engines": {
+				"node": ">=4.0"
+			}
+		},
+		"node_modules/esutils": {
+			"version": "2.0.3",
+			"resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+			"integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
+			"dev": true,
+			"license": "BSD-2-Clause",
+			"engines": {
+				"node": ">=0.10.0"
+			}
+		},
+		"node_modules/fast-deep-equal": {
+			"version": "3.1.3",
+			"resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+			"integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/fast-glob": {
+			"version": "3.3.3",
+			"resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+			"integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@nodelib/fs.stat": "^2.0.2",
+				"@nodelib/fs.walk": "^1.2.3",
+				"glob-parent": "^5.1.2",
+				"merge2": "^1.3.0",
+				"micromatch": "^4.0.8"
+			},
+			"engines": {
+				"node": ">=8.6.0"
+			}
+		},
+		"node_modules/fast-glob/node_modules/glob-parent": {
+			"version": "5.1.2",
+			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+			"integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+			"dev": true,
+			"license": "ISC",
+			"dependencies": {
+				"is-glob": "^4.0.1"
+			},
+			"engines": {
+				"node": ">= 6"
+			}
+		},
+		"node_modules/fast-json-stable-stringify": {
+			"version": "2.1.0",
+			"resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+			"integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/fast-levenshtein": {
+			"version": "2.0.6",
+			"resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
+			"integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/fastq": {
+			"version": "1.19.1",
+			"resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
+			"integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
+			"dev": true,
+			"license": "ISC",
+			"dependencies": {
+				"reusify": "^1.0.4"
+			}
+		},
+		"node_modules/fdir": {
+			"version": "6.5.0",
+			"resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
+			"integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=12.0.0"
+			},
+			"peerDependencies": {
+				"picomatch": "^3 || ^4"
+			},
+			"peerDependenciesMeta": {
+				"picomatch": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/file-entry-cache": {
+			"version": "8.0.0",
+			"resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
+			"integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"flat-cache": "^4.0.0"
+			},
+			"engines": {
+				"node": ">=16.0.0"
+			}
+		},
+		"node_modules/fill-range": {
+			"version": "7.1.1",
+			"resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+			"integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"to-regex-range": "^5.0.1"
+			},
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/find-up": {
+			"version": "5.0.0",
+			"resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
+			"integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"locate-path": "^6.0.0",
+				"path-exists": "^4.0.0"
+			},
+			"engines": {
+				"node": ">=10"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/flat-cache": {
+			"version": "4.0.1",
+			"resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
+			"integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"flatted": "^3.2.9",
+				"keyv": "^4.5.4"
+			},
+			"engines": {
+				"node": ">=16"
+			}
+		},
+		"node_modules/flatted": {
+			"version": "3.3.3",
+			"resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
+			"integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
+			"dev": true,
+			"license": "ISC"
+		},
+		"node_modules/fsevents": {
+			"version": "2.3.3",
+			"resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+			"integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+			"dev": true,
+			"hasInstallScript": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+			}
+		},
+		"node_modules/glob-parent": {
+			"version": "6.0.2",
+			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+			"integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
+			"dev": true,
+			"license": "ISC",
+			"dependencies": {
+				"is-glob": "^4.0.3"
+			},
+			"engines": {
+				"node": ">=10.13.0"
+			}
+		},
+		"node_modules/globals": {
+			"version": "16.4.0",
+			"resolved": "https://registry.npmjs.org/globals/-/globals-16.4.0.tgz",
+			"integrity": "sha512-ob/2LcVVaVGCYN+r14cnwnoDPUufjiYgSqRhiFD0Q1iI4Odora5RE8Iv1D24hAz5oMophRGkGz+yuvQmmUMnMw==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=18"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/graceful-fs": {
+			"version": "4.2.11",
+			"resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
+			"integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
+			"dev": true,
+			"license": "ISC"
+		},
+		"node_modules/graphemer": {
+			"version": "1.4.0",
+			"resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
+			"integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/has-flag": {
+			"version": "4.0.0",
+			"resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+			"integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/ignore": {
+			"version": "5.3.2",
+			"resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
+			"integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">= 4"
+			}
+		},
+		"node_modules/import-fresh": {
+			"version": "3.3.1",
+			"resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
+			"integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"parent-module": "^1.0.0",
+				"resolve-from": "^4.0.0"
+			},
+			"engines": {
+				"node": ">=6"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/imurmurhash": {
+			"version": "0.1.4",
+			"resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+			"integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=0.8.19"
+			}
+		},
+		"node_modules/is-extglob": {
+			"version": "2.1.1",
+			"resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+			"integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=0.10.0"
+			}
+		},
+		"node_modules/is-glob": {
+			"version": "4.0.3",
+			"resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+			"integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"is-extglob": "^2.1.1"
+			},
+			"engines": {
+				"node": ">=0.10.0"
+			}
+		},
+		"node_modules/is-number": {
+			"version": "7.0.0",
+			"resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+			"integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=0.12.0"
+			}
+		},
+		"node_modules/is-reference": {
+			"version": "3.0.3",
+			"resolved": "https://registry.npmjs.org/is-reference/-/is-reference-3.0.3.tgz",
+			"integrity": "sha512-ixkJoqQvAP88E6wLydLGGqCJsrFUnqoH6HnaczB8XmDH1oaWU+xxdptvikTgaEhtZ53Ky6YXiBuUI2WXLMCwjw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@types/estree": "^1.0.6"
+			}
+		},
+		"node_modules/isexe": {
+			"version": "2.0.0",
+			"resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+			"integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+			"dev": true,
+			"license": "ISC"
+		},
+		"node_modules/jiti": {
+			"version": "2.6.1",
+			"resolved": "https://registry.npmjs.org/jiti/-/jiti-2.6.1.tgz",
+			"integrity": "sha512-ekilCSN1jwRvIbgeg/57YFh8qQDNbwDb9xT/qu2DAHbFFZUicIl4ygVaAvzveMhMVr3LnpSKTNnwt8PoOfmKhQ==",
+			"dev": true,
+			"license": "MIT",
+			"bin": {
+				"jiti": "lib/jiti-cli.mjs"
+			}
+		},
+		"node_modules/js-yaml": {
+			"version": "4.1.0",
+			"resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+			"integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"argparse": "^2.0.1"
+			},
+			"bin": {
+				"js-yaml": "bin/js-yaml.js"
+			}
+		},
+		"node_modules/json-buffer": {
+			"version": "3.0.1",
+			"resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
+			"integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/json-schema-traverse": {
+			"version": "0.4.1",
+			"resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+			"integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/json-stable-stringify-without-jsonify": {
+			"version": "1.0.1",
+			"resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
+			"integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/keyv": {
+			"version": "4.5.4",
+			"resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
+			"integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"json-buffer": "3.0.1"
+			}
+		},
+		"node_modules/kleur": {
+			"version": "4.1.5",
+			"resolved": "https://registry.npmjs.org/kleur/-/kleur-4.1.5.tgz",
+			"integrity": "sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=6"
+			}
+		},
+		"node_modules/known-css-properties": {
+			"version": "0.37.0",
+			"resolved": "https://registry.npmjs.org/known-css-properties/-/known-css-properties-0.37.0.tgz",
+			"integrity": "sha512-JCDrsP4Z1Sb9JwG0aJ8Eo2r7k4Ou5MwmThS/6lcIe1ICyb7UBJKGRIUUdqc2ASdE/42lgz6zFUnzAIhtXnBVrQ==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/levn": {
+			"version": "0.4.1",
+			"resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+			"integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"prelude-ls": "^1.2.1",
+				"type-check": "~0.4.0"
+			},
+			"engines": {
+				"node": ">= 0.8.0"
+			}
+		},
+		"node_modules/lightningcss": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.30.1.tgz",
+			"integrity": "sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==",
+			"dev": true,
+			"license": "MPL-2.0",
+			"dependencies": {
+				"detect-libc": "^2.0.3"
+			},
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			},
+			"optionalDependencies": {
+				"lightningcss-darwin-arm64": "1.30.1",
+				"lightningcss-darwin-x64": "1.30.1",
+				"lightningcss-freebsd-x64": "1.30.1",
+				"lightningcss-linux-arm-gnueabihf": "1.30.1",
+				"lightningcss-linux-arm64-gnu": "1.30.1",
+				"lightningcss-linux-arm64-musl": "1.30.1",
+				"lightningcss-linux-x64-gnu": "1.30.1",
+				"lightningcss-linux-x64-musl": "1.30.1",
+				"lightningcss-win32-arm64-msvc": "1.30.1",
+				"lightningcss-win32-x64-msvc": "1.30.1"
+			}
+		},
+		"node_modules/lightningcss-darwin-arm64": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-darwin-arm64/-/lightningcss-darwin-arm64-1.30.1.tgz",
+			"integrity": "sha512-c8JK7hyE65X1MHMN+Viq9n11RRC7hgin3HhYKhrMyaXflk5GVplZ60IxyoVtzILeKr+xAJwg6zK6sjTBJ0FKYQ==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-darwin-x64": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-darwin-x64/-/lightningcss-darwin-x64-1.30.1.tgz",
+			"integrity": "sha512-k1EvjakfumAQoTfcXUcHQZhSpLlkAuEkdMBsI/ivWw9hL+7FtilQc0Cy3hrx0AAQrVtQAbMI7YjCgYgvn37PzA==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-freebsd-x64": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-freebsd-x64/-/lightningcss-freebsd-x64-1.30.1.tgz",
+			"integrity": "sha512-kmW6UGCGg2PcyUE59K5r0kWfKPAVy4SltVeut+umLCFoJ53RdCUWxcRDzO1eTaxf/7Q2H7LTquFHPL5R+Gjyig==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"freebsd"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-linux-arm-gnueabihf": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-linux-arm-gnueabihf/-/lightningcss-linux-arm-gnueabihf-1.30.1.tgz",
+			"integrity": "sha512-MjxUShl1v8pit+6D/zSPq9S9dQ2NPFSQwGvxBCYaBYLPlCWuPh9/t1MRS8iUaR8i+a6w7aps+B4N0S1TYP/R+Q==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-linux-arm64-gnu": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-gnu/-/lightningcss-linux-arm64-gnu-1.30.1.tgz",
+			"integrity": "sha512-gB72maP8rmrKsnKYy8XUuXi/4OctJiuQjcuqWNlJQ6jZiWqtPvqFziskH3hnajfvKB27ynbVCucKSm2rkQp4Bw==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-linux-arm64-musl": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-musl/-/lightningcss-linux-arm64-musl-1.30.1.tgz",
+			"integrity": "sha512-jmUQVx4331m6LIX+0wUhBbmMX7TCfjF5FoOH6SD1CttzuYlGNVpA7QnrmLxrsub43ClTINfGSYyHe2HWeLl5CQ==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-linux-x64-gnu": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-linux-x64-gnu/-/lightningcss-linux-x64-gnu-1.30.1.tgz",
+			"integrity": "sha512-piWx3z4wN8J8z3+O5kO74+yr6ze/dKmPnI7vLqfSqI8bccaTGY5xiSGVIJBDd5K5BHlvVLpUB3S2YCfelyJ1bw==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-linux-x64-musl": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-linux-x64-musl/-/lightningcss-linux-x64-musl-1.30.1.tgz",
+			"integrity": "sha512-rRomAK7eIkL+tHY0YPxbc5Dra2gXlI63HL+v1Pdi1a3sC+tJTcFrHX+E86sulgAXeI7rSzDYhPSeHHjqFhqfeQ==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-win32-arm64-msvc": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-win32-arm64-msvc/-/lightningcss-win32-arm64-msvc-1.30.1.tgz",
+			"integrity": "sha512-mSL4rqPi4iXq5YVqzSsJgMVFENoa4nGTT/GjO2c0Yl9OuQfPsIfncvLrEW6RbbB24WtZ3xP/2CCmI3tNkNV4oA==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lightningcss-win32-x64-msvc": {
+			"version": "1.30.1",
+			"resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.30.1.tgz",
+			"integrity": "sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MPL-2.0",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">= 12.0.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/parcel"
+			}
+		},
+		"node_modules/lilconfig": {
+			"version": "2.1.0",
+			"resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
+			"integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=10"
+			}
+		},
+		"node_modules/locate-character": {
+			"version": "3.0.0",
+			"resolved": "https://registry.npmjs.org/locate-character/-/locate-character-3.0.0.tgz",
+			"integrity": "sha512-SW13ws7BjaeJ6p7Q6CO2nchbYEc3X3J6WrmTTDto7yMPqVSZTUyY5Tjbid+Ab8gLnATtygYtiDIJGQRRn2ZOiA==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/locate-path": {
+			"version": "6.0.0",
+			"resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
+			"integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"p-locate": "^5.0.0"
+			},
+			"engines": {
+				"node": ">=10"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/lodash.merge": {
+			"version": "4.6.2",
+			"resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+			"integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/magic-string": {
+			"version": "0.30.19",
+			"resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.19.tgz",
+			"integrity": "sha512-2N21sPY9Ws53PZvsEpVtNuSW+ScYbQdp4b9qUaL+9QkHUrGFKo56Lg9Emg5s9V/qrtNBmiR01sYhUOwu3H+VOw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@jridgewell/sourcemap-codec": "^1.5.5"
+			}
+		},
+		"node_modules/merge2": {
+			"version": "1.4.1",
+			"resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+			"integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">= 8"
+			}
+		},
+		"node_modules/micromatch": {
+			"version": "4.0.8",
+			"resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
+			"integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"braces": "^3.0.3",
+				"picomatch": "^2.3.1"
+			},
+			"engines": {
+				"node": ">=8.6"
+			}
+		},
+		"node_modules/micromatch/node_modules/picomatch": {
+			"version": "2.3.1",
+			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+			"integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=8.6"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/jonschlinkert"
+			}
+		},
+		"node_modules/minimatch": {
+			"version": "3.1.2",
+			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+			"integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+			"dev": true,
+			"license": "ISC",
+			"dependencies": {
+				"brace-expansion": "^1.1.7"
+			},
+			"engines": {
+				"node": "*"
+			}
+		},
+		"node_modules/minipass": {
+			"version": "7.1.2",
+			"resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+			"integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
+			"dev": true,
+			"license": "ISC",
+			"engines": {
+				"node": ">=16 || 14 >=14.17"
+			}
+		},
+		"node_modules/minizlib": {
+			"version": "3.1.0",
+			"resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.1.0.tgz",
+			"integrity": "sha512-KZxYo1BUkWD2TVFLr0MQoM8vUUigWD3LlD83a/75BqC+4qE0Hb1Vo5v1FgcfaNXvfXzr+5EhQ6ing/CaBijTlw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"minipass": "^7.1.2"
+			},
+			"engines": {
+				"node": ">= 18"
+			}
+		},
+		"node_modules/mri": {
+			"version": "1.2.0",
+			"resolved": "https://registry.npmjs.org/mri/-/mri-1.2.0.tgz",
+			"integrity": "sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=4"
+			}
+		},
+		"node_modules/mrmime": {
+			"version": "2.0.1",
+			"resolved": "https://registry.npmjs.org/mrmime/-/mrmime-2.0.1.tgz",
+			"integrity": "sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=10"
+			}
+		},
+		"node_modules/ms": {
+			"version": "2.1.3",
+			"resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+			"integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/nanoid": {
+			"version": "3.3.11",
+			"resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+			"integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
+			"dev": true,
+			"funding": [
+				{
+					"type": "github",
+					"url": "https://github.com/sponsors/ai"
+				}
+			],
+			"license": "MIT",
+			"bin": {
+				"nanoid": "bin/nanoid.cjs"
+			},
+			"engines": {
+				"node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
+			}
+		},
+		"node_modules/natural-compare": {
+			"version": "1.4.0",
+			"resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+			"integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/optionator": {
+			"version": "0.9.4",
+			"resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
+			"integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"deep-is": "^0.1.3",
+				"fast-levenshtein": "^2.0.6",
+				"levn": "^0.4.1",
+				"prelude-ls": "^1.2.1",
+				"type-check": "^0.4.0",
+				"word-wrap": "^1.2.5"
+			},
+			"engines": {
+				"node": ">= 0.8.0"
+			}
+		},
+		"node_modules/p-limit": {
+			"version": "3.1.0",
+			"resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
+			"integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"yocto-queue": "^0.1.0"
+			},
+			"engines": {
+				"node": ">=10"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/p-locate": {
+			"version": "5.0.0",
+			"resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
+			"integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"p-limit": "^3.0.2"
+			},
+			"engines": {
+				"node": ">=10"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/parent-module": {
+			"version": "1.0.1",
+			"resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
+			"integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"callsites": "^3.0.0"
+			},
+			"engines": {
+				"node": ">=6"
+			}
+		},
+		"node_modules/path-exists": {
+			"version": "4.0.0",
+			"resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+			"integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/path-key": {
+			"version": "3.1.1",
+			"resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+			"integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/picocolors": {
+			"version": "1.1.1",
+			"resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
+			"integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+			"dev": true,
+			"license": "ISC"
+		},
+		"node_modules/picomatch": {
+			"version": "4.0.3",
+			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
+			"integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=12"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/jonschlinkert"
+			}
+		},
+		"node_modules/postcss": {
+			"version": "8.5.6",
+			"resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
+			"integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
+			"dev": true,
+			"funding": [
+				{
+					"type": "opencollective",
+					"url": "https://opencollective.com/postcss/"
+				},
+				{
+					"type": "tidelift",
+					"url": "https://tidelift.com/funding/github/npm/postcss"
+				},
+				{
+					"type": "github",
+					"url": "https://github.com/sponsors/ai"
+				}
+			],
+			"license": "MIT",
+			"dependencies": {
+				"nanoid": "^3.3.11",
+				"picocolors": "^1.1.1",
+				"source-map-js": "^1.2.1"
+			},
+			"engines": {
+				"node": "^10 || ^12 || >=14"
+			}
+		},
+		"node_modules/postcss-load-config": {
+			"version": "3.1.4",
+			"resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-3.1.4.tgz",
+			"integrity": "sha512-6DiM4E7v4coTE4uzA8U//WhtPwyhiim3eyjEMFCnUpzbrkK9wJHgKDT2mR+HbtSrd/NubVaYTOpSpjUl8NQeRg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"lilconfig": "^2.0.5",
+				"yaml": "^1.10.2"
+			},
+			"engines": {
+				"node": ">= 10"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/postcss/"
+			},
+			"peerDependencies": {
+				"postcss": ">=8.0.9",
+				"ts-node": ">=9.0.0"
+			},
+			"peerDependenciesMeta": {
+				"postcss": {
+					"optional": true
+				},
+				"ts-node": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/postcss-load-config/node_modules/yaml": {
+			"version": "1.10.2",
+			"resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
+			"integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
+			"dev": true,
+			"license": "ISC",
+			"engines": {
+				"node": ">= 6"
+			}
+		},
+		"node_modules/postcss-safe-parser": {
+			"version": "7.0.1",
+			"resolved": "https://registry.npmjs.org/postcss-safe-parser/-/postcss-safe-parser-7.0.1.tgz",
+			"integrity": "sha512-0AioNCJZ2DPYz5ABT6bddIqlhgwhpHZ/l65YAYo0BCIn0xiDpsnTHz0gnoTGk0OXZW0JRs+cDwL8u/teRdz+8A==",
+			"dev": true,
+			"funding": [
+				{
+					"type": "opencollective",
+					"url": "https://opencollective.com/postcss/"
+				},
+				{
+					"type": "tidelift",
+					"url": "https://tidelift.com/funding/github/npm/postcss-safe-parser"
+				},
+				{
+					"type": "github",
+					"url": "https://github.com/sponsors/ai"
+				}
+			],
+			"license": "MIT",
+			"engines": {
+				"node": ">=18.0"
+			},
+			"peerDependencies": {
+				"postcss": "^8.4.31"
+			}
+		},
+		"node_modules/postcss-scss": {
+			"version": "4.0.9",
+			"resolved": "https://registry.npmjs.org/postcss-scss/-/postcss-scss-4.0.9.tgz",
+			"integrity": "sha512-AjKOeiwAitL/MXxQW2DliT28EKukvvbEWx3LBmJIRN8KfBGZbRTxNYW0kSqi1COiTZ57nZ9NW06S6ux//N1c9A==",
+			"dev": true,
+			"funding": [
+				{
+					"type": "opencollective",
+					"url": "https://opencollective.com/postcss/"
+				},
+				{
+					"type": "tidelift",
+					"url": "https://tidelift.com/funding/github/npm/postcss-scss"
+				},
+				{
+					"type": "github",
+					"url": "https://github.com/sponsors/ai"
+				}
+			],
+			"license": "MIT",
+			"engines": {
+				"node": ">=12.0"
+			},
+			"peerDependencies": {
+				"postcss": "^8.4.29"
+			}
+		},
+		"node_modules/postcss-selector-parser": {
+			"version": "7.1.0",
+			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-7.1.0.tgz",
+			"integrity": "sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"cssesc": "^3.0.0",
+				"util-deprecate": "^1.0.2"
+			},
+			"engines": {
+				"node": ">=4"
+			}
+		},
+		"node_modules/prelude-ls": {
+			"version": "1.2.1",
+			"resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
+			"integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">= 0.8.0"
+			}
+		},
+		"node_modules/prettier": {
+			"version": "3.6.2",
+			"resolved": "https://registry.npmjs.org/prettier/-/prettier-3.6.2.tgz",
+			"integrity": "sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==",
+			"dev": true,
+			"license": "MIT",
+			"bin": {
+				"prettier": "bin/prettier.cjs"
+			},
+			"engines": {
+				"node": ">=14"
+			},
+			"funding": {
+				"url": "https://github.com/prettier/prettier?sponsor=1"
+			}
+		},
+		"node_modules/prettier-plugin-svelte": {
+			"version": "3.4.0",
+			"resolved": "https://registry.npmjs.org/prettier-plugin-svelte/-/prettier-plugin-svelte-3.4.0.tgz",
+			"integrity": "sha512-pn1ra/0mPObzqoIQn/vUTR3ZZI6UuZ0sHqMK5x2jMLGrs53h0sXhkVuDcrlssHwIMk7FYrMjHBPoUSyyEEDlBQ==",
+			"dev": true,
+			"license": "MIT",
+			"peerDependencies": {
+				"prettier": "^3.0.0",
+				"svelte": "^3.2.0 || ^4.0.0-next.0 || ^5.0.0-next.0"
+			}
+		},
+		"node_modules/prettier-plugin-tailwindcss": {
+			"version": "0.6.14",
+			"resolved": "https://registry.npmjs.org/prettier-plugin-tailwindcss/-/prettier-plugin-tailwindcss-0.6.14.tgz",
+			"integrity": "sha512-pi2e/+ZygeIqntN+vC573BcW5Cve8zUB0SSAGxqpB4f96boZF4M3phPVoOFCeypwkpRYdi7+jQ5YJJUwrkGUAg==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=14.21.3"
+			},
+			"peerDependencies": {
+				"@ianvs/prettier-plugin-sort-imports": "*",
+				"@prettier/plugin-hermes": "*",
+				"@prettier/plugin-oxc": "*",
+				"@prettier/plugin-pug": "*",
+				"@shopify/prettier-plugin-liquid": "*",
+				"@trivago/prettier-plugin-sort-imports": "*",
+				"@zackad/prettier-plugin-twig": "*",
+				"prettier": "^3.0",
+				"prettier-plugin-astro": "*",
+				"prettier-plugin-css-order": "*",
+				"prettier-plugin-import-sort": "*",
+				"prettier-plugin-jsdoc": "*",
+				"prettier-plugin-marko": "*",
+				"prettier-plugin-multiline-arrays": "*",
+				"prettier-plugin-organize-attributes": "*",
+				"prettier-plugin-organize-imports": "*",
+				"prettier-plugin-sort-imports": "*",
+				"prettier-plugin-style-order": "*",
+				"prettier-plugin-svelte": "*"
+			},
+			"peerDependenciesMeta": {
+				"@ianvs/prettier-plugin-sort-imports": {
+					"optional": true
+				},
+				"@prettier/plugin-hermes": {
+					"optional": true
+				},
+				"@prettier/plugin-oxc": {
+					"optional": true
+				},
+				"@prettier/plugin-pug": {
+					"optional": true
+				},
+				"@shopify/prettier-plugin-liquid": {
+					"optional": true
+				},
+				"@trivago/prettier-plugin-sort-imports": {
+					"optional": true
+				},
+				"@zackad/prettier-plugin-twig": {
+					"optional": true
+				},
+				"prettier-plugin-astro": {
+					"optional": true
+				},
+				"prettier-plugin-css-order": {
+					"optional": true
+				},
+				"prettier-plugin-import-sort": {
+					"optional": true
+				},
+				"prettier-plugin-jsdoc": {
+					"optional": true
+				},
+				"prettier-plugin-marko": {
+					"optional": true
+				},
+				"prettier-plugin-multiline-arrays": {
+					"optional": true
+				},
+				"prettier-plugin-organize-attributes": {
+					"optional": true
+				},
+				"prettier-plugin-organize-imports": {
+					"optional": true
+				},
+				"prettier-plugin-sort-imports": {
+					"optional": true
+				},
+				"prettier-plugin-style-order": {
+					"optional": true
+				},
+				"prettier-plugin-svelte": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/punycode": {
+			"version": "2.3.1",
+			"resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+			"integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=6"
+			}
+		},
+		"node_modules/queue-microtask": {
+			"version": "1.2.3",
+			"resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+			"integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
+			"dev": true,
+			"funding": [
+				{
+					"type": "github",
+					"url": "https://github.com/sponsors/feross"
+				},
+				{
+					"type": "patreon",
+					"url": "https://www.patreon.com/feross"
+				},
+				{
+					"type": "consulting",
+					"url": "https://feross.org/support"
+				}
+			],
+			"license": "MIT"
+		},
+		"node_modules/readdirp": {
+			"version": "4.1.2",
+			"resolved": "https://registry.npmjs.org/readdirp/-/readdirp-4.1.2.tgz",
+			"integrity": "sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">= 14.18.0"
+			},
+			"funding": {
+				"type": "individual",
+				"url": "https://paulmillr.com/funding/"
+			}
+		},
+		"node_modules/resolve-from": {
+			"version": "4.0.0",
+			"resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
+			"integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=4"
+			}
+		},
+		"node_modules/reusify": {
+			"version": "1.1.0",
+			"resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
+			"integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"iojs": ">=1.0.0",
+				"node": ">=0.10.0"
+			}
+		},
+		"node_modules/rollup": {
+			"version": "4.52.3",
+			"resolved": "https://registry.npmjs.org/rollup/-/rollup-4.52.3.tgz",
+			"integrity": "sha512-RIDh866U8agLgiIcdpB+COKnlCreHJLfIhWC3LVflku5YHfpnsIKigRZeFfMfCc4dVcqNVfQQ5gO/afOck064A==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@types/estree": "1.0.8"
+			},
+			"bin": {
+				"rollup": "dist/bin/rollup"
+			},
+			"engines": {
+				"node": ">=18.0.0",
+				"npm": ">=8.0.0"
+			},
+			"optionalDependencies": {
+				"@rollup/rollup-android-arm-eabi": "4.52.3",
+				"@rollup/rollup-android-arm64": "4.52.3",
+				"@rollup/rollup-darwin-arm64": "4.52.3",
+				"@rollup/rollup-darwin-x64": "4.52.3",
+				"@rollup/rollup-freebsd-arm64": "4.52.3",
+				"@rollup/rollup-freebsd-x64": "4.52.3",
+				"@rollup/rollup-linux-arm-gnueabihf": "4.52.3",
+				"@rollup/rollup-linux-arm-musleabihf": "4.52.3",
+				"@rollup/rollup-linux-arm64-gnu": "4.52.3",
+				"@rollup/rollup-linux-arm64-musl": "4.52.3",
+				"@rollup/rollup-linux-loong64-gnu": "4.52.3",
+				"@rollup/rollup-linux-ppc64-gnu": "4.52.3",
+				"@rollup/rollup-linux-riscv64-gnu": "4.52.3",
+				"@rollup/rollup-linux-riscv64-musl": "4.52.3",
+				"@rollup/rollup-linux-s390x-gnu": "4.52.3",
+				"@rollup/rollup-linux-x64-gnu": "4.52.3",
+				"@rollup/rollup-linux-x64-musl": "4.52.3",
+				"@rollup/rollup-openharmony-arm64": "4.52.3",
+				"@rollup/rollup-win32-arm64-msvc": "4.52.3",
+				"@rollup/rollup-win32-ia32-msvc": "4.52.3",
+				"@rollup/rollup-win32-x64-gnu": "4.52.3",
+				"@rollup/rollup-win32-x64-msvc": "4.52.3",
+				"fsevents": "~2.3.2"
+			}
+		},
+		"node_modules/run-parallel": {
+			"version": "1.2.0",
+			"resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+			"integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
+			"dev": true,
+			"funding": [
+				{
+					"type": "github",
+					"url": "https://github.com/sponsors/feross"
+				},
+				{
+					"type": "patreon",
+					"url": "https://www.patreon.com/feross"
+				},
+				{
+					"type": "consulting",
+					"url": "https://feross.org/support"
+				}
+			],
+			"license": "MIT",
+			"dependencies": {
+				"queue-microtask": "^1.2.2"
+			}
+		},
+		"node_modules/sade": {
+			"version": "1.8.1",
+			"resolved": "https://registry.npmjs.org/sade/-/sade-1.8.1.tgz",
+			"integrity": "sha512-xal3CZX1Xlo/k4ApwCFrHVACi9fBqJ7V+mwhBsuf/1IOKbBy098Fex+Wa/5QMubw09pSZ/u8EY8PWgevJsXp1A==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"mri": "^1.1.0"
+			},
+			"engines": {
+				"node": ">=6"
+			}
+		},
+		"node_modules/semver": {
+			"version": "7.7.2",
+			"resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+			"integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+			"dev": true,
+			"license": "ISC",
+			"bin": {
+				"semver": "bin/semver.js"
+			},
+			"engines": {
+				"node": ">=10"
+			}
+		},
+		"node_modules/set-cookie-parser": {
+			"version": "2.7.1",
+			"resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
+			"integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/shebang-command": {
+			"version": "2.0.0",
+			"resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+			"integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"shebang-regex": "^3.0.0"
+			},
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/shebang-regex": {
+			"version": "3.0.0",
+			"resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+			"integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/sirv": {
+			"version": "3.0.2",
+			"resolved": "https://registry.npmjs.org/sirv/-/sirv-3.0.2.tgz",
+			"integrity": "sha512-2wcC/oGxHis/BoHkkPwldgiPSYcpZK3JU28WoMVv55yHJgcZ8rlXvuG9iZggz+sU1d4bRgIGASwyWqjxu3FM0g==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@polka/url": "^1.0.0-next.24",
+				"mrmime": "^2.0.0",
+				"totalist": "^3.0.0"
+			},
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/source-map-js": {
+			"version": "1.2.1",
+			"resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
+			"integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
+			"dev": true,
+			"license": "BSD-3-Clause",
+			"engines": {
+				"node": ">=0.10.0"
+			}
+		},
+		"node_modules/strip-json-comments": {
+			"version": "3.1.1",
+			"resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+			"integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=8"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/supports-color": {
+			"version": "7.2.0",
+			"resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+			"integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"has-flag": "^4.0.0"
+			},
+			"engines": {
+				"node": ">=8"
+			}
+		},
+		"node_modules/svelte": {
+			"version": "5.39.7",
+			"resolved": "https://registry.npmjs.org/svelte/-/svelte-5.39.7.tgz",
+			"integrity": "sha512-lfeYLzyl4AWqd5ysgIoZ6lsY2D8C151+hF8eOU3Gsq1OqYdn6LJBh5FA1cCSbf9/rxCg5ETta8jhM9acrfELZg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@jridgewell/remapping": "^2.3.4",
+				"@jridgewell/sourcemap-codec": "^1.5.0",
+				"@sveltejs/acorn-typescript": "^1.0.5",
+				"@types/estree": "^1.0.5",
+				"acorn": "^8.12.1",
+				"aria-query": "^5.3.1",
+				"axobject-query": "^4.1.0",
+				"clsx": "^2.1.1",
+				"esm-env": "^1.2.1",
+				"esrap": "^2.1.0",
+				"is-reference": "^3.0.3",
+				"locate-character": "^3.0.0",
+				"magic-string": "^0.30.11",
+				"zimmerframe": "^1.1.2"
+			},
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/svelte-check": {
+			"version": "4.3.2",
+			"resolved": "https://registry.npmjs.org/svelte-check/-/svelte-check-4.3.2.tgz",
+			"integrity": "sha512-71udP5w2kaSTcX8iV0hn3o2FWlabQHhJTJLIQrCqMsrcOeDUO2VhCQKKCA8AMVHSPwdxLEWkUWh9OKxns5PD9w==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@jridgewell/trace-mapping": "^0.3.25",
+				"chokidar": "^4.0.1",
+				"fdir": "^6.2.0",
+				"picocolors": "^1.0.0",
+				"sade": "^1.7.4"
+			},
+			"bin": {
+				"svelte-check": "bin/svelte-check"
+			},
+			"engines": {
+				"node": ">= 18.0.0"
+			},
+			"peerDependencies": {
+				"svelte": "^4.0.0 || ^5.0.0-next.0",
+				"typescript": ">=5.0.0"
+			}
+		},
+		"node_modules/svelte-eslint-parser": {
+			"version": "1.3.3",
+			"resolved": "https://registry.npmjs.org/svelte-eslint-parser/-/svelte-eslint-parser-1.3.3.tgz",
+			"integrity": "sha512-oTrDR8Z7Wnguut7QH3YKh7JR19xv1seB/bz4dxU5J/86eJtZOU4eh0/jZq4dy6tAlz/KROxnkRQspv5ZEt7t+Q==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"eslint-scope": "^8.2.0",
+				"eslint-visitor-keys": "^4.0.0",
+				"espree": "^10.0.0",
+				"postcss": "^8.4.49",
+				"postcss-scss": "^4.0.9",
+				"postcss-selector-parser": "^7.0.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/ota-meshi"
+			},
+			"peerDependencies": {
+				"svelte": "^3.37.0 || ^4.0.0 || ^5.0.0"
+			},
+			"peerDependenciesMeta": {
+				"svelte": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/tailwindcss": {
+			"version": "4.1.13",
+			"resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.13.tgz",
+			"integrity": "sha512-i+zidfmTqtwquj4hMEwdjshYYgMbOrPzb9a0M3ZgNa0JMoZeFC6bxZvO8yr8ozS6ix2SDz0+mvryPeBs2TFE+w==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/tapable": {
+			"version": "2.2.3",
+			"resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.3.tgz",
+			"integrity": "sha512-ZL6DDuAlRlLGghwcfmSn9sK3Hr6ArtyudlSAiCqQ6IfE+b+HHbydbYDIG15IfS5do+7XQQBdBiubF/cV2dnDzg==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=6"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/webpack"
+			}
+		},
+		"node_modules/tar": {
+			"version": "7.5.1",
+			"resolved": "https://registry.npmjs.org/tar/-/tar-7.5.1.tgz",
+			"integrity": "sha512-nlGpxf+hv0v7GkWBK2V9spgactGOp0qvfWRxUMjqHyzrt3SgwE48DIv/FhqPHJYLHpgW1opq3nERbz5Anq7n1g==",
+			"dev": true,
+			"license": "ISC",
+			"dependencies": {
+				"@isaacs/fs-minipass": "^4.0.0",
+				"chownr": "^3.0.0",
+				"minipass": "^7.1.2",
+				"minizlib": "^3.1.0",
+				"yallist": "^5.0.0"
+			},
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/tinyglobby": {
+			"version": "0.2.15",
+			"resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.15.tgz",
+			"integrity": "sha512-j2Zq4NyQYG5XMST4cbs02Ak8iJUdxRM0XI5QyxXuZOzKOINmWurp3smXu3y5wDcJrptwpSjgXHzIQxR0omXljQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"fdir": "^6.5.0",
+				"picomatch": "^4.0.3"
+			},
+			"engines": {
+				"node": ">=12.0.0"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/SuperchupuDev"
+			}
+		},
+		"node_modules/to-regex-range": {
+			"version": "5.0.1",
+			"resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+			"integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"is-number": "^7.0.0"
+			},
+			"engines": {
+				"node": ">=8.0"
+			}
+		},
+		"node_modules/totalist": {
+			"version": "3.0.1",
+			"resolved": "https://registry.npmjs.org/totalist/-/totalist-3.0.1.tgz",
+			"integrity": "sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=6"
+			}
+		},
+		"node_modules/ts-api-utils": {
+			"version": "2.1.0",
+			"resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
+			"integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=18.12"
+			},
+			"peerDependencies": {
+				"typescript": ">=4.8.4"
+			}
+		},
+		"node_modules/type-check": {
+			"version": "0.4.0",
+			"resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
+			"integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"prelude-ls": "^1.2.1"
+			},
+			"engines": {
+				"node": ">= 0.8.0"
+			}
+		},
+		"node_modules/typescript": {
+			"version": "5.9.3",
+			"resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.3.tgz",
+			"integrity": "sha512-jl1vZzPDinLr9eUt3J/t7V6FgNEw9QjvBPdysz9KfQDD41fQrC2Y4vKQdiaUpFT4bXlb1RHhLpp8wtm6M5TgSw==",
+			"dev": true,
+			"license": "Apache-2.0",
+			"bin": {
+				"tsc": "bin/tsc",
+				"tsserver": "bin/tsserver"
+			},
+			"engines": {
+				"node": ">=14.17"
+			}
+		},
+		"node_modules/typescript-eslint": {
+			"version": "8.45.0",
+			"resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.45.0.tgz",
+			"integrity": "sha512-qzDmZw/Z5beNLUrXfd0HIW6MzIaAV5WNDxmMs9/3ojGOpYavofgNAAD/nC6tGV2PczIi0iw8vot2eAe/sBn7zg==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"@typescript-eslint/eslint-plugin": "8.45.0",
+				"@typescript-eslint/parser": "8.45.0",
+				"@typescript-eslint/typescript-estree": "8.45.0",
+				"@typescript-eslint/utils": "8.45.0"
+			},
+			"engines": {
+				"node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+			},
+			"funding": {
+				"type": "opencollective",
+				"url": "https://opencollective.com/typescript-eslint"
+			},
+			"peerDependencies": {
+				"eslint": "^8.57.0 || ^9.0.0",
+				"typescript": ">=4.8.4 <6.0.0"
+			}
+		},
+		"node_modules/undici-types": {
+			"version": "6.21.0",
+			"resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
+			"integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/uri-js": {
+			"version": "4.4.1",
+			"resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+			"integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
+			"dev": true,
+			"license": "BSD-2-Clause",
+			"dependencies": {
+				"punycode": "^2.1.0"
+			}
+		},
+		"node_modules/util-deprecate": {
+			"version": "1.0.2",
+			"resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+			"integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+			"dev": true,
+			"license": "MIT"
+		},
+		"node_modules/vite": {
+			"version": "7.1.7",
+			"resolved": "https://registry.npmjs.org/vite/-/vite-7.1.7.tgz",
+			"integrity": "sha512-VbA8ScMvAISJNJVbRDTJdCwqQoAareR/wutevKanhR2/1EkoXVZVkkORaYm/tNVCjP/UDTKtcw3bAkwOUdedmA==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"esbuild": "^0.25.0",
+				"fdir": "^6.5.0",
+				"picomatch": "^4.0.3",
+				"postcss": "^8.5.6",
+				"rollup": "^4.43.0",
+				"tinyglobby": "^0.2.15"
+			},
+			"bin": {
+				"vite": "bin/vite.js"
+			},
+			"engines": {
+				"node": "^20.19.0 || >=22.12.0"
+			},
+			"funding": {
+				"url": "https://github.com/vitejs/vite?sponsor=1"
+			},
+			"optionalDependencies": {
+				"fsevents": "~2.3.3"
+			},
+			"peerDependencies": {
+				"@types/node": "^20.19.0 || >=22.12.0",
+				"jiti": ">=1.21.0",
+				"less": "^4.0.0",
+				"lightningcss": "^1.21.0",
+				"sass": "^1.70.0",
+				"sass-embedded": "^1.70.0",
+				"stylus": ">=0.54.8",
+				"sugarss": "^5.0.0",
+				"terser": "^5.16.0",
+				"tsx": "^4.8.1",
+				"yaml": "^2.4.2"
+			},
+			"peerDependenciesMeta": {
+				"@types/node": {
+					"optional": true
+				},
+				"jiti": {
+					"optional": true
+				},
+				"less": {
+					"optional": true
+				},
+				"lightningcss": {
+					"optional": true
+				},
+				"sass": {
+					"optional": true
+				},
+				"sass-embedded": {
+					"optional": true
+				},
+				"stylus": {
+					"optional": true
+				},
+				"sugarss": {
+					"optional": true
+				},
+				"terser": {
+					"optional": true
+				},
+				"tsx": {
+					"optional": true
+				},
+				"yaml": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/vitefu": {
+			"version": "1.1.1",
+			"resolved": "https://registry.npmjs.org/vitefu/-/vitefu-1.1.1.tgz",
+			"integrity": "sha512-B/Fegf3i8zh0yFbpzZ21amWzHmuNlLlmJT6n7bu5e+pCHUKQIfXSYokrqOBGEMMe9UG2sostKQF9mml/vYaWJQ==",
+			"dev": true,
+			"license": "MIT",
+			"workspaces": [
+				"tests/deps/*",
+				"tests/projects/*",
+				"tests/projects/workspace/packages/*"
+			],
+			"peerDependencies": {
+				"vite": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0"
+			},
+			"peerDependenciesMeta": {
+				"vite": {
+					"optional": true
+				}
+			}
+		},
+		"node_modules/which": {
+			"version": "2.0.2",
+			"resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+			"integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+			"dev": true,
+			"license": "ISC",
+			"dependencies": {
+				"isexe": "^2.0.0"
+			},
+			"bin": {
+				"node-which": "bin/node-which"
+			},
+			"engines": {
+				"node": ">= 8"
+			}
+		},
+		"node_modules/word-wrap": {
+			"version": "1.2.5",
+			"resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
+			"integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=0.10.0"
+			}
+		},
+		"node_modules/yallist": {
+			"version": "5.0.0",
+			"resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
+			"integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
+			"dev": true,
+			"license": "BlueOak-1.0.0",
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/yocto-queue": {
+			"version": "0.1.0",
+			"resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
+			"integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
+			"dev": true,
+			"license": "MIT",
+			"engines": {
+				"node": ">=10"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/sindresorhus"
+			}
+		},
+		"node_modules/zimmerframe": {
+			"version": "1.1.4",
+			"resolved": "https://registry.npmjs.org/zimmerframe/-/zimmerframe-1.1.4.tgz",
+			"integrity": "sha512-B58NGBEoc8Y9MWWCQGl/gq9xBCe4IiKM0a2x7GZdQKOW5Exr8S1W24J6OgM1njK8xCRGvAJIL/MxXHf6SkmQKQ==",
+			"dev": true,
+			"license": "MIT"
+		}
+	}
+}
diff --git a/spd/app/frontend/package.json b/spd/app/frontend/package.json
new file mode 100644
index 00000000..6395d714
--- /dev/null
+++ b/spd/app/frontend/package.json
@@ -0,0 +1,38 @@
+{
+	"name": "frontend",
+	"private": true,
+	"version": "0.0.1",
+	"type": "module",
+	"scripts": {
+		"dev": "vite dev",
+		"build": "vite build",
+		"preview": "vite preview",
+		"prepare": "svelte-kit sync || echo ''",
+		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
+		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
+		"format": "prettier --write .",
+		"lint": "prettier --check . && eslint ."
+	},
+	"devDependencies": {
+		"@eslint/compat": "^1.2.5",
+		"@eslint/js": "^9.22.0",
+		"@sveltejs/adapter-auto": "^6.0.0",
+		"@sveltejs/kit": "^2.22.0",
+		"@sveltejs/vite-plugin-svelte": "^6.0.0",
+		"@tailwindcss/vite": "^4.0.0",
+		"@types/node": "^22",
+		"eslint": "^9.22.0",
+		"eslint-config-prettier": "^10.0.1",
+		"eslint-plugin-svelte": "^3.0.0",
+		"globals": "^16.0.0",
+		"prettier": "^3.4.2",
+		"prettier-plugin-svelte": "^3.3.3",
+		"prettier-plugin-tailwindcss": "^0.6.11",
+		"svelte": "^5.0.0",
+		"svelte-check": "^4.0.0",
+		"tailwindcss": "^4.0.0",
+		"typescript": "^5.0.0",
+		"typescript-eslint": "^8.20.0",
+		"vite": "^7.0.4"
+	}
+}
diff --git a/spd/app/frontend/src/app.css b/spd/app/frontend/src/app.css
new file mode 100644
index 00000000..d4b50785
--- /dev/null
+++ b/spd/app/frontend/src/app.css
@@ -0,0 +1 @@
+@import 'tailwindcss';
diff --git a/spd/app/frontend/src/app.d.ts b/spd/app/frontend/src/app.d.ts
new file mode 100644
index 00000000..da08e6da
--- /dev/null
+++ b/spd/app/frontend/src/app.d.ts
@@ -0,0 +1,13 @@
+// See https://svelte.dev/docs/kit/types#app.d.ts
+// for information about these interfaces
+declare global {
+	namespace App {
+		// interface Error {}
+		// interface Locals {}
+		// interface PageData {}
+		// interface PageState {}
+		// interface Platform {}
+	}
+}
+
+export {};
diff --git a/spd/app/frontend/src/app.html b/spd/app/frontend/src/app.html
new file mode 100644
index 00000000..f273cc58
--- /dev/null
+++ b/spd/app/frontend/src/app.html
@@ -0,0 +1,11 @@
+<!doctype html>
+<html lang="en">
+	<head>
+		<meta charset="utf-8" />
+		<meta name="viewport" content="width=device-width, initial-scale=1" />
+		%sveltekit.head%
+	</head>
+	<body data-sveltekit-preload-data="hover">
+		<div style="display: contents">%sveltekit.body%</div>
+	</body>
+</html>
diff --git a/spd/app/frontend/src/lib/api.ts b/spd/app/frontend/src/lib/api.ts
new file mode 100644
index 00000000..6c496fac
--- /dev/null
+++ b/spd/app/frontend/src/lib/api.ts
@@ -0,0 +1,474 @@
+export const API_URL = "http://localhost:8000";
+
+type Layer = string;
+
+type TokenComponentMaskIndices = number[];
+export type ComponentMask = Record<Layer, TokenComponentMaskIndices[]>;
+
+export type ComponentAblationRequest = {
+    prompt_id: string;
+    component_mask: Record<Layer, TokenComponentMaskIndices[]>;
+};
+
+const apiUrl: string = API_URL;
+
+export type TrainRunDTO = {
+    wandb_path: string;
+    component_layers: string[];
+    available_cluster_runs: string[];
+    config: Record<string, any>;
+};
+
+export type ClusteringShape = {
+    module_component_assignments: Record<string, number[]>;
+    module_component_groups: Record<string, number[][]>;
+};
+
+export type ClusterRunDTO = {
+    wandb_path: string;
+    iteration: number;
+    clustering_shape: ClusteringShape;
+};
+
+export type Status =
+    | { train_run: null; cluster_run: null }
+    | { train_run: TrainRunDTO; cluster_run: null }
+    | { train_run: TrainRunDTO; cluster_run: ClusterRunDTO };
+
+export async function getStatus(): Promise<Status> {
+    const response = await fetch(`${apiUrl}/status`);
+    const data = await response.json();
+    return data;
+}
+
+export type AvailablePrompt = {
+    index: number;
+    full_text: string;
+};
+
+export async function getAvailablePrompts(): Promise<AvailablePrompt[]> {
+    const response = await fetch(`${apiUrl}/available_prompts`, {
+        method: "GET",
+        headers: {
+            "Content-Type": "application/json"
+        }
+    });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to get available prompts");
+    }
+
+    return response.json();
+}
+
+export type SparseVector = {
+    l0: number;
+    indices: number[];
+    values: number[];
+};
+
+export type OutputTokenLogit = {
+    token: string;
+    logit: number;
+    probability: number;
+};
+
+export type MatrixCausalImportances = {
+    subcomponent_cis_sparse: SparseVector;
+    subcomponent_cis: number[];
+    component_agg_cis: number[];
+};
+
+export type LayerCIs = {
+    module: string;
+    token_cis: MatrixCausalImportances[];
+};
+
+export type RunPromptResponse = {
+    prompt_id: string;
+    prompt_tokens: string[];
+    layer_cis: LayerCIs[];
+    full_run_token_logits: OutputTokenLogit[][];
+    ci_masked_token_logits: OutputTokenLogit[][];
+};
+
+export async function runPrompt(prompt: string): Promise<RunPromptResponse> {
+    const response = await fetch(`${apiUrl}/run`, {
+        method: "POST",
+        headers: {
+            "Content-Type": "application/json"
+        },
+        body: JSON.stringify({ prompt })
+    });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to run prompt");
+    }
+
+    const data = await response.json();
+    data.layer_cis.reverse();
+    return data;
+}
+
+export async function runPromptByIndex(datasetIndex: number): Promise<RunPromptResponse> {
+    const response = await fetch(`${apiUrl}/run_prompt/${datasetIndex}`, {
+        method: "POST"
+    });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to run prompt by index");
+    }
+
+    return response.json();
+}
+
+export type TokenAblationStats = {
+    original_active_count: number;
+    ablated_count: number;
+    ablated_magnitude: number;
+};
+
+export type LayerAblationStats = {
+    module: string;
+    token_stats: TokenAblationStats[];
+};
+
+export type AblationStats = {
+    layer_stats: LayerAblationStats[];
+};
+
+export type InterventionResponse = {
+    token_logits: OutputTokenLogit[][];
+    ablation_stats: AblationStats;
+};
+
+export async function applyMaskAsAblation(
+    promptId: string,
+    maskOverrideId: string
+): Promise<InterventionResponse> {
+    const response = await fetch(`${apiUrl}/apply_mask`, {
+        method: "POST",
+        headers: {
+            "Content-Type": "application/json"
+        },
+        body: JSON.stringify({
+            prompt_id: promptId,
+            mask_override_id: maskOverrideId
+        })
+    });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to apply mask as ablation");
+    }
+
+    return response.json();
+}
+
+export type MaskOverrideDTO = {
+    id: string;
+    description: string | null;
+    layer: string;
+    combined_mask: SparseVector;
+};
+
+export async function getMaskOverrides(): Promise<MaskOverrideDTO[]> {
+    const response = await fetch(`${apiUrl}/mask_overrides`, {
+        method: "GET",
+        headers: {
+            "Content-Type": "application/json"
+        }
+    });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to get mask overrides");
+    }
+
+    return response.json();
+}
+
+export async function ablateComponents(
+    promptId: string,
+    componentMask: ComponentMask
+): Promise<InterventionResponse> {
+    const req: ComponentAblationRequest = {
+        prompt_id: promptId,
+        component_mask: componentMask
+    };
+
+    console.log("ablateComponents", JSON.stringify(req));
+
+    const response = await fetch(`${apiUrl}/ablate_components`, {
+        method: "POST",
+        headers: {
+            "Content-Type": "application/json"
+        },
+        body: JSON.stringify(req)
+    });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to modify components");
+    }
+
+    return response.json();
+}
+
+export type Run = {
+    id: string;
+    url: string;
+};
+
+export async function getRuns(): Promise<Run[]> {
+    const response = await fetch(`${apiUrl}/runs`, {
+        method: "GET",
+        headers: {
+            "Content-Type": "application/json"
+        }
+    });
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to get runs");
+    }
+    return response.json();
+}
+
+export async function loadRun(wandbRunId: string): Promise<void> {
+    const response = await fetch(`${apiUrl}/runs/load/${wandbRunId}`, {
+        method: "POST"
+    });
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to load run");
+    }
+}
+
+export type CosineSimilarityData = {
+    input_singular_vectors: number[][]; // 2D array for pairwise cosine similarities
+    output_singular_vectors: number[][]; // 2D array for pairwise cosine similarities
+    component_indices: number[]; // indices corresponding to rows/cols
+};
+
+export async function getCosineSimilarities(
+    layer: string,
+    componentIdx: number
+): Promise<CosineSimilarityData> {
+    const url = `${apiUrl}/cosine_similarities/${layer}/${componentIdx}`;
+    const response = await fetch(url, { method: "GET" });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to get cosine similarities");
+    }
+
+    return response.json();
+}
+
+export type CombineMasksRequest = {
+    prompt_id: string;
+    layer: string;
+    token_indices: number[]; // List of token positions to combine
+    description?: string;
+};
+
+export type CombineMasksResponse = {
+    mask_id: string;
+    mask_override: MaskOverrideDTO;
+};
+
+export async function combineMasks(req: CombineMasksRequest): Promise<CombineMasksResponse> {
+    const response = await fetch(`${apiUrl}/combine_masks`, {
+        method: "POST",
+        headers: {
+            "Content-Type": "application/json"
+        },
+        body: JSON.stringify(req)
+    });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to combine masks");
+    }
+
+    return response.json();
+}
+
+export type SimulateMergeRequest = {
+    prompt_id: string;
+    layer: string;
+    token_indices: number[];
+};
+
+export type SimulateMergeResponse = {
+    l0: number;
+    jacc: number;
+};
+
+export async function simulateMerge(req: SimulateMergeRequest): Promise<SimulateMergeResponse> {
+    const response = await fetch(`${apiUrl}/simulate_merge`, {
+        method: "POST",
+        headers: {
+            "Content-Type": "application/json"
+        },
+        body: JSON.stringify(req)
+    });
+
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to simulate merge");
+    }
+
+    return response.json();
+}
+
+export type ActivationContext = {
+    raw_text: string;
+    offset_mapping: [number, number][];
+    token_ci_values: number[];
+    active_position: number;
+    ci_value: number;
+};
+
+export type SubcomponentActivationContexts = {
+    subcomponent_idx: number;
+    examples: ActivationContext[];
+    token_densities: TokenDensity[];
+};
+
+export type TokenDensity = {
+    token: string;
+    density: number;
+};
+
+export type ActivationContextsConfig = {
+    importance_threshold: number;
+    max_examples_per_subcomponent: number;
+    n_batches: number;
+    batch_size: number;
+    n_tokens_either_side: number;
+};
+
+export async function getLayerActivationContexts(
+    layer: string,
+    config?: ActivationContextsConfig
+    // signal?: AbortSignal
+): Promise<SubcomponentActivationContexts[]> {
+    const url = new URL(`${apiUrl}/activation_contexts/${layer}/subcomponents`);
+    if (config) {
+        for (const [key, value] of Object.entries(config)) {
+            if (value !== undefined) {
+                url.searchParams.set(key, String(value));
+            }
+        }
+    }
+    const response = await fetch(url.toString(), {
+        method: "GET"
+        // signal
+    });
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to get layer activation contexts");
+    }
+    return response.json();
+}
+
+// export async function getSubcomponentActivationContexts(
+//     subcomponentIdx: number,
+//     layer: string
+// ): Promise<ActivationContext[]> {
+//     const response = await fetch(
+//         `${apiUrl}/activation_contexts/${layer}/subcomponents/${subcomponentIdx}`,
+//         { method: "GET" }
+//     );
+
+//     if (!response.ok) {
+//         const error = await response.json();
+//         throw new Error(error.detail || "Failed to get activation contexts");
+//     }
+
+//     return response.json();
+// }
+
+export type ClusterComponentDTO = {
+    module: string;
+    index: number;
+    label?: string;
+};
+
+export type ClusterStatsDTO = Record<string, any>;
+
+export type ClusterDataDTO = {
+    cluster_hash: string;
+    components: ClusterComponentDTO[];
+    stats: ClusterStatsDTO;
+    criterion_samples: Record<string, string[]>;
+};
+
+export type TextSampleDTO = {
+    text_hash: string;
+    full_text: string;
+    tokens: string[];
+};
+
+export type ActivationBatchDTO = {
+    cluster_id: {
+        clustering_run: string;
+        iteration: number;
+        cluster_label: number;
+        hash: string;
+    };
+    text_hashes: string[];
+    activations: number[][];
+};
+
+export type ClusterDashboardResponse = {
+    clusters: ClusterDataDTO[];
+    text_samples: TextSampleDTO[];
+    activation_batch: ActivationBatchDTO;
+    activations_map: Record<string, number>;
+    model_info: Record<string, any>;
+    iteration: number;
+    run_path: string;
+};
+
+type DashboardQueryParams = {
+    iteration: number;
+    n_samples: number;
+    n_batches: number;
+    batch_size: number;
+    context_length: number;
+    signal?: AbortSignal;
+};
+
+export async function loadClusterRun(wandbRunPath: string, iteration: number): Promise<void> {
+    const response = await fetch(`${apiUrl}/cluster-runs/load/${wandbRunPath}/${iteration}`, {
+        method: "POST"
+    });
+    if (!response.ok) {
+        const error = await response.json();
+        throw new Error(error.detail || "Failed to load cluster run");
+    }
+}
+
+export async function getClusterDashboardData(
+    params: DashboardQueryParams
+): Promise<ClusterDashboardResponse> {
+    const { signal, ...rest } = params;
+
+    const url = new URL(`${apiUrl}/cluster-dashboard/data`);
+    for (const [key, value] of Object.entries(rest)) {
+        url.searchParams.set(key, String(value));
+    }
+
+    const response = await fetch(url.toString(), { method: "GET" });
+    if (!response.ok) {
+        const error = await response.json().catch(() => ({}));
+        throw new Error(error.detail || "Failed to load cluster dashboard data");
+    }
+
+    return response.json();
+}
diff --git a/spd/app/frontend/src/lib/assets/favicon.svg b/spd/app/frontend/src/lib/assets/favicon.svg
new file mode 100644
index 00000000..cc5dc66a
--- /dev/null
+++ b/spd/app/frontend/src/lib/assets/favicon.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="107" height="128" viewBox="0 0 107 128"><title>svelte-logo</title><path d="M94.157 22.819c-10.4-14.885-30.94-19.297-45.792-9.835L22.282 29.608A29.92 29.92 0 0 0 8.764 49.65a31.5 31.5 0 0 0 3.108 20.231 30 30 0 0 0-4.477 11.183 31.9 31.9 0 0 0 5.448 24.116c10.402 14.887 30.942 19.297 45.791 9.835l26.083-16.624A29.92 29.92 0 0 0 98.235 78.35a31.53 31.53 0 0 0-3.105-20.232 30 30 0 0 0 4.474-11.182 31.88 31.88 0 0 0-5.447-24.116" style="fill:#ff3e00"/><path d="M45.817 106.582a20.72 20.72 0 0 1-22.237-8.243 19.17 19.17 0 0 1-3.277-14.503 18 18 0 0 1 .624-2.435l.49-1.498 1.337.981a33.6 33.6 0 0 0 10.203 5.098l.97.294-.09.968a5.85 5.85 0 0 0 1.052 3.878 6.24 6.24 0 0 0 6.695 2.485 5.8 5.8 0 0 0 1.603-.704L69.27 76.28a5.43 5.43 0 0 0 2.45-3.631 5.8 5.8 0 0 0-.987-4.371 6.24 6.24 0 0 0-6.698-2.487 5.7 5.7 0 0 0-1.6.704l-9.953 6.345a19 19 0 0 1-5.296 2.326 20.72 20.72 0 0 1-22.237-8.243 19.17 19.17 0 0 1-3.277-14.502 17.99 17.99 0 0 1 8.13-12.052l26.081-16.623a19 19 0 0 1 5.3-2.329 20.72 20.72 0 0 1 22.237 8.243 19.17 19.17 0 0 1 3.277 14.503 18 18 0 0 1-.624 2.435l-.49 1.498-1.337-.98a33.6 33.6 0 0 0-10.203-5.1l-.97-.294.09-.968a5.86 5.86 0 0 0-1.052-3.878 6.24 6.24 0 0 0-6.696-2.485 5.8 5.8 0 0 0-1.602.704L37.73 51.72a5.42 5.42 0 0 0-2.449 3.63 5.79 5.79 0 0 0 .986 4.372 6.24 6.24 0 0 0 6.698 2.486 5.8 5.8 0 0 0 1.602-.704l9.952-6.342a19 19 0 0 1 5.295-2.328 20.72 20.72 0 0 1 22.237 8.242 19.17 19.17 0 0 1 3.277 14.503 18 18 0 0 1-8.13 12.053l-26.081 16.622a19 19 0 0 1-5.3 2.328" style="fill:#fff"/></svg>
\ No newline at end of file
diff --git a/spd/app/frontend/src/lib/components/AblationHeatmap.svelte b/spd/app/frontend/src/lib/components/AblationHeatmap.svelte
new file mode 100644
index 00000000..75890274
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/AblationHeatmap.svelte
@@ -0,0 +1,174 @@
+<script lang="ts">
+    import type { AblationStats } from "$lib/api";
+
+    export let ablationStats: AblationStats;
+    export let promptTokens: string[];
+
+    // Find global max for color scaling
+    let globalMaxActive = Math.max(
+        ...ablationStats.layer_stats.flatMap((layer) =>
+            layer.token_stats.map((stat) => stat.original_active_count)
+        )
+    );
+
+    function getColorFromCounts(originalActive: number, ablated: number): string {
+        const intensity = Math.max(0, Math.min(1, originalActive / globalMaxActive));
+        const ablatedRatio = originalActive > 0 ? ablated / originalActive : 0;
+
+        // Blue depth for active components
+        const whiteAmount = Math.round((1 - intensity) * 255);
+        const baseColor = `rgb(${whiteAmount}, ${whiteAmount}, 255)`;
+
+        if (ablatedRatio === 0) {
+            return baseColor;
+        }
+
+        // Red bar for ablated components
+        const ablatedPercent = Math.round(ablatedRatio * 100);
+        return `linear-gradient(to right, #ff4444 0%, #ff4444 ${ablatedPercent}%, ${baseColor} ${ablatedPercent}%, ${baseColor} 100%)`;
+    }
+
+    $: layer_stats = ablationStats.layer_stats.toReversed();
+</script>
+
+<div class="ablation-heatmap">
+    <h4>Ablation Impact</h4>
+    <div class="heatmap-container-horiz">
+        <div class="layer-labels">
+            <div class="layer-label-spacer"></div>
+            {#each layer_stats as layer}
+                <div class="layer-label">{layer.module}</div>
+            {/each}
+        </div>
+
+        <div class="heatmap-scroll-area">
+            <div class="heatmap-grid">
+                {#each layer_stats as layer}
+                    <div class="heatmap-row">
+                        {#each layer.token_stats as tokenStat, tokenIdx}
+                            <div
+                                class="heatmap-cell"
+                                style="background: {getColorFromCounts(
+                                    tokenStat.original_active_count,
+                                    tokenStat.ablated_count
+                                )}"
+                                title="Active: {tokenStat.original_active_count}, Ablated: {tokenStat.ablated_count}, Magnitude: {tokenStat.ablated_magnitude.toFixed(
+                                    3
+                                )}"
+                            ></div>
+                        {/each}
+                    </div>
+                {/each}
+
+                <div class="token-labels">
+                    {#each promptTokens as token}
+                        <div class="token-label">{token}</div>
+                    {/each}
+                </div>
+            </div>
+        </div>
+    </div>
+    <div class="legend">
+        <span><strong>Blue depth:</strong> # active components</span>
+        <span><strong>Red bar:</strong> # ablated components</span>
+    </div>
+</div>
+
+<style>
+    .ablation-heatmap {
+        margin-top: 1rem;
+        padding: 0.75rem;
+        background: white;
+        border: 1px solid #ddd;
+        border-radius: 6px;
+    }
+
+    .ablation-heatmap h4 {
+        margin: 0 0 0.5rem 0;
+        color: #333;
+        font-size: 0.95rem;
+    }
+
+    .heatmap-container-horiz {
+        display: flex;
+    }
+
+    .layer-labels {
+        display: flex;
+        flex-direction: column;
+        margin-right: 0.5rem;
+        min-width: 120px;
+    }
+
+    .layer-label-spacer {
+        height: 0px;
+    }
+
+    .layer-label {
+        display: flex;
+        align-items: center;
+        height: 24px;
+        padding: 0.25rem 0.5rem;
+        background-color: #f0f0f0;
+        border: 1px solid #ddd;
+        border-radius: 4px;
+        font-size: 0.75rem;
+        font-weight: 500;
+        color: #555;
+        margin-bottom: 2px;
+    }
+
+    .heatmap-scroll-area {
+        flex: 1;
+        overflow-x: auto;
+        overflow-y: hidden;
+    }
+
+    .heatmap-grid {
+        display: flex;
+        flex-direction: column;
+    }
+
+    .heatmap-row {
+        display: flex;
+        gap: 2px;
+        margin-bottom: 2px;
+    }
+
+    .heatmap-cell {
+        width: 20px;
+        height: 24px;
+        border: 1px solid #ccc;
+        border-radius: 3px;
+        flex-shrink: 0;
+        cursor: default;
+    }
+
+    .token-labels {
+        display: flex;
+        gap: 2px;
+        margin-top: 4px;
+    }
+
+    .token-label {
+        width: 20px;
+        font-size: 0.65rem;
+        color: #666;
+        text-align: center;
+        overflow: hidden;
+        text-overflow: ellipsis;
+        white-space: nowrap;
+        flex-shrink: 0;
+    }
+
+    .legend {
+        display: flex;
+        gap: 1.5rem;
+        margin-top: 0.5rem;
+        padding: 0.5rem;
+        background: #f8f9fa;
+        border-radius: 4px;
+        font-size: 0.8rem;
+        color: #666;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/AblationPredictions.svelte b/spd/app/frontend/src/lib/components/AblationPredictions.svelte
new file mode 100644
index 00000000..3b3f2b8b
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/AblationPredictions.svelte
@@ -0,0 +1,105 @@
+<script lang="ts">
+    import TokenPredictions from "./TokenPredictions.svelte";
+    import AblationHeatmap from "./AblationHeatmap.svelte";
+    import type { OutputTokenLogit, ComponentMask, MaskOverrideDTO, AblationStats } from "$lib/api";
+
+    export let tokenLogits: OutputTokenLogit[][];
+    export let promptTokens: string[];
+    export let appliedMask: ComponentMask;
+    export let maskOverride: MaskOverrideDTO | undefined = undefined;
+    export let ablationStats: AblationStats;
+</script>
+
+<div class="ablation-output-section">
+    <TokenPredictions {tokenLogits} {promptTokens} containerClass="" {appliedMask} />
+
+    <AblationHeatmap {ablationStats} {promptTokens} />
+
+    <div class="ablation-summary">
+        <h3>Applied ablations:</h3>
+        <div class="applied-ablations">
+            {#if maskOverride}
+                <div class="mask-override-info">
+                    <strong>Mask Override Applied:</strong>
+                    <span class="mask-description"
+                        >{maskOverride.description || "Unnamed mask"}</span
+                    >
+                    <span class="mask-details">
+                        (Layer: {maskOverride.layer}, L0: {maskOverride.combined_mask.l0})
+                    </span>
+                </div>
+            {:else}
+                {#each Object.entries(appliedMask) as [layerName, tokenArrays]}
+                    {#each tokenArrays as disabledComponents, tokenIdx}
+                        {#if disabledComponents.length > 0}
+                            <div class="applied-ablation-item">
+                                <strong>{promptTokens[tokenIdx]}</strong>
+                                in
+                                <em>{layerName}</em>: disabled components {disabledComponents.join(
+                                    ", "
+                                )}
+                            </div>
+                        {/if}
+                    {/each}
+                {/each}
+            {/if}
+        </div>
+    </div>
+</div>
+
+<style>
+    .ablation-output-section {
+        margin-top: 1rem;
+        padding: 0.75rem;
+        border: 2px solid #ff6b35;
+        border-radius: 8px;
+        background-color: #fff8f5;
+    }
+
+    .ablation-summary {
+        background: white;
+        padding: 0.5rem;
+        border-radius: 6px;
+        border: 1px solid #ddd;
+        margin-top: 0.5rem;
+    }
+
+    .ablation-summary h3 {
+        margin: 0 0 0.25rem 0;
+        color: #333;
+    }
+
+    .applied-ablations {
+        display: flex;
+        flex-direction: column;
+        gap: 0.25rem;
+    }
+
+    .applied-ablation-item {
+        padding: 0.25rem;
+        background-color: #f8f9fa;
+        border-radius: 4px;
+        border-left: 3px solid #ff6b35;
+        font-size: 0.85rem;
+        color: #555;
+    }
+
+    .mask-override-info {
+        padding: 0.5rem;
+        background: #e3f2fd;
+        border-left: 3px solid #2196f3;
+        border-radius: 4px;
+        font-size: 0.9rem;
+    }
+
+    .mask-description {
+        font-weight: 600;
+        color: #1976d2;
+    }
+
+    .mask-details {
+        color: #666;
+        font-size: 0.85rem;
+        margin-left: 0.5rem;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/ActivationContext.svelte b/spd/app/frontend/src/lib/components/ActivationContext.svelte
new file mode 100644
index 00000000..ff23e20d
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ActivationContext.svelte
@@ -0,0 +1,28 @@
+<script lang="ts">
+    import type { ActivationContext } from "$lib/api";
+    import TokenHighlights from "$lib/components/TokenHighlights.svelte";
+
+    export let example: ActivationContext;
+</script>
+
+<div class="example-item">
+    <TokenHighlights
+        rawText={example.raw_text}
+        offsetMapping={example.offset_mapping}
+        tokenCiValues={example.token_ci_values}
+        activePosition={example.active_position}
+    />
+</div>
+
+<style>
+    .example-item {
+        font-family: monospace;
+        font-size: 14px;
+        line-height: 1.8;
+        color: #333;
+        padding: 0.5rem;
+        background: #f8f9fa;
+        border-radius: 4px;
+        border: 1px solid #e9ecef;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/ActivationContexts.svelte b/spd/app/frontend/src/lib/components/ActivationContexts.svelte
new file mode 100644
index 00000000..8349951e
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ActivationContexts.svelte
@@ -0,0 +1,77 @@
+<script lang="ts">
+    import type { ActivationContext } from "$lib/api";
+    import TokenHighlights from "$lib/components/TokenHighlights.svelte";
+
+    export let componentIdx: number;
+    export let examples: ActivationContext[];
+</script>
+
+<div class="activation-contexts">
+    <div class="header">
+        <h4>Component {componentIdx}</h4>
+        <span class="example-count">{examples.length} examples</span>
+    </div>
+
+    <div class="examples-container">
+        {#each examples as context, i}
+            <div class="example-item">
+                <strong>{i + 1}.</strong>
+                <TokenHighlights
+                    rawText={context.raw_text}
+                    offsetMapping={context.offset_mapping}
+                    tokenCiValues={context.token_ci_values}
+                    activePosition={context.active_position}
+                />
+            </div>
+        {/each}
+    </div>
+</div>
+
+<style>
+    .activation-contexts {
+        padding: 1rem;
+        background: var(--background-color, #fff);
+        border-radius: 6px;
+        border: 1px solid #e0e0e0;
+    }
+
+    .header {
+        display: flex;
+        align-items: center;
+        gap: 1rem;
+        margin-bottom: 0.75rem;
+        padding-bottom: 0.5rem;
+        border-bottom: 1px solid #e0e0e0;
+    }
+
+    .header h4 {
+        margin: 0;
+        font-size: 1rem;
+        color: #333;
+    }
+
+    .example-count {
+        font-size: 0.85rem;
+        color: #999;
+        margin-left: auto;
+    }
+
+    .examples-container {
+        display: flex;
+        flex-direction: column;
+        gap: 0.75rem;
+        overflow-y: auto;
+    }
+
+    .example-item {
+        font-family: monospace;
+        font-size: 14px;
+        line-height: 1.8;
+        color: #333;
+        padding: 0.5rem;
+        background: #f8f9fa;
+        border-radius: 4px;
+        border: 1px solid #e9ecef;
+    }
+
+</style>
diff --git a/spd/app/frontend/src/lib/components/ActivationContextsTab.svelte b/spd/app/frontend/src/lib/components/ActivationContextsTab.svelte
new file mode 100644
index 00000000..640a51ae
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ActivationContextsTab.svelte
@@ -0,0 +1,384 @@
+<script lang="ts">
+    import type { ActivationContextsConfig, SubcomponentActivationContexts } from "$lib/api";
+    import * as api from "$lib/api";
+    import ActivationContext from "./ActivationContext.svelte";
+
+    export let availableComponentLayers: string[];
+
+    if (availableComponentLayers.length === 0) {
+        throw new Error(`No component layers available: ${availableComponentLayers}`);
+    }
+
+    let selectedLayer: string = availableComponentLayers[0];
+    let subcomponentsActivationContexts: SubcomponentActivationContexts[] | null = null;
+    let loading = false;
+    let currentPage = 0;
+
+    // Configuration parameters
+    let importanceThreshold = 0.01;
+    let maxExamplesPerSubcomponent = 100;
+    let nBatches = 1;
+    let batchSize = 32;
+    let nTokensEitherSide = 10;
+
+    // Track previous layers to detect when run changes
+    let previousLayers: string[] = availableComponentLayers;
+    $: {
+        const layersChanged =
+            JSON.stringify(availableComponentLayers) !== JSON.stringify(previousLayers);
+        if (layersChanged) {
+            subcomponentsActivationContexts = null;
+            selectedLayer = availableComponentLayers[0];
+            previousLayers = availableComponentLayers;
+        }
+    }
+
+    $: totalPages = subcomponentsActivationContexts?.length ?? 0;
+    $: currentItem = subcomponentsActivationContexts?.[currentPage] ?? null;
+
+    async function loadContexts() {
+        loading = true;
+        subcomponentsActivationContexts = null;
+        try {
+            console.log(`loading contexts for layer ${selectedLayer}`);
+            const config: ActivationContextsConfig = {
+                importance_threshold: importanceThreshold,
+                max_examples_per_subcomponent: maxExamplesPerSubcomponent,
+                n_batches: nBatches,
+                batch_size: batchSize,
+                n_tokens_either_side: nTokensEitherSide
+            };
+            const data = await api.getLayerActivationContexts(selectedLayer, config);
+            for (const d of data) {
+                d.examples = d.examples.slice(0, 1000);
+            }
+            subcomponentsActivationContexts = data;
+            currentPage = 0;
+        } catch (e) {
+            if ((e as any)?.name !== "AbortError") {
+                console.error(e);
+            }
+        } finally {
+            loading = false;
+        }
+    }
+
+    function previousPage() {
+        if (currentPage > 0) currentPage--;
+    }
+
+    function nextPage() {
+        if (currentPage < totalPages - 1) currentPage++;
+    }
+</script>
+
+<div class="tab-content">
+    <div class="controls">
+        <div class="control-row">
+            <label for="layer-select">Layer:</label>
+            <select id="layer-select" bind:value={selectedLayer} on:change={loadContexts}>
+                {#each availableComponentLayers as layer}
+                    <option value={layer}>{layer}</option>
+                {/each}
+            </select>
+        </div>
+
+        <div class="config-section">
+            <h4>Configuration</h4>
+            <div class="config-grid">
+                <div class="config-item">
+                    <label for="importance-threshold">Importance Threshold:</label>
+                    <input
+                        id="importance-threshold"
+                        type="number"
+                        step="0.001"
+                        min="0"
+                        max="1"
+                        bind:value={importanceThreshold}
+                    />
+                </div>
+
+                <div class="config-item">
+                    <label for="max-examples">Max Examples per Subcomponent:</label>
+                    <input
+                        id="max-examples"
+                        type="number"
+                        step="10"
+                        min="1"
+                        bind:value={maxExamplesPerSubcomponent}
+                    />
+                </div>
+
+                <div class="config-item">
+                    <label for="n-steps">Number of Batches:</label>
+                    <input id="n-steps" type="number" step="1" min="1" bind:value={nBatches} />
+                </div>
+
+                <div class="config-item">
+                    <label for="batch-size">Batch Size:</label>
+                    <input id="batch-size" type="number" step="1" min="1" bind:value={batchSize} />
+                </div>
+
+                <div class="config-item">
+                    <label for="n-tokens">Context Tokens Either Side:</label>
+                    <input
+                        id="n-tokens"
+                        type="number"
+                        step="1"
+                        min="0"
+                        bind:value={nTokensEitherSide}
+                    />
+                </div>
+            </div>
+            <button class="load-button" on:click={loadContexts} disabled={loading}>
+                {loading ? "Loading..." : "Load Contexts"}
+            </button>
+        </div>
+    </div>
+    {#if loading}
+        <div class="loading">Loading...</div>
+    {/if}
+
+    {#if currentItem}
+        <div class="pagination-controls">
+            <button on:click={previousPage} disabled={currentPage === 0}>&lt;</button>
+            <input
+                type="number"
+                min="0"
+                max={totalPages - 1}
+                bind:value={currentPage}
+                class="page-input"
+            />
+            <span>of {totalPages - 1}</span>
+            <button on:click={nextPage} disabled={currentPage === totalPages - 1}>&gt;</button>
+        </div>
+
+        <div class="subcomponent-section-header">
+            <h4>Subcomponent {currentItem.subcomponent_idx}</h4>
+            {#if currentItem.token_densities && currentItem.token_densities.length > 0}
+                <div class="token-densities">
+                    <h5>
+                        Token Activation Densities {currentItem.token_densities.length > 20
+                            ? `(top 20) of ${currentItem.token_densities.length}`
+                            : ""}
+                    </h5>
+                    <div class="densities-grid">
+                        {#each currentItem.token_densities.slice(0, 20) as { token, density }}
+                            <div class="density-item">
+                                <span class="token">{token}</span>
+                                <div class="density-bar-container">
+                                    <div class="density-bar" style="width: {density * 100}%"></div>
+                                </div>
+                                <span class="density-value">{(density * 100).toFixed(1)}%</span>
+                            </div>
+                        {/each}
+                    </div>
+                </div>
+            {/if}
+
+            <div class="subcomponent-section">
+                {currentItem.examples.length > 200
+                    ? `Showing top 200 examples of ${currentItem.examples.length} examples`
+                    : ""}
+                {#each currentItem.examples.slice(0, 200) as example}
+                    <ActivationContext {example} />
+                {/each}
+            </div>
+        </div>
+    {/if}
+</div>
+
+<style>
+    .tab-content {
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+        padding: 1rem;
+    }
+
+    .controls {
+        display: flex;
+        gap: 1rem;
+        padding: 1rem;
+        background: #f8f9fa;
+        border-radius: 8px;
+        border: 1px solid #dee2e6;
+        flex-direction: column;
+    }
+
+    .control-row {
+        display: flex;
+        align-items: center;
+        gap: 0.5rem;
+    }
+
+    .config-section {
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+    }
+
+    .config-section h4 {
+        margin: 0;
+        font-size: 1rem;
+        color: #495057;
+    }
+
+    .config-grid {
+        display: grid;
+        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
+        gap: 1rem;
+    }
+
+    .config-item {
+        display: flex;
+        flex-direction: column;
+        gap: 0.25rem;
+    }
+
+    .config-item label {
+        font-size: 0.875rem;
+        color: #495057;
+        font-weight: 500;
+    }
+
+    .config-item input {
+        padding: 0.5rem;
+        border: 1px solid #dee2e6;
+        border-radius: 4px;
+        font-size: 0.9rem;
+        background: white;
+    }
+
+    .load-button {
+        padding: 0.75rem 1.5rem;
+        border: 1px solid #0d6efd;
+        border-radius: 4px;
+        background: #0d6efd;
+        color: white;
+        cursor: pointer;
+        font-size: 1rem;
+        font-weight: 500;
+        transition: background 0.2s;
+        align-self: flex-start;
+    }
+
+    .load-button:hover:not(:disabled) {
+        background: #0b5ed7;
+    }
+
+    .load-button:disabled {
+        opacity: 0.6;
+        cursor: not-allowed;
+    }
+
+    .pagination-controls {
+        display: flex;
+        align-items: center;
+        gap: 0.5rem;
+        padding: 0.5rem;
+        background: #f8f9fa;
+        border-radius: 8px;
+        border: 1px solid #dee2e6;
+    }
+
+    .pagination-controls button {
+        padding: 0.5rem 1rem;
+        border: 1px solid #dee2e6;
+        border-radius: 4px;
+        background: white;
+        cursor: pointer;
+        font-size: 1rem;
+    }
+
+    .pagination-controls button:disabled {
+        opacity: 0.5;
+        cursor: not-allowed;
+    }
+
+    .page-input {
+        width: 60px;
+        padding: 0.5rem;
+        border: 1px solid #dee2e6;
+        border-radius: 4px;
+        text-align: center;
+    }
+
+    .subcomponent-section-header {
+        display: flex;
+        flex-direction: column;
+        gap: 0.4rem;
+    }
+
+    .subcomponent-section {
+        border-radius: 8px;
+        overflow: hidden;
+        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+    }
+
+    #layer-select {
+        border: 1px solid #dee2e6;
+        border-radius: 4px;
+        padding: 0.5rem;
+        font-size: 0.9rem;
+        background: white;
+        cursor: pointer;
+        width: 100%;
+    }
+
+    .token-densities {
+        margin: 1rem 0;
+        padding: 1rem;
+        background: #f8f9fa;
+        border-radius: 8px;
+        border: 1px solid #dee2e6;
+    }
+
+    .token-densities h5 {
+        margin: 0 0 1rem 0;
+        font-size: 1rem;
+        color: #495057;
+    }
+
+    .densities-grid {
+        display: flex;
+        flex-direction: column;
+        gap: 0.5rem;
+    }
+
+    .density-item {
+        display: grid;
+        grid-template-columns: 100px 1fr 60px;
+        align-items: center;
+        gap: 0.5rem;
+        font-size: 0.875rem;
+    }
+
+    .token {
+        font-family: monospace;
+        font-weight: 600;
+        color: #212529;
+        overflow: hidden;
+        text-overflow: ellipsis;
+        white-space: nowrap;
+    }
+
+    .density-bar-container {
+        height: 20px;
+        background: #e9ecef;
+        border-radius: 4px;
+        overflow: hidden;
+    }
+
+    .density-bar {
+        height: 100%;
+        background: linear-gradient(90deg, #4dabf7, #228be6);
+        transition: width 0.3s ease;
+    }
+
+    .density-value {
+        text-align: right;
+        color: #495057;
+        font-weight: 500;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/ClusterDashboardBody.svelte b/spd/app/frontend/src/lib/components/ClusterDashboardBody.svelte
new file mode 100644
index 00000000..d0468c65
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ClusterDashboardBody.svelte
@@ -0,0 +1,471 @@
+<script lang="ts">
+    import { type ClusterDashboardResponse, type ClusterDataDTO } from "$lib/api";
+    import MiniModelView from "$lib/components/MiniModelView.svelte";
+    import Sparkbars from "$lib/components/Sparkbars.svelte";
+    import VirtualList from "$lib/components/VirtualList.svelte";
+    import ClusterDetailNew from "./ClusterDetailNew.svelte";
+
+    export let dashboard: ClusterDashboardResponse;
+
+    type TopToken = {
+        token: string;
+        count: number;
+    };
+
+    type ClusterExample = {
+        textHash: string;
+        rawText: string;
+        offsetMapping: [number, number][];
+        activations: number[];
+    };
+
+    type ClusterRow = {
+        id: number;
+        clusterHash: string;
+        componentCount: number;
+        topTokens: TopToken[];
+        maxTokenCount: number;
+    };
+
+    let sortKey: "id" | "componentCount" = "id";
+    let sortDir: "asc" | "desc" = "asc";
+
+    let detailsData: { cluster: ClusterDataDTO; examples: ClusterExample[] } | null = null;
+
+    $: clusterMap = Object.fromEntries<ClusterDataDTO>(
+        dashboard.clusters.map((cluster) => [cluster.cluster_hash, cluster])
+    );
+
+    $: textSampleLookup = Object.fromEntries<{ full_text: string; tokens: string[] }>(
+        dashboard.text_samples.map((sample) => [
+            sample.text_hash,
+            {
+                full_text: sample.full_text,
+                tokens: sample.tokens
+            }
+        ])
+    );
+
+    $: rows = applySort(buildRows(dashboard.clusters));
+
+    function resetDetail() {
+        detailsData = null;
+    }
+
+    const ROW_HEIGHT = 220;
+    const VIRTUAL_BUFFER = 6;
+
+    function applySort(nextRows: ClusterRow[]): ClusterRow[] {
+        const sorted = [...nextRows];
+        if (sortKey === "id") {
+            sorted.sort((a, b) => (sortDir === "asc" ? a.id - b.id : b.id - a.id));
+        } else {
+            sorted.sort((a, b) =>
+                sortDir === "asc"
+                    ? a.componentCount - b.componentCount
+                    : b.componentCount - a.componentCount
+            );
+        }
+        return sorted;
+    }
+
+    function buildRows(clusters: ClusterDataDTO[]): ClusterRow[] {
+        return clusters.map((cluster, idx) => {
+            const parts = cluster.cluster_hash.split("-");
+            const maybeId = Number.parseInt(parts[parts.length - 1] ?? "", 10);
+            const id = Number.isNaN(maybeId) ? idx : maybeId;
+            const topTokens: TopToken[] = (cluster.stats?.token_activations?.top_tokens ?? [])
+                .slice(0, 5)
+                .map((entry: any) => ({
+                    token: typeof entry.token === "string" ? entry.token : "",
+                    count: typeof entry.count === "number" ? entry.count : 0
+                }));
+            const maxTokenCount =
+                topTokens.reduce((max, token) => Math.max(max, token.count), 0) || 1;
+            return {
+                id,
+                clusterHash: cluster.cluster_hash,
+                componentCount: cluster.components?.length ?? 0,
+                topTokens,
+                maxTokenCount
+            } satisfies ClusterRow;
+        });
+    }
+
+    function tokenColor(count: number, max: number): string {
+        if (max <= 0) return "transparent";
+        const ratio = Math.min(Math.max(count / max, 0), 1);
+        const opacity = 0.15 + ratio * 0.35;
+        return `rgba(0, 200, 0, ${opacity})`;
+    }
+
+    function buildOffsets(tokens: string[]): [number, number][] {
+        const offsets: [number, number][] = [];
+        let cursor = 0;
+        for (const token of tokens) {
+            const start = cursor;
+            const end = cursor + token.length;
+            offsets.push([start, end]);
+            cursor = end;
+        }
+        return offsets;
+    }
+
+    function normalizeActivations(values: number[], length: number): number[] {
+        if (!values.length) return new Array(length).fill(0);
+        const slice = values.slice(0, length);
+        const max = Math.max(...slice.map((v) => Math.max(v, 0)), 1e-6);
+        return slice.map((v) => Math.max(v, 0) / max);
+    }
+
+    // todo put this in backend
+    function buildExamples(cluster: ClusterDataDTO): ClusterExample[] {
+        const hashes = cluster.criterion_samples["max_activation-max-16"];
+        const activations = dashboard.activation_batch.activations;
+
+        const examples: ClusterExample[] = [];
+        for (const textHash of hashes.slice(0, 5)) {
+            const activationHash = `${cluster.cluster_hash}:${textHash}`;
+            const idx = dashboard.activations_map[activationHash];
+            if (typeof idx !== "number")
+                throw new Error(`Activation hash ${activationHash} not found in activations map`);
+
+            const tokens = textSampleLookup[textHash].tokens;
+            const activationValues = activations[idx];
+            if (tokens.length !== activationValues.length)
+                throw new Error("Tokens and activations length mismatch");
+            if (tokens.length === 0) continue;
+
+            const rawText = tokens.join("");
+            const offsets = buildOffsets(tokens);
+            const normalized = normalizeActivations(activationValues, offsets.length);
+
+            examples.push({
+                textHash,
+                rawText,
+                offsetMapping: offsets,
+                activations: normalized
+            });
+        }
+
+        return examples;
+    }
+
+    function onView(row: ClusterRow) {
+        const cluster = clusterMap[row.clusterHash];
+        if (!cluster) return;
+        detailsData = { cluster, examples: buildExamples(cluster) };
+    }
+
+    const formatValue = (value: unknown): string => {
+        if (value === null || value === undefined) return "";
+        if (typeof value === "number") return value.toLocaleString();
+        if (typeof value === "string") return value;
+        try {
+            return JSON.stringify(value);
+        } catch {
+            return String(value);
+        }
+    };
+
+    function toggleSort(key: "id" | "componentCount") {
+        if (sortKey === key) {
+            sortDir = sortDir === "asc" ? "desc" : "asc";
+        } else {
+            sortKey = key;
+            sortDir = "asc";
+        }
+        rows = applySort(rows);
+    }
+
+    $: modelInfo = dashboard.model_info;
+    $: modelStats = [
+        { label: "Cluster Run", value: dashboard.run_path },
+        { label: "Iteration", value: dashboard.iteration },
+        { label: "Model Run", value: modelInfo.model_path },
+        { label: "Tokenizer", value: modelInfo.tokenizer_name },
+        { label: "Total Modules", value: modelInfo.total_modules },
+        { label: "Total Components", value: modelInfo.total_components },
+        { label: "Total Clusters", value: modelInfo.total_clusters },
+        { label: "Parameters", value: modelInfo.total_parameters },
+        { label: "Trainable Parameters", value: modelInfo.trainable_parameters }
+    ];
+</script>
+
+<div class="table-wrapper">
+    {#if modelStats.length}
+        <div class="model-info">
+            {#each modelStats as stat}
+                <div>
+                    <span class="model-info-label">{stat.label}:</span>
+                    <span class="model-info-value">{formatValue(stat.value)}</span>
+                </div>
+            {/each}
+        </div>
+    {/if}
+
+    {#if detailsData}
+        <div class="detail-toolbar">
+            <button class="back-button" on:click={resetDetail}>← Back</button>
+        </div>
+        <ClusterDetailNew cluster={detailsData.cluster} examples={detailsData.examples} />
+    {:else}
+        <div class="list">
+            <div class="list-header">
+                <div class="cell col-id">
+                    <button class="th-btn" on:click={() => toggleSort("id")}>ID</button>
+                </div>
+                <div class="cell col-comps">
+                    <button class="th-btn" on:click={() => toggleSort("componentCount")}
+                        >Comps</button
+                    >
+                </div>
+                <div class="cell col-model">Model View</div>
+                <div class="cell col-hist">All Activations</div>
+                <div class="cell col-hist">Max Activation Pos</div>
+                <div class="cell col-tokens">Top Tokens</div>
+                <div class="cell col-actions">Actions</div>
+            </div>
+            <VirtualList
+                items={rows}
+                rowHeight={ROW_HEIGHT}
+                buffer={VIRTUAL_BUFFER}
+                getKey={(row: ClusterRow) => row.clusterHash}
+                let:item
+            >
+                <div class="list-row">
+                    <div class="cell col-id">{item.id}</div>
+                    <div class="cell col-comps">{item.componentCount}</div>
+                    <div class="cell col-model">
+                        <MiniModelView
+                            components={clusterMap[item.clusterHash].components!}
+                            layerCount={4}
+                        />
+                        <!-- todo find a better way to get the layer count from. I just know it's 4
+                        for now -->
+                    </div>
+                    <div class="cell col-hist">
+                        {#if clusterMap[item.clusterHash].stats?.all_activations?.bin_counts}
+                            <Sparkbars
+                                bins={clusterMap[item.clusterHash]!.stats!.all_activations!
+                                    .bin_counts as number[]}
+                                width={160}
+                                height={48}
+                                color="#4169E1"
+                            />
+                        {:else}
+                            <div class="hist-placeholder"></div>
+                        {/if}
+                    </div>
+                    <div class="cell col-hist">
+                        {#if clusterMap[item.clusterHash].stats?.max_activation_position?.bin_counts}
+                            <Sparkbars
+                                bins={clusterMap[item.clusterHash]!.stats!.max_activation_position!
+                                    .bin_counts as number[]}
+                                width={160}
+                                height={48}
+                                color="#DC143C"
+                            />
+                        {:else}
+                            <div class="hist-placeholder"></div>
+                        {/if}
+                    </div>
+                    <div class="cell col-tokens">
+                        {#if item.topTokens.length}
+                            <ul class="token-list">
+                                {#each item.topTokens as token, idx (idx)}
+                                    <li
+                                        style={`background:${tokenColor(token.count, item.maxTokenCount)};`}
+                                    >
+                                        <code>{token.token.replace(/\s/g, "·")}</code>
+                                        <span class="token-count">({token.count})</span>
+                                    </li>
+                                {/each}
+                            </ul>
+                        {:else}
+                            <span class="no-tokens">—</span>
+                        {/if}
+                    </div>
+                    <div class="cell col-actions">
+                        <button class="view-button" on:click={() => onView(item)}>View →</button>
+                    </div>
+                </div>
+            </VirtualList>
+        </div>
+    {/if}
+</div>
+
+<style>
+    .table-wrapper {
+        overflow: auto;
+    }
+
+    .model-info {
+        display: flex;
+        flex-direction: column;
+        padding: 8px 0 12px 0;
+        color: #555;
+    }
+
+    .model-info-label {
+        font-weight: 600;
+        margin-right: 0.35rem;
+        color: #333;
+    }
+
+    .model-info-value {
+        color: #343a40;
+    }
+
+    .list {
+        border: 1px solid #dee2e6;
+        border-radius: 6px;
+        overflow: hidden;
+        background: #fff;
+    }
+
+    .list :global(.virtual-viewport) {
+        max-height: 60vh;
+        overflow-y: auto;
+    }
+
+    .list :global(.virtual-content) {
+        width: 100%;
+    }
+
+    .list-header,
+    .list-row {
+        display: grid;
+        grid-template-columns: 70px 110px 220px 220px 220px 240px 120px;
+        column-gap: 1rem;
+        align-items: stretch;
+        padding: 0.75rem 1rem;
+    }
+
+    .list-header {
+        background: #f8f9fa;
+        border-bottom: 1px solid #dee2e6;
+        font-weight: 600;
+    }
+
+    .list-row {
+        min-height: 200px;
+        border-bottom: 1px solid #f1f3f5;
+    }
+
+    .list-row:hover {
+        background: #f9fafc;
+    }
+
+    .cell {
+        display: flex;
+        align-items: center;
+        gap: 0.5rem;
+        color: #333;
+    }
+
+    .cell.col-id {
+        font-weight: 600;
+    }
+
+    .cell.col-comps {
+        justify-content: flex-end;
+        font-variant-numeric: tabular-nums;
+    }
+
+    .cell.col-actions {
+        justify-content: flex-end;
+    }
+
+    .cell.col-model {
+        min-height: 160px;
+    }
+
+    .col-tokens {
+        min-width: 200px;
+    }
+
+    .token-list {
+        margin: 0;
+        padding-left: 0;
+        display: flex;
+        flex-direction: column;
+        gap: 0.4rem;
+    }
+
+    .token-list li {
+        list-style: none;
+        color: #333;
+        padding: 2px 6px;
+        border-radius: 4px;
+        font-variant-numeric: tabular-nums;
+    }
+
+    .token-list code {
+        font-family:
+            ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New",
+            monospace;
+        font-size: 12px;
+    }
+
+    .token-count {
+        margin-left: 0.35rem;
+        color: #666;
+        font-size: 12px;
+    }
+
+    .no-tokens {
+        color: #999;
+    }
+
+    .col-hist {
+        min-width: 200px;
+    }
+
+    .hist-placeholder {
+        width: 160px;
+        height: 48px;
+        background: #f1f3f5;
+        border: 1px dashed #dee2e6;
+        border-radius: 4px;
+    }
+
+    .view-button {
+        padding: 4px 8px;
+        border: 1px solid #dee2e6;
+        background: #fff;
+        border-radius: 4px;
+        cursor: pointer;
+    }
+
+    .view-button:hover {
+        background: #f8f9fa;
+    }
+
+    .th-btn {
+        font: inherit;
+        background: transparent;
+        border: none;
+        cursor: pointer;
+        padding: 0;
+        color: #333;
+    }
+    .th-btn:hover {
+        text-decoration: underline;
+    }
+
+    .detail-toolbar {
+        display: flex;
+        margin-bottom: 0.5rem;
+    }
+    .back-button {
+        padding: 4px 8px;
+        border: 1px solid #dee2e6;
+        background: #fff;
+        border-radius: 4px;
+        cursor: pointer;
+    }
+    .back-button:hover {
+        background: #f8f9fa;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/ClusterDashboardTab.svelte b/spd/app/frontend/src/lib/components/ClusterDashboardTab.svelte
new file mode 100644
index 00000000..628ad1dd
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ClusterDashboardTab.svelte
@@ -0,0 +1,157 @@
+<script lang="ts">
+    import { onDestroy, onMount } from "svelte";
+    import { getClusterDashboardData, type ClusterDashboardResponse } from "$lib/api";
+    import ClusterDashboardBody from "./ClusterDashboardBody.svelte";
+
+    export let iteration: number;
+
+    let loading = true;
+    let errorMsg: string | null = null;
+    let dashboard: ClusterDashboardResponse | null = null;
+
+    let nSamples = 16;
+    let nBatches = 2;
+    let batchSize = 64;
+    let contextLength = 64;
+
+    let pendingController: AbortController | null = null;
+
+    async function fetchDashboard() {
+        pendingController?.abort();
+        const controller = new AbortController();
+        pendingController = controller;
+
+        loading = true;
+        errorMsg = null;
+
+        try {
+            console.log("fetching dashboard");
+            dashboard = await getClusterDashboardData({
+                iteration,
+                n_samples: nSamples,
+                n_batches: nBatches,
+                batch_size: batchSize,
+                context_length: contextLength,
+                // signal: controller.signal
+            });
+        } catch (e: any) {
+            if (controller.signal.aborted) return;
+            errorMsg = e?.message ?? String(e);
+        } finally {
+            if (!controller.signal.aborted) {
+                loading = false;
+            }
+        }
+    }
+
+    onMount(() => {
+        fetchDashboard();
+    });
+
+    onDestroy(() => {
+        pendingController?.abort();
+        pendingController = null;
+    });
+
+    function refresh() {
+        fetchDashboard().catch((e) => (errorMsg = e?.message ?? String(e)));
+    }
+</script>
+
+<div class="tab-content">
+    <div class="toolbar">
+        <form class="toolbar-form" on:submit|preventDefault={refresh}>
+            <!-- <label>
+                Iteration
+                <input type="number" bind:value={iteration} />
+            </label> -->
+            <label>
+                Samples
+                <input type="number" min={1} bind:value={nSamples} />
+            </label>
+            <label>
+                Batches
+                <input type="number" min={1} bind:value={nBatches} />
+            </label>
+            <label>
+                Batch Size
+                <input type="number" min={1} bind:value={batchSize} />
+            </label>
+            <label>
+                Context
+                <input type="number" min={1} bind:value={contextLength} />
+            </label>
+            <button class="run-button" type="submit">Run</button>
+        </form>
+    </div>
+
+    {#if loading}
+        <div class="status">Loading...</div>
+    {:else if errorMsg}
+        <div class="status-error">{errorMsg}</div>
+    {:else if dashboard}
+        <ClusterDashboardBody {dashboard} />
+    {/if}
+</div>
+
+<style>
+    .tab-content {
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+        padding: 1rem;
+    }
+
+    .toolbar {
+        display: flex;
+        flex-wrap: wrap;
+        gap: 0.75rem;
+        align-items: flex-end;
+    }
+
+    .toolbar-form {
+        display: flex;
+        flex-wrap: wrap;
+        gap: 0.75rem;
+        align-items: flex-end;
+    }
+
+    .toolbar-form label {
+        display: flex;
+        flex-direction: column;
+        gap: 4px;
+        font-size: 0.85rem;
+        color: #555;
+    }
+
+    .toolbar-form input {
+        width: 90px;
+        padding: 4px 6px;
+        border: 1px solid #ced4da;
+        border-radius: 4px;
+        font-size: 0.85rem;
+    }
+
+    .run-button {
+        padding: 6px 12px;
+        border-radius: 4px;
+        border: 1px solid #0d6efd;
+        background: #0d6efd;
+        color: #fff;
+        cursor: pointer;
+        font-size: 0.9rem;
+    }
+
+    .run-button:hover {
+        background: #0b5ed7;
+        border-color: #0b5ed7;
+    }
+
+    .status {
+        color: #333;
+    }
+
+    .status-error {
+        color: #b00020;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/ClusterDetailNew.svelte b/spd/app/frontend/src/lib/components/ClusterDetailNew.svelte
new file mode 100644
index 00000000..88736a6b
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ClusterDetailNew.svelte
@@ -0,0 +1,195 @@
+<script lang="ts">
+    import Sparkbars from "$lib/components/Sparkbars.svelte";
+    import TokenHighlights from "$lib/components/TokenHighlights.svelte";
+    import type { ClusterDataDTO } from "$lib/api";
+    import MiniModelView from "./MiniModelView.svelte";
+
+    type ClusterExample = {
+        textHash: string;
+        rawText: string;
+        offsetMapping: [number, number][];
+        activations: number[];
+    };
+
+    export let cluster: ClusterDataDTO | null = null;
+    export let examples: ClusterExample[] = [];
+
+    $: histogramStats = (() => {
+        if (!cluster?.stats) return [] as string[];
+        const keys: string[] = [];
+        for (const [k, v] of Object.entries(cluster.stats)) {
+            if (v && typeof v === "object" && "bin_counts" in (v as any) && "bin_edges" in (v as any)) {
+                keys.push(k);
+            }
+        }
+        return keys;
+    })();
+
+    const statColors: Record<string, string> = {
+        'all_activations': '#4169E1',
+        'max_activation-max-16': '#DC143C',
+        'max_activation-max-32': '#DC143C',
+        'mean_activation-max-16': '#228B22',
+        'median_activation-max-16': '#FF8C00',
+        'min_activation-max-16': '#9370DB',
+        'max_activation_position': '#FF6347'
+    };
+</script>
+
+{#if !cluster}
+    <div class="status">No cluster selected.</div>
+{:else}
+    <div class="detail-container">
+        <div class="header">
+            <h3>Cluster {cluster.cluster_hash}</h3>
+            <div class="meta">Components: {cluster.components.length}</div>
+        </div>
+
+        <div class="section">
+            <h4>Components</h4>
+            <MiniModelView components={cluster.components} layerCount={4} />
+        </div>
+
+        {#if histogramStats.length}
+            <div class="section">
+                <h4>Histograms</h4>
+                <div class="hist-grid">
+                    {#each histogramStats as k}
+                        <div class="hist-item">
+                            <div class="hist-label">{k}</div>
+                            <Sparkbars bins={(cluster?.stats?.[k]?.bin_counts) ?? []} color={statColors[k] ?? '#808080'} />
+                        </div>
+                    {/each}
+                </div>
+            </div>
+        {/if}
+
+        {#if cluster.stats?.token_activations}
+            <div class="section">
+                <h4>Token Activations</h4>
+                <div class="token-stats">
+                    <div>Unique: {cluster.stats.token_activations.total_unique_tokens}</div>
+                    <div>Total: {cluster.stats.token_activations.total_activations}</div>
+                    <div>Entropy: {cluster.stats.token_activations.entropy?.toFixed?.(2)}</div>
+                    <div>Conc: {(cluster.stats.token_activations.concentration_ratio * 100).toFixed(1)}%</div>
+                </div>
+                {#if cluster.stats.token_activations.top_tokens?.length}
+                    <table class="components-table">
+                        <thead>
+                            <tr>
+                                <th>#</th>
+                                <th>Token</th>
+                                <th class="col-right">Count</th>
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {#each cluster.stats.token_activations.top_tokens.slice(0, 10) as item, i}
+                                <tr>
+                                    <td>{i + 1}</td>
+                                    <td><code class="token-code">{item.token.replace(/ /g, '·').replace(/\n/g, '↵')}</code></td>
+                                    <td class="col-right">{item.count}</td>
+                                </tr>
+                            {/each}
+                        </tbody>
+                    </table>
+                {/if}
+            </div>
+        {/if}
+
+        {#if examples.length}
+            <div class="section">
+                <h4>Activation Examples</h4>
+                <div class="examples-grid">
+                    {#each examples as example}
+                        <div class="example-card">
+                            <TokenHighlights
+                                rawText={example.rawText}
+                                offsetMapping={example.offsetMapping}
+                                tokenCiValues={example.activations}
+                                activePosition={-1}
+                            />
+                        </div>
+                    {/each}
+                </div>
+            </div>
+        {/if}
+    </div>
+{/if}
+
+<style>
+    .status {
+        color: #333;
+    }
+    .detail-container {
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+    }
+    .header {
+        display: flex;
+        align-items: baseline;
+        gap: 1rem;
+    }
+    .meta {
+        color: #6c757d;
+    }
+    .section h4 {
+        margin: 0 0 0.5rem 0;
+    }
+    .components-table {
+        width: 100%;
+        border-collapse: collapse;
+    }
+    .components-table th,
+    .components-table td {
+        padding: 8px;
+        border-bottom: 1px solid #ddd;
+        text-align: left;
+    }
+    .col-right {
+        text-align: right;
+    }
+    .hist-grid {
+        display: grid;
+        gap: 12px;
+        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
+    }
+    .hist-item {
+        background: #fff;
+        border: 1px solid #eee;
+        border-radius: 6px;
+        padding: 8px;
+    }
+    .hist-label {
+        font-size: 12px;
+        font-weight: 600;
+        color: #555;
+        margin-bottom: 6px;
+    }
+    .token-stats {
+        display: flex;
+        gap: 1rem;
+        color: #555;
+        margin-bottom: 0.5rem;
+    }
+    .token-code {
+        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
+        font-size: 12px;
+    }
+
+    .examples-grid {
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+    }
+
+    .example-card {
+        border: 1px solid #e9ecef;
+        border-radius: 6px;
+        padding: 0.75rem;
+        background: #fdfdfd;
+        font-family: monospace;
+        font-size: 14px;
+        line-height: 1.6;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/ComponentCard.svelte b/spd/app/frontend/src/lib/components/ComponentCard.svelte
new file mode 100644
index 00000000..e8334166
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ComponentCard.svelte
@@ -0,0 +1,251 @@
+<!-- svelte-ignore a11y_click_events_have_key_events -->
+<!-- svelte-ignore a11y_no_static_element_interactions -->
+<script lang="ts">
+    import type { CosineSimilarityData } from "$lib/api";
+    import * as api from "$lib/api";
+    import { ablationComponentMask } from "$lib/stores/componentState";
+    import { onMount } from "svelte";
+    import CosineSimilarityPlot from "./CosineSimilarityPlot.svelte";
+    import TokenHighlights from "./TokenHighlights.svelte";
+
+    type ComponentExample = {
+        textHash: string;
+        rawText: string;
+        offsetMapping: [number, number][];
+        activations: number[];
+    };
+
+    export let layer: string;
+    export let tokenIdx: number;
+    export let componentIdx: number;
+    export let componentAggCi: number;
+    export let subcomponentCis: number[];
+    export let toggle: () => void;
+    export let examples: ComponentExample[] = [];
+
+    $: isDisabled = (() => {
+        const layerMask = $ablationComponentMask[layer];
+        if (!layerMask || !layerMask[tokenIdx]) return false;
+        return layerMask[tokenIdx].includes(componentIdx);
+    })();
+
+    function getColorFromCI(ci: number): string {
+        const whiteAmount = Math.round((1 - ci) * 255);
+        return `rgb(${whiteAmount}, ${whiteAmount}, 255)`;
+    }
+
+    $: disabledComponentIndices = isDisabled ? [componentIdx] : [];
+
+    $: textColor = componentAggCi > 0.5 ? "#ffffff" : "#000000";
+
+    let similarityData: CosineSimilarityData | null = null;
+    let loading = false;
+    async function loadCosineSims() {
+        loading = true;
+        await new Promise((resolve) => setTimeout(resolve, componentIdx * 50));
+        similarityData = await api.getCosineSimilarities(layer, componentIdx);
+        loading = false;
+    }
+    onMount(loadCosineSims);
+</script>
+
+<div class="component-card-container" class:disabled={isDisabled} on:click={toggle}>
+    <div class="component-header-bar" style="background-color: {getColorFromCI(componentAggCi)}">
+        <span class="component-index" style="color: {textColor}">#{componentIdx}</span>
+        <span class="component-ci" style="color: {textColor}">{componentAggCi.toFixed(4)}</span>
+        <span class="component-rank" style="color: {textColor}">Rank {subcomponentCis.length}</span>
+    </div>
+
+    <div class="subcomponent-ci-strip">
+        {#each subcomponentCis as ci, idx}
+            <div
+                class="ci-cell"
+                style="background-color: {getColorFromCI(ci)}"
+                title="Subcomponent {idx}: CI = {ci.toFixed(4)}"
+            ></div>
+        {/each}
+    </div>
+
+    <div class="card-content">
+        <div class="activation-contexts-section">
+            <h4>Activation Examples</h4>
+            <div class="examples-container">
+                {#each examples as example}
+                    <div class="example-card">
+                        <TokenHighlights
+                            rawText={example.rawText}
+                            offsetMapping={example.offsetMapping}
+                            tokenCiValues={example.activations}
+                            activePosition={-1}
+                        />
+                    </div>
+                {/each}
+            </div>
+        </div>
+
+        {#if similarityData}
+            <div class="similarity-plots">
+                <h4>Pairwise Cosine Similarities</h4>
+                <div class="plots-container">
+                    <div class="plot-wrapper">
+                        <h5>Input</h5>
+                        <CosineSimilarityPlot
+                            data={similarityData.input_singular_vectors}
+                            indices={similarityData.component_indices}
+                            disabledIndices={disabledComponentIndices}
+                        />
+                    </div>
+                    <div class="plot-wrapper">
+                        <h5>Output</h5>
+                        <CosineSimilarityPlot
+                            data={similarityData.output_singular_vectors}
+                            indices={similarityData.component_indices}
+                            disabledIndices={disabledComponentIndices}
+                        />
+                    </div>
+                </div>
+            </div>
+        {:else}
+            <div class="loading-similarities">
+                <p>Loading...</p>
+            </div>
+        {/if}
+    </div>
+</div>
+
+<style>
+    .component-card-container {
+        display: flex;
+        flex-direction: column;
+        background-color: white;
+        border-radius: 8px;
+        cursor: pointer;
+        transition: all 0.2s ease;
+        border: 1px solid #e0e0e0;
+        position: relative;
+        /* min-width: 600px; */
+        width: 600px;
+        height: 800px;
+        overflow: hidden;
+        flex-shrink: 0;
+    }
+
+    .component-card-container:hover {
+        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
+        border-color: rgba(0, 0, 0, 0.2);
+    }
+
+    .component-card-container.disabled .component-header-bar {
+        background-color: #ff6b6b !important;
+    }
+
+    .component-header-bar {
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        padding: 0.75rem 1rem;
+        flex-shrink: 0;
+    }
+
+    .subcomponent-ci-strip {
+        display: flex;
+        height: 8px;
+        flex-shrink: 0;
+        border-bottom: 1px solid #e0e0e0;
+    }
+
+    .ci-cell {
+        flex: 1;
+        min-width: 2px;
+        /* cursor: help; */
+    }
+
+    .component-index {
+        font-weight: 600;
+        color: #1a1a1a;
+        font-size: 1rem;
+    }
+
+    .component-ci {
+        font-weight: 700;
+        color: #1a1a1a;
+        font-size: 0.9rem;
+        font-family: "Monaco", "Courier New", monospace;
+    }
+
+    .component-rank {
+        font-weight: 700;
+        color: #1a1a1a;
+        font-size: 0.9rem;
+        font-family: "Monaco", "Courier New", monospace;
+    }
+
+    .card-content {
+        display: flex;
+        flex-direction: column;
+        flex: 1;
+        overflow: hidden;
+    }
+
+    .activation-contexts-section {
+        flex: 1;
+        overflow-y: auto;
+        padding: 1rem;
+        border-bottom: 1px solid #e0e0e0;
+    }
+
+    .activation-contexts-section h4 {
+        margin: 0 0 0.75rem 0;
+        color: #333;
+        font-size: 0.9rem;
+        font-weight: 600;
+    }
+
+    .loading-similarities {
+        padding: 1rem;
+        text-align: center;
+        color: #666;
+        font-style: italic;
+        font-size: 0.85rem;
+    }
+
+    .similarity-plots {
+        padding: 1rem;
+        background: #f8f9fa;
+        flex-shrink: 0;
+    }
+
+    .similarity-plots h4 {
+        margin: 0 0 0.75rem 0;
+        color: #333;
+        font-size: 0.85rem;
+        font-weight: 600;
+    }
+
+    .plots-container {
+        display: flex;
+        gap: 1rem;
+    }
+
+    .plot-wrapper {
+        flex: 1;
+        min-width: 0;
+    }
+
+    .examples-container {
+        display: flex;
+        flex-direction: column;
+        gap: 0.75rem;
+        overflow-y: auto;
+    }
+
+    .example-card {
+        border: 1px solid #e9ecef;
+        border-radius: 4px;
+        padding: 0.5rem;
+        background: #fdfdfd;
+        font-family: monospace;
+        font-size: 13px;
+        line-height: 1.5;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/ComponentDetailModal.svelte b/spd/app/frontend/src/lib/components/ComponentDetailModal.svelte
new file mode 100644
index 00000000..05648cd4
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ComponentDetailModal.svelte
@@ -0,0 +1,317 @@
+<!-- <script context="module">
+</script> -->
+
+<script lang="ts">
+    type PopupData = {
+        token: string;
+        tokenIdx: number;
+        layerIdx: number;
+        layerName: string;
+        tokenCIs: MatrixCausalImportances;
+    };
+    import type { ClusterRunDTO, MatrixCausalImportances } from "$lib/api";
+
+    import * as api from "$lib/api";
+    import ComponentCard from "./ComponentCard.svelte";
+    import HorizontalVirtualList from "./HorizontalVirtualList.svelte";
+
+    export let onClose: () => void;
+    export let toggleComponent: (layerName: string, tokenIdx: number, componentIdx: number) => void;
+    export let isComponentDisabled: (
+        layerName: string,
+        tokenIdx: number,
+        componentIdx: number
+    ) => boolean;
+
+    export let cluster: ClusterRunDTO;
+    export let dashboard: api.ClusterDashboardResponse;
+    export let popupData: PopupData;
+
+    type ComponentItem = {
+        componentIdx: number;
+        subcomponentCis: number[];
+        componentAggCi: number;
+    };
+
+    $: componentItems = (() => {
+        const groups: number[][] =
+            cluster.clustering_shape.module_component_groups[popupData.layerName];
+        const componentItems = groups.map<ComponentItem>((subcomponent_group, componentIdx) => ({
+            componentIdx,
+            subcomponentCis: subcomponent_group.map(
+                (subcomponentIdx) => popupData.tokenCIs.subcomponent_cis[subcomponentIdx]
+            ),
+            componentAggCi: popupData.tokenCIs.component_agg_cis[componentIdx]
+        }));
+
+        componentItems.sort(
+            (a, b) =>
+                b.componentAggCi - a.componentAggCi ||
+                b.subcomponentCis.length - a.subcomponentCis.length
+        );
+
+        return componentItems;
+    })();
+
+    type ComponentExample = {
+        textHash: string;
+        rawText: string;
+        offsetMapping: [number, number][];
+        activations: number[];
+    };
+
+    // Build activation examples from dashboard data (like ClusterDashboardBody)
+    $: textSampleLookup = Object.fromEntries(
+        dashboard.text_samples.map((sample) => [
+            sample.text_hash,
+            { full_text: sample.full_text, tokens: sample.tokens }
+        ])
+    );
+
+    function buildOffsets(tokens: string[]): [number, number][] {
+        const offsets: [number, number][] = [];
+        let cursor = 0;
+        for (const token of tokens) {
+            offsets.push([cursor, cursor + token.length]);
+            cursor += token.length;
+        }
+        return offsets;
+    }
+
+    function normalizeActivations(values: number[], length: number): number[] {
+        if (!values.length) return new Array(length).fill(0);
+        const slice = values.slice(0, length);
+        const max = Math.max(...slice.map((v) => Math.max(v, 0)), 1e-6);
+        return slice.map((v) => Math.max(v, 0) / max);
+    }
+
+    // Map from componentIdx to cluster
+    $: componentToClusterMap = new Map(
+        dashboard.clusters.flatMap((cluster) =>
+            cluster.components.map((comp) => [comp.index, cluster.cluster_hash])
+        )
+    );
+
+    function buildExamplesForComponent(componentIdx: number): ComponentExample[] {
+        const clusterHash = componentToClusterMap.get(componentIdx);
+        if (!clusterHash) return [];
+
+        const cluster = dashboard.clusters.find((c) => c.cluster_hash === clusterHash);
+        if (!cluster?.criterion_samples?.["max_activation-max-16"]) return [];
+
+        const hashes = cluster.criterion_samples["max_activation-max-16"];
+        const activations = dashboard.activation_batch.activations;
+
+        const examples: ComponentExample[] = [];
+        for (const textHash of hashes.slice(0, 5)) {
+            const activationHash = `${clusterHash}:${textHash}`;
+            const idx = dashboard.activations_map[activationHash];
+            if (typeof idx !== "number") continue;
+
+            const sample = textSampleLookup[textHash];
+            if (!sample?.tokens) continue;
+
+            const activationValues = activations[idx];
+            if (!activationValues || sample.tokens.length !== activationValues.length) continue;
+            if (sample.tokens.length === 0) continue;
+
+            const rawText = sample.tokens.join("");
+            const offsets = buildOffsets(sample.tokens);
+            const normalized = normalizeActivations(activationValues, offsets.length);
+
+            examples.push({
+                textHash,
+                rawText,
+                offsetMapping: offsets,
+                activations: normalized
+            });
+        }
+
+        return examples;
+    }
+
+    $: activationContextsMap = new Map(
+        componentItems.map((item) => [
+            item.componentIdx,
+            buildExamplesForComponent(item.componentIdx)
+        ])
+    );
+
+    function getAllComponentIndices(): number[] {
+        // this is a little silly lol
+        return cluster.clustering_shape.module_component_assignments[popupData.layerName].map(
+            (_, idx) => idx
+        );
+    }
+
+    function areAllComponentsDisabled(): boolean {
+        if (!popupData) return false;
+        const allIndices = getAllComponentIndices();
+        return allIndices.every((idx) =>
+            isComponentDisabled(popupData.layerName, popupData.tokenIdx, idx)
+        );
+    }
+
+    function toggleAllComponents() {
+        if (!popupData) return;
+        const allIndices = getAllComponentIndices();
+        const shouldDisable = !areAllComponentsDisabled();
+
+        for (const componentIdx of allIndices) {
+            const isCurrentlyDisabled = isComponentDisabled(
+                popupData.layerName,
+                popupData.tokenIdx,
+                componentIdx
+            );
+            if (
+                (shouldDisable && !isCurrentlyDisabled) ||
+                (!shouldDisable && isCurrentlyDisabled)
+            ) {
+                toggleComponent(popupData.layerName, popupData.tokenIdx, componentIdx);
+            }
+        }
+    }
+</script>
+
+{#if popupData}
+    <!-- svelte-ignore a11y_click_events_have_key_events -->
+    <!-- svelte-ignore a11y_no_static_element_interactions -->
+    <div class="popup-overlay" on:click={onClose}>
+        <div class="popup-modal" on:click|stopPropagation>
+            <div class="popup-content">
+                <div class="popup-info">
+                    <p>
+                        <strong>Token:</strong> "{popupData.token}" (position {popupData.tokenIdx})
+                    </p>
+                    <p><strong>Layer:</strong> {popupData.layerName}</p>
+                    <p>
+                        <strong>Subcomponents L0:</strong>
+                        {popupData.tokenCIs.subcomponent_cis_sparse.l0}
+                    </p>
+                    <p>
+                        <strong>Total Components:</strong>
+                        {componentItems.length}
+                    </p>
+                    <p>
+                        <strong>Component L0:</strong>
+                        {popupData.tokenCIs.component_agg_cis.reduce(
+                            (acc, val) => acc + (val > 0.0 ? 1 : 0),
+                            0
+                        )}
+                    </p>
+                </div>
+                <div class="components-section">
+                    <div class="section-header">
+                        <h4>Components</h4>
+                        <label class="select-all-label">
+                            <input
+                                type="checkbox"
+                                checked={areAllComponentsDisabled()}
+                                on:change={toggleAllComponents}
+                            />
+                            Ablate All
+                        </label>
+                    </div>
+                    <div class="components-grid-container">
+                        <HorizontalVirtualList
+                            items={componentItems}
+                            itemWidth={616}
+                            buffer={2}
+                            getKey={(item) => item.componentIdx}
+                            let:item
+                        >
+                            <ComponentCard
+                                componentIdx={item.componentIdx}
+                                subcomponentCis={item.subcomponentCis}
+                                componentAggCi={item.componentAggCi}
+                                layer={popupData.layerName}
+                                tokenIdx={popupData.tokenIdx}
+                                examples={activationContextsMap.get(item.componentIdx)}
+                                toggle={() => {
+                                    toggleComponent(
+                                        popupData.layerName,
+                                        popupData.tokenIdx,
+                                        item.componentIdx
+                                    );
+                                }}
+                            />
+                        </HorizontalVirtualList>
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+{/if}
+
+<style>
+    .popup-overlay {
+        position: fixed;
+        top: 0;
+        left: 0;
+        width: 100%;
+        height: 100%;
+        background-color: rgba(0, 0, 0, 0.5);
+        display: flex;
+        justify-content: center;
+        align-items: center;
+        z-index: 1000;
+    }
+
+    .popup-modal {
+        background: white;
+        border-radius: 8px;
+        padding: 1.5rem;
+        max-height: 80vh;
+        width: 90%;
+        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
+        overflow-y: auto;
+    }
+
+    .popup-content {
+        display: flex;
+        flex-direction: column;
+        gap: 1.5rem;
+    }
+
+    .popup-info {
+        padding: 1rem;
+        background-color: #f8f9fa;
+        border-radius: 4px;
+    }
+
+    .popup-info p {
+        margin: 0.5rem 0;
+        color: #555;
+    }
+
+    .section-header {
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        margin-bottom: 1rem;
+    }
+
+    .section-header h4 {
+        margin: 0;
+        color: #333;
+    }
+
+    .select-all-label {
+        display: flex;
+        align-items: center;
+        gap: 0.5rem;
+        font-size: 0.9rem;
+        color: #333;
+        cursor: pointer;
+    }
+
+    .select-all-label input[type="checkbox"] {
+        cursor: pointer;
+    }
+
+    .components-grid-container {
+        border: 1px solid #e0e0e0;
+        border-radius: 6px;
+        background: #fafafa;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/ComponentHeatmap.svelte b/spd/app/frontend/src/lib/components/ComponentHeatmap.svelte
new file mode 100644
index 00000000..3cc07427
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/ComponentHeatmap.svelte
@@ -0,0 +1,251 @@
+<script lang="ts">
+    import type { LayerCIs, MatrixCausalImportances } from "$lib/api";
+    import {
+        ablationComponentMask,
+        multiSelectMode,
+        selectedTokensForCombining
+    } from "$lib/stores/componentState";
+    import { createEventDispatcher } from "svelte";
+    import MaskCombinePanel from "./MaskCombinePanel.svelte";
+
+    const dispatch = createEventDispatcher();
+
+    export let result: { layer_cis: LayerCIs[]; prompt_tokens: string[] };
+    export let promptId: string;
+    export let onCellPopop: (
+        token: string,
+        tokenIdx: number,
+        layerIdx: number,
+        layerName: string,
+        tokenCIs: MatrixCausalImportances
+    ) => void;
+
+    function handleMaskCreated() {
+        dispatch("maskCreated");
+    }
+
+    function handleCellClick(
+        token: string,
+        tokenIdx: number,
+        layerIdx: number,
+        layerCIs: LayerCIs
+    ) {
+        if ($multiSelectMode) {
+            const existingIndex = $selectedTokensForCombining.findIndex(
+                (t) => t.layer === layerCIs.module && t.tokenIdx === tokenIdx
+            );
+
+            if (existingIndex >= 0) {
+                // Remove if already selected
+                $selectedTokensForCombining = $selectedTokensForCombining.filter(
+                    (_, idx) => idx !== existingIndex
+                );
+            } else {
+                // Add to selection
+                $selectedTokensForCombining = [
+                    ...$selectedTokensForCombining,
+                    { layer: layerCIs.module, tokenIdx, token }
+                ];
+            }
+        } else {
+            // Normal click behavior - open popup
+            onCellPopop(token, tokenIdx, layerIdx, layerCIs.module, layerCIs.token_cis[tokenIdx]);
+        }
+    }
+
+    function isTokenSelected(layer: string, tokenIdx: number): boolean {
+        return $selectedTokensForCombining.some(
+            (t) => t.layer === layer && t.tokenIdx === tokenIdx
+        );
+    }
+
+    let globalMax = Math.max(
+        ...result.layer_cis.flatMap((layer) =>
+            layer.token_cis.map((tokenCIs) => tokenCIs.subcomponent_cis_sparse.l0)
+        )
+    );
+
+    $: layer_cis = result.layer_cis.toReversed();
+
+    // Make this reactive so it updates when $runAblation changes
+    $: getColorFroml0 = (l0: number, layerName: string, tokenIdx: number): string => {
+        const intensity = Math.max(0, Math.min(1, l0 / globalMax));
+        const disabledComponents = $ablationComponentMask[layerName]?.[tokenIdx]?.length ?? 0;
+        const totalComponents = l0;
+        const disabledRatio = totalComponents > 0 ? disabledComponents / totalComponents : 0;
+
+        const whiteAmount = Math.round((1 - intensity) * 255);
+        const baseColor = `rgb(${whiteAmount}, ${whiteAmount}, 255)`;
+
+        if (disabledRatio === 0) {
+            return baseColor;
+        }
+
+        const disabledPercent = Math.round(disabledRatio * 100);
+        return `linear-gradient(to right, #ff4444 0%, #ff4444 ${disabledPercent}%, ${baseColor} ${disabledPercent}%, ${baseColor} 100%)`;
+    };
+</script>
+
+<div class="heatmap-container">
+    <MaskCombinePanel {promptId} on:maskCreated={handleMaskCreated} />
+    <div class="heatmap-container-horiz">
+        <div class="layer-labels">
+            <div class="layer-label-spacer"></div>
+            {#each layer_cis as layer}
+                <div class="layer-label">{layer.module}</div>
+            {/each}
+        </div>
+
+        <div class="heatmap-scroll-area">
+            <div class="heatmap-grid">
+                {#each layer_cis as layer, layerIdx}
+                    <div class="heatmap-row">
+                        {#each result.prompt_tokens as token, tokenIdx}
+                            <!-- svelte-ignore a11y_click_events_have_key_events -->
+                            <!-- svelte-ignore a11y_no_static_element_interactions -->
+                            <div
+                                class="heatmap-cell"
+                                class:selected={isTokenSelected(layer.module, tokenIdx)}
+                                class:multi-select-mode={$multiSelectMode}
+                                style="background: {getColorFroml0(
+                                    layer.token_cis[tokenIdx].subcomponent_cis_sparse.l0,
+                                    layer.module,
+                                    tokenIdx
+                                )}"
+                                title="L0={layer.token_cis[tokenIdx].subcomponent_cis_sparse.l0}"
+                                on:click={() => handleCellClick(token, tokenIdx, layerIdx, layer)}
+                            ></div>
+                        {/each}
+                    </div>
+                {/each}
+
+                <div class="token-labels">
+                    {#each result.prompt_tokens as token}
+                        <div class="token-label">{token}</div>
+                    {/each}
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+
+<style>
+    .heatmap-container {
+        display: flex;
+        flex-direction: column;
+        border: 1px solid #ddd;
+        border-radius: 6px;
+        padding: 1rem;
+        background-color: #fafafa;
+    }
+
+    .heatmap-container-horiz {
+        flex: 1;
+        display: flex;
+    }
+
+    .layer-labels {
+        display: flex;
+        flex-direction: column;
+        margin-right: 0.5rem;
+        flex-shrink: 0;
+    }
+
+    .layer-label-spacer {
+        height: 40px;
+        order: 999;
+    }
+
+    .layer-label {
+        height: 20px;
+        display: flex;
+        align-items: center;
+        justify-content: flex-end;
+        padding-right: 0.5rem;
+        font-size: 0.9rem;
+        font-weight: bold;
+        color: #555;
+        min-width: 100px;
+        margin-bottom: 2px;
+    }
+
+    .heatmap-scroll-area {
+        flex: 1;
+        overflow-x: auto;
+    }
+
+    .heatmap-grid {
+        display: flex;
+        flex-direction: column;
+        min-width: fit-content;
+    }
+
+    .heatmap-row {
+        display: flex;
+        margin-bottom: 2px;
+    }
+
+    .heatmap-cell {
+        width: 50px;
+        height: 20px;
+        border: 1px solid #fff;
+        cursor: pointer;
+        transition: transform 0.1s ease;
+    }
+
+    .heatmap-cell:hover {
+        border: 2px solid #241d8c;
+        z-index: 10;
+        position: relative;
+    }
+
+    /* Multi-select mode styling */
+    .heatmap-cell.multi-select-mode {
+        cursor: pointer;
+    }
+
+    .heatmap-cell.multi-select-mode:hover {
+        border: 2px solid #4caf50;
+        box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
+    }
+
+    /* Selected cell styling */
+    .heatmap-cell.selected {
+        border: 3px solid #4caf50 !important;
+        box-shadow: 0 0 8px rgba(76, 175, 80, 0.7);
+        position: relative;
+        z-index: 5;
+    }
+
+    .heatmap-cell.selected::after {
+        content: "✓";
+        position: absolute;
+        top: 50%;
+        left: 50%;
+        transform: translate(-50%, -50%);
+        color: white;
+        font-size: 14px;
+        font-weight: bold;
+        text-shadow: 0 0 3px rgba(0, 0, 0, 0.7);
+    }
+
+    .token-labels {
+        display: flex;
+        height: 40px;
+        margin-bottom: 2px;
+    }
+
+    .token-label {
+        width: 50px;
+        display: flex;
+        align-items: center;
+        justify-content: center;
+        font-size: 0.8rem;
+        font-weight: bold;
+        color: #333;
+        text-align: center;
+        padding: 0 2px;
+        word-break: break-all;
+        border-right: 1px solid #eee;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/CosineSimilarityPlot.svelte b/spd/app/frontend/src/lib/components/CosineSimilarityPlot.svelte
new file mode 100644
index 00000000..ff8430bc
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/CosineSimilarityPlot.svelte
@@ -0,0 +1,72 @@
+<script lang="ts">
+    export let data: number[][];
+    export let indices: number[];
+    export let disabledIndices: number[] = [];
+
+    function isDisabled(i: number, j: number): boolean {
+        // Check if either row or column corresponds to a disabled component
+        return disabledIndices.includes(indices[i]) || disabledIndices.includes(indices[j]);
+    }
+
+    // Make color calculation reactive to disabledIndices changes
+    $: getHeatmapColor = (value: number, i: number, j: number): string => {
+        // If disabled, return soft gray
+        if (disabledIndices.includes(indices[i]) || disabledIndices.includes(indices[j])) {
+            return "#f0f0f0";
+        }
+
+        // Clamp between 0 and 1
+        const v = Math.max(0, Math.min(1, value));
+
+        // Linear gradient: white (0) -> blue (1)
+        const whiteAmount = Math.round(255 * (1 - v));
+        return `rgb(${whiteAmount}, ${whiteAmount}, 255)`;
+    };
+</script>
+
+<div class="heatmap-wrapper">
+    <div class="heatmap">
+        {#each data as row, i}
+            <div class="heatmap-row">
+                {#each row as value, j}
+                    <!-- svelte-ignore a11y_no_static_element_interactions -->
+                    <!-- svelte-ignore a11y_click_events_have_key_events -->
+                    <div
+                        class="heatmap-cell"
+                        class:disabled={isDisabled(i, j)}
+                        style="background-color: {getHeatmapColor(value, i, j)};"
+                        title="Components {indices[i]} × {indices[j]}: {value.toFixed(
+                            3
+                        )}{isDisabled(i, j) ? ' (disabled)' : ''}"
+                    ></div>
+                {/each}
+            </div>
+        {/each}
+    </div>
+</div>
+
+<style>
+    .heatmap-wrapper {
+        width: 100%;
+        aspect-ratio: 1;
+        border: 1px solid #dee2e6;
+        border-radius: 4px;
+    }
+
+    .heatmap {
+        display: flex;
+        gap: 0;
+        flex-direction: column;
+        width: 100%;
+        height: 100%;
+    }
+
+    .heatmap-row {
+        display: flex;
+        flex: 1;
+    }
+
+    .heatmap-cell {
+        flex: 1;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/DisabledComponentsPanel.svelte b/spd/app/frontend/src/lib/components/DisabledComponentsPanel.svelte
new file mode 100644
index 00000000..8fe40d4f
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/DisabledComponentsPanel.svelte
@@ -0,0 +1,152 @@
+<!-- svelte-ignore a11y_click_events_have_key_events -->
+<!-- svelte-ignore a11y_no_static_element_interactions -->
+<script lang="ts">
+    import { ablationComponentMask } from "$lib/stores/componentState";
+
+    export let promptTokens: string[];
+    export let isLoading: boolean;
+    export let onSendAblation: () => void;
+    export let onToggleComponent: (layerName: string, tokenIdx: number, componentIdx: number) => void;
+
+    $: hasDisabledComponents = Object.keys($ablationComponentMask).some((layer) =>
+        $ablationComponentMask[layer].some((tokenList) => tokenList.length > 0)
+    );
+</script>
+
+<div class="disabled-components-panel">
+    <div class="disabled-header-row">
+        <h3>Disabled Components</h3>
+        <button
+            on:click={onSendAblation}
+            disabled={isLoading}
+            class="ablate-button"
+        >
+            {isLoading ? "Sending..." : "Run with ablations"}
+        </button>
+    </div>
+    {#if hasDisabledComponents}
+        <div class="disabled-list">
+            {#each Object.entries($ablationComponentMask) as [layerName, tokenArrays]}
+                {#each tokenArrays as disabledComponents, tokenIdx}
+                    {#if disabledComponents.length > 0}
+                        <div class="disabled-group">
+                            <div class="disabled-header">
+                                <strong>{promptTokens[tokenIdx]}</strong>
+                                in
+                                <em>{layerName}</em>
+                            </div>
+                            <div class="disabled-items">
+                                {#each disabledComponents as componentIdx}
+                                    <span
+                                        class="disabled-chip"
+                                        on:click={() =>
+                                            onToggleComponent(
+                                                layerName,
+                                                tokenIdx,
+                                                componentIdx
+                                            )}
+                                    >
+                                        {componentIdx} ×
+                                    </span>
+                                {/each}
+                            </div>
+                        </div>
+                    {/if}
+                {/each}
+            {/each}
+        </div>
+    {:else}
+        <p class="no-disabled">No components disabled yet</p>
+    {/if}
+</div>
+
+<style>
+    .disabled-components-panel {
+        flex: 0 0 300px;
+        padding: 1rem;
+        border: 1px solid #ddd;
+        border-radius: 4px;
+        background-color: #f8f9fa;
+        margin-top: 1rem;
+        /* max-height: 500px; */
+        /* overflow-y: auto; */
+    }
+
+    .disabled-header-row {
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        margin-bottom: 1rem;
+    }
+
+    .disabled-components-panel h3 {
+        margin: 0;
+        color: #333;
+        font-size: 1.1rem;
+    }
+
+    .ablate-button {
+        background-color: #ff6b35;
+        padding: 0.5rem 1rem;
+        color: white;
+        border: none;
+        border-radius: 4px;
+        cursor: pointer;
+        font-size: 0.9rem;
+    }
+
+    .ablate-button:hover:not(:disabled) {
+        background-color: #e55a2b;
+    }
+
+    .ablate-button:disabled {
+        background-color: #cccccc;
+        cursor: not-allowed;
+    }
+
+    .disabled-list {
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+    }
+
+    .disabled-group {
+        background: white;
+        padding: 0.75rem;
+        border-radius: 4px;
+        border: 1px solid #e0e0e0;
+    }
+
+    .disabled-header {
+        margin-bottom: 0.5rem;
+        font-size: 0.9rem;
+        color: #555;
+    }
+
+    .disabled-items {
+        display: flex;
+        flex-wrap: wrap;
+        gap: 0.25rem;
+    }
+
+    .disabled-chip {
+        background: #ff6b6b;
+        color: white;
+        padding: 0.2rem 0.4rem;
+        border-radius: 12px;
+        font-size: 0.8rem;
+        cursor: pointer;
+        transition: background-color 0.2s;
+    }
+
+    .disabled-chip:hover {
+        background: #ff5252;
+    }
+
+    .no-disabled {
+        color: #999;
+        font-style: italic;
+        margin: 0;
+        text-align: center;
+    }
+</style>
\ No newline at end of file
diff --git a/spd/app/frontend/src/lib/components/HorizontalVirtualList.svelte b/spd/app/frontend/src/lib/components/HorizontalVirtualList.svelte
new file mode 100644
index 00000000..02c24871
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/HorizontalVirtualList.svelte
@@ -0,0 +1,60 @@
+<script lang="ts">
+    export let items: any[] = [];
+    export let itemWidth = 600;
+    export let buffer = 3;
+    export let getKey: (item: any, index: number) => string | number = (_item, index) => index;
+
+    let viewportWidth = 0;
+    let scrollLeft = 0;
+
+    $: totalWidth = items.length * itemWidth;
+    $: startIndex = Math.max(0, Math.floor(scrollLeft / itemWidth) - buffer);
+    $: endIndex = Math.min(
+        items.length,
+        Math.ceil((scrollLeft + (viewportWidth || itemWidth * 3)) / itemWidth) + buffer,
+    );
+    $: visible = items.slice(startIndex, endIndex);
+    $: offsetLeft = startIndex * itemWidth;
+
+    $: console.log('HVL:', { total: items.length, visible: visible.length, startIndex, endIndex });
+</script>
+
+<div class="asdf_container">
+    <div
+        class="scroller"
+        bind:clientWidth={viewportWidth}
+        on:scroll={(e) => (scrollLeft = e.currentTarget.scrollLeft)}
+    >
+        <div class="spacer" style:width="{totalWidth}px">
+            <div class="content" style:margin-left="{offsetLeft}px">
+                {#each visible as item, localIndex (getKey(item, startIndex + localIndex))}
+                    <slot item={item} index={startIndex + localIndex}></slot>
+                {/each}
+            </div>
+        </div>
+    </div>
+</div>
+
+<style>
+    .asdf_container {
+        width: 100%;
+        height: 100%;
+    }
+
+    .scroller {
+        overflow-x: auto;
+        height: 100%;
+    }
+
+    .spacer {
+        margin: 1rem;
+        height: 100%;
+        position: relative;
+    }
+
+    .content {
+        display: flex;
+        gap: 1rem;
+        height: fit-content;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/InterventionsTab.svelte b/spd/app/frontend/src/lib/components/InterventionsTab.svelte
new file mode 100644
index 00000000..f16eb9b1
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/InterventionsTab.svelte
@@ -0,0 +1,661 @@
+<!-- svelte-ignore a11y_click_events_have_key_events -->
+<!-- svelte-ignore a11y_no_static_element_interactions -->
+<script lang="ts">
+    import { onMount } from "svelte";
+    import * as api from "$lib/api";
+    import type {
+        RunPromptResponse,
+        ComponentMask,
+        MatrixCausalImportances,
+        AvailablePrompt,
+        ClusterDashboardResponse
+    } from "$lib/api";
+    import {
+        ablationComponentMask,
+        ablationResults,
+        promptWorkspaces,
+        currentWorkspaceIndex,
+        type PromptWorkspace
+    } from "$lib/stores/componentState";
+
+    import ComponentHeatmap from "$lib/components/ComponentHeatmap.svelte";
+    import DisabledComponentsPanel from "$lib/components/DisabledComponentsPanel.svelte";
+    // import ComponentDetailModal, {
+    //     type PopupData
+    // } from "$lib/components/ComponentDetailModal.svelte";
+    import OriginalPredictions from "$lib/components/OriginalPredictions.svelte";
+    import AblationPredictions from "$lib/components/AblationPredictions.svelte";
+    import SavedMasksPanel from "$lib/components/SavedMasksPanel.svelte";
+
+    export let cluster_run: api.ClusterRunDTO;
+    export let iteration: number;
+
+    let isLoading = false;
+    let result: RunPromptResponse | null = null;
+    let currentPromptId: string | null = null;
+    let savedMasksPanel: SavedMasksPanel;
+    let availablePrompts: AvailablePrompt[] | null = null;
+    let showAvailablePrompts = false;
+    let currentAblationPage = 0;
+    type PopupData = {
+        token: string;
+        tokenIdx: number;
+        layerIdx: number;
+        layerName: string;
+        tokenCIs: MatrixCausalImportances;
+    };
+
+    let popupData: PopupData | null = null;
+    let dashboard: ClusterDashboardResponse | null = null;
+
+    async function loadAvailablePrompts() {
+        try {
+            availablePrompts = await api.getAvailablePrompts();
+        } catch (error: any) {
+            console.error("Failed to load prompts:", error.message);
+        }
+    }
+
+    async function loadDashboard() {
+        dashboard = await api.getClusterDashboardData({
+            iteration,
+            n_samples: 16,
+            n_batches: 2,
+            batch_size: 64,
+            context_length: 64
+        });
+    }
+
+    function toggleAvailablePrompts() {
+        showAvailablePrompts = !showAvailablePrompts;
+    }
+
+    // Helper functions for workspace management
+    function createNewWorkspace(promptData: RunPromptResponse): PromptWorkspace {
+        const newMask: ComponentMask = {};
+        for (const layer of promptData.layer_cis) {
+            newMask[layer.module] = promptData.prompt_tokens.map(() => []);
+        }
+
+        return {
+            promptId: promptData.prompt_id,
+            promptData,
+            ablationResults: [],
+            runAblation: newMask
+        };
+    }
+
+    function switchToWorkspace(index: number) {
+        if (index >= 0 && index < $promptWorkspaces.length) {
+            $currentWorkspaceIndex = index;
+            const workspace = $promptWorkspaces[index];
+            result = workspace.promptData;
+            currentPromptId = workspace.promptId;
+            $ablationComponentMask = workspace.runAblation;
+            $ablationResults = workspace.ablationResults;
+        }
+    }
+
+    function closeWorkspace(index: number) {
+        $promptWorkspaces = $promptWorkspaces.filter((_, i) => i !== index);
+
+        if ($promptWorkspaces.length === 0) {
+            // No workspaces left
+            result = null;
+            currentPromptId = null;
+            $currentWorkspaceIndex = 0;
+        } else if (index <= $currentWorkspaceIndex) {
+            // Adjust current index if necessary
+            const newIndex = Math.max(0, $currentWorkspaceIndex - 1);
+            $currentWorkspaceIndex = newIndex;
+            switchToWorkspace(newIndex);
+        }
+    }
+
+    async function runPromptByIndex(datasetIndex: number) {
+        isLoading = true;
+        try {
+            const promptData = await api.runPromptByIndex(datasetIndex);
+            const newWorkspace = createNewWorkspace(promptData);
+
+            // Add new workspace and switch to it
+            $promptWorkspaces = [...$promptWorkspaces, newWorkspace];
+            $currentWorkspaceIndex = $promptWorkspaces.length - 1;
+            switchToWorkspace($currentWorkspaceIndex);
+        } catch (error: any) {
+            console.error(`Error: ${error.message}`);
+        }
+        isLoading = false;
+    }
+
+    async function applyMaskAsAblation(maskId: string) {
+        if (!result || !currentPromptId) return;
+
+        isLoading = true;
+        try {
+            const maskResult = await api.applyMaskAsAblation(currentPromptId, maskId);
+
+            // Get mask info for display
+            const masks = await api.getMaskOverrides();
+            const appliedMask = masks.find((m) => m.id === maskId);
+
+            // Add as an ablation result with description
+            $ablationResults = [
+                ...$ablationResults,
+                {
+                    tokenLogits: maskResult.token_logits,
+                    applied_mask: {}, // The mask was applied uniformly to all tokens
+                    id: Date.now(),
+                    maskOverride: appliedMask, // Store mask info for display
+                    ablationStats: maskResult.ablation_stats
+                }
+            ];
+        } catch (error: any) {
+            console.error(`Error: ${error.message}`);
+        }
+        isLoading = false;
+    }
+
+    // Refresh saved masks after creating a new one
+    export function refreshSavedMasks() {
+        if (savedMasksPanel) {
+            savedMasksPanel.loadMasks();
+        }
+    }
+
+    function initializeRunAblation() {
+        if (!result) return;
+        const newMask: ComponentMask = {};
+        for (const layer of result.layer_cis) {
+            newMask[layer.module] = result.prompt_tokens.map(() => []);
+        }
+        $ablationComponentMask = newMask;
+    }
+
+    function toggleComponentDisabled(layerName: string, tokenIdx: number, componentIdx: number) {
+        if (!$ablationComponentMask[layerName]) {
+            $ablationComponentMask[layerName] = result!.prompt_tokens.map(() => []);
+        }
+
+        const disabledComponents = $ablationComponentMask[layerName][tokenIdx]; const existingIdx = disabledComponents.indexOf(componentIdx);
+
+        if (existingIdx === -1) {
+            disabledComponents.push(componentIdx);
+        } else {
+            disabledComponents.splice(existingIdx, 1);
+        }
+
+        $ablationComponentMask = { ...$ablationComponentMask };
+    }
+
+    function isComponentDisabled(
+        layerName: string,
+        tokenIdx: number,
+        componentIdx: number
+    ): boolean {
+        return $ablationComponentMask[layerName][tokenIdx].includes(componentIdx);
+    }
+
+    async function sendAblation() {
+        if (!result || !currentPromptId) return;
+
+        isLoading = true;
+        try {
+            const data = await api.ablateComponents(currentPromptId, $ablationComponentMask);
+
+            const deepCopyMask: ComponentMask = {};
+            for (const [layerName, tokenArrays] of Object.entries($ablationComponentMask)) {
+                deepCopyMask[layerName] = tokenArrays.map((tokenMask) => [...tokenMask]);
+            }
+
+            $ablationResults = [
+                ...$ablationResults,
+                {
+                    tokenLogits: data.token_logits,
+                    applied_mask: deepCopyMask,
+                    id: Date.now(),
+                    ablationStats: data.ablation_stats
+                }
+            ];
+        } catch (error: any) {
+            console.error(`Error: ${error.message}`);
+        }
+        isLoading = false;
+    }
+
+    async function runRandomPrompt() {
+        if (!availablePrompts) {
+            console.error("No prompts available");
+            return;
+        }
+        runPromptByIndex(Math.floor(Math.random() * availablePrompts.length));
+    }
+
+    function openPopup(
+        token: string,
+        tokenIdx: number,
+        layerIdx: number,
+        layerName: string,
+        tokenCIs: MatrixCausalImportances
+    ) {
+        popupData = { token, tokenIdx, layerIdx, layerName, tokenCIs };
+    }
+
+    function closePopup() {
+        popupData = null;
+    }
+
+    $: if (result) {
+        initializeRunAblation();
+    }
+
+    onMount(() => {
+        loadAvailablePrompts();
+        loadDashboard();
+    });
+</script>
+
+<div class="tab-content">
+    <SavedMasksPanel bind:this={savedMasksPanel} onApplyMask={applyMaskAsAblation} />
+    <div class="workspace-navigation">
+        <div class="workspace-header">
+            <h3>Prompt Workspaces</h3>
+            {#if showAvailablePrompts}
+                <button class="add-prompt-btn" on:click={toggleAvailablePrompts}>Cancel</button>
+            {:else}
+                <button class="add-prompt-btn" on:click={runRandomPrompt}>+ Random Prompt</button>
+                <button class="add-prompt-btn" on:click={toggleAvailablePrompts}
+                    >+ Add Prompt</button
+                >
+            {/if}
+        </div>
+
+        {#if showAvailablePrompts}
+            <div class="available-prompts-dropdown">
+                {#if availablePrompts == null}
+                    <p>Loading prompts...</p>
+                {:else}
+                    <div class="prompt-list">
+                        {#each availablePrompts as prompt, i}
+                            <button
+                                class="prompt-button"
+                                on:click={() => {
+                                    runPromptByIndex(prompt.index);
+                                    showAvailablePrompts = false;
+                                }}
+                                disabled={isLoading}
+                            >
+                                <span class="prompt-number">#{i + 1}</span>
+                                <span class="prompt-text"
+                                    >{prompt.full_text.slice(0, 40)}{prompt.full_text.length > 40
+                                        ? "..."
+                                        : ""}</span
+                                >
+                            </button>
+                        {/each}
+                    </div>
+                {/if}
+            </div>
+        {/if}
+
+        {#if $promptWorkspaces.length > 0}
+            <div class="workspace-list">
+                {#each $promptWorkspaces as workspace, i}
+                    <button
+                        class="workspace-item"
+                        class:active={i === $currentWorkspaceIndex}
+                        on:click={() => switchToWorkspace(i)}
+                    >
+                        <span class="workspace-number">#{i + 1}</span>
+                        <span class="workspace-text">
+                            {workspace.promptData.prompt_tokens.slice(0, 8).join(" ")}...
+                        </span>
+                        <span
+                            class="workspace-close"
+                            on:click|stopPropagation={() => closeWorkspace(i)}>×</span
+                        >
+                    </button>
+                {/each}
+            </div>
+        {:else}
+            <div class="empty-workspaces">No prompts loaded. Click "Add Prompt" to start.</div>
+        {/if}
+    </div>
+
+    <div class="main-layout">
+        <div class="left-panel">
+            {#if result && currentPromptId}
+                <ComponentHeatmap
+                    {result}
+                    promptId={currentPromptId}
+                    onCellPopop={openPopup}
+                    on:maskCreated={refreshSavedMasks}
+                />
+                <DisabledComponentsPanel
+                    promptTokens={result.prompt_tokens}
+                    {isLoading}
+                    onSendAblation={sendAblation}
+                    onToggleComponent={toggleComponentDisabled}
+                />
+            {/if}
+        </div>
+
+        <!-- Right side: Scrollable predictions -->
+        <div class="right-panel">
+            {#if result && result.full_run_token_logits}
+                <OriginalPredictions
+                    tokenLogits={result.full_run_token_logits}
+                    promptTokens={result.prompt_tokens}
+                    title="Original Model Predictions"
+                />
+            {/if}
+
+            {#if result && result.ci_masked_token_logits}
+                <OriginalPredictions
+                    tokenLogits={result.ci_masked_token_logits}
+                    promptTokens={result.prompt_tokens}
+                    title="Original <strong>CI Masked</strong> Model Predictions"
+                />
+            {/if}
+
+            {#if result && $ablationResults.length > 0}
+                <div class="ablation-results-container">
+                    <div class="pagination-header">
+                        <h3>Ablation Results ({$ablationResults.length} total)</h3>
+                        <div class="pagination-controls">
+                            <button
+                                on:click={() => (currentAblationPage = Math.max(0, currentAblationPage - 1))}
+                                disabled={currentAblationPage === 0}
+                            >
+                                ←
+                            </button>
+                            <span>{currentAblationPage + 1} / {$ablationResults.length}</span>
+                            <button
+                                on:click={() => (currentAblationPage = Math.min($ablationResults.length - 1, currentAblationPage + 1))}
+                                disabled={currentAblationPage === $ablationResults.length - 1}
+                            >
+                                →
+                            </button>
+                        </div>
+                    </div>
+                    <AblationPredictions
+                        tokenLogits={$ablationResults[currentAblationPage].tokenLogits}
+                        promptTokens={result.prompt_tokens}
+                        appliedMask={$ablationResults[currentAblationPage].applied_mask}
+                        maskOverride={$ablationResults[currentAblationPage].maskOverride}
+                        ablationStats={$ablationResults[currentAblationPage].ablationStats}
+                    />
+                </div>
+            {/if}
+        </div>
+    </div>
+
+    {#if popupData && dashboard}
+        <ComponentDetailModal
+            cluster={cluster_run}
+            {popupData}
+            {dashboard}
+            onClose={closePopup}
+            toggleComponent={toggleComponentDisabled}
+            {isComponentDisabled}
+        />
+    {/if}
+</div>
+
+<style>
+    .tab-content {
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+        padding: 1rem;
+    }
+
+    .main-layout {
+        display: flex;
+        gap: 1rem;
+        min-height: 70vh;
+    }
+
+    .left-panel {
+        flex: 1;
+        min-width: 0;
+        position: sticky;
+        top: 1rem;
+        align-self: flex-start;
+        max-height: calc(100vh - 2rem);
+        overflow-y: auto;
+    }
+
+    .right-panel {
+        flex: 1;
+        min-width: 0;
+        overflow-y: auto;
+        padding-right: 1rem;
+    }
+
+    .prompt-list {
+        display: flex;
+        flex-direction: column;
+        gap: 0.5rem;
+        max-height: 300px;
+        overflow-y: auto;
+    }
+
+    .prompt-button {
+        display: flex;
+        align-items: flex-start;
+        gap: 0.75rem;
+        padding: 0.75rem;
+        background: white;
+        border: 2px solid #e9ecef;
+        border-radius: 6px;
+        cursor: pointer;
+        text-align: left;
+        transition: all 0.2s;
+        font-family: inherit;
+    }
+
+    .prompt-button:hover:not(:disabled) {
+        border-color: #007bff;
+        background: #f0f8ff;
+    }
+
+    .prompt-button:disabled {
+        opacity: 0.6;
+        cursor: not-allowed;
+    }
+
+    .prompt-number {
+        font-weight: bold;
+        color: #666;
+        min-width: 2rem;
+        margin-top: 0.1rem;
+    }
+
+    .prompt-text {
+        flex: 1;
+        font-size: 0.9rem;
+        line-height: 1.4;
+        color: #333;
+    }
+
+    .workspace-navigation {
+        margin-bottom: 1rem;
+        padding: 1rem;
+        background: #e8f4f8;
+        border: 1px solid #b3d9e8;
+        border-radius: 8px;
+    }
+
+    .workspace-header {
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        margin-bottom: 1rem;
+    }
+
+    .workspace-header h3 {
+        margin: 0;
+        font-size: 1.1rem;
+        color: #333;
+    }
+
+    .add-prompt-btn {
+        padding: 0.5rem 1rem;
+        background: #28a745;
+        color: white;
+        border: none;
+        border-radius: 4px;
+        cursor: pointer;
+        font-weight: 500;
+        transition: background 0.2s;
+    }
+
+    .add-prompt-btn:hover {
+        background: #218838;
+    }
+
+    .available-prompts-dropdown {
+        margin-bottom: 1rem;
+        padding: 1rem;
+        background: white;
+        border: 1px solid #dee2e6;
+        border-radius: 6px;
+        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+    }
+
+    .workspace-list {
+        display: flex;
+        flex-direction: column;
+        gap: 0.5rem;
+    }
+
+    .workspace-item {
+        display: flex;
+        align-items: center;
+        gap: 0.75rem;
+        padding: 0.75rem;
+        background: white;
+        border: 2px solid #b3d9e8;
+        border-radius: 6px;
+        cursor: pointer;
+        text-align: left;
+        transition: all 0.2s;
+        font-family: inherit;
+    }
+
+    .workspace-item:hover {
+        background: #f0f8ff;
+        border-color: #007bff;
+    }
+
+    .workspace-item.active {
+        background: #007bff;
+        color: white;
+        border-color: #0056b3;
+    }
+
+    .workspace-number {
+        font-weight: bold;
+        min-width: 2rem;
+        color: #666;
+    }
+
+    .workspace-item.active .workspace-number {
+        color: white;
+    }
+
+    .workspace-text {
+        flex: 1;
+        font-size: 0.9rem;
+        line-height: 1.4;
+        overflow: hidden;
+        text-overflow: ellipsis;
+        white-space: nowrap;
+    }
+
+    .workspace-close {
+        font-size: 1.2rem;
+        font-weight: bold;
+        cursor: pointer;
+        padding: 0.1rem 0.3rem;
+        border-radius: 50%;
+        transition: background 0.2s;
+        color: #666;
+    }
+
+    .workspace-item.active .workspace-close {
+        color: white;
+    }
+
+    .workspace-close:hover {
+        background: rgba(255, 0, 0, 0.1);
+        color: red;
+    }
+
+    .workspace-item.active .workspace-close:hover {
+        background: rgba(255, 255, 255, 0.2);
+        color: white;
+    }
+
+    .empty-workspaces {
+        padding: 2rem;
+        text-align: center;
+        color: #6c757d;
+        font-style: italic;
+    }
+
+    .ablation-results-container {
+        margin-top: 1rem;
+    }
+
+    .pagination-header {
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        margin-bottom: 0.5rem;
+        padding: 0.5rem;
+        background: #f8f9fa;
+        border-radius: 6px;
+    }
+
+    .pagination-header h3 {
+        margin: 0;
+        font-size: 1rem;
+        color: #333;
+    }
+
+    .pagination-controls {
+        display: flex;
+        align-items: center;
+        gap: 0.75rem;
+    }
+
+    .pagination-controls button {
+        padding: 0.25rem 0.75rem;
+        background: white;
+        border: 1px solid #dee2e6;
+        border-radius: 4px;
+        cursor: pointer;
+        font-size: 1rem;
+        transition: all 0.2s;
+    }
+
+    .pagination-controls button:hover:not(:disabled) {
+        background: #007bff;
+        color: white;
+        border-color: #007bff;
+    }
+
+    .pagination-controls button:disabled {
+        opacity: 0.4;
+        cursor: not-allowed;
+    }
+
+    .pagination-controls span {
+        font-size: 0.9rem;
+        color: #666;
+        min-width: 4rem;
+        text-align: center;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/MaskCombinePanel.svelte b/spd/app/frontend/src/lib/components/MaskCombinePanel.svelte
new file mode 100644
index 00000000..dcab8e3e
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/MaskCombinePanel.svelte
@@ -0,0 +1,270 @@
+<script lang="ts">
+    import { multiSelectMode, selectedTokensForCombining } from "$lib/stores/componentState";
+    import * as api from "$lib/api";
+    import { createEventDispatcher } from "svelte";
+
+    const dispatch = createEventDispatcher();
+
+    export let promptId: string;
+
+    let combining = false;
+    let description = "";
+    let simulatedL0: number | null = null;
+    let simulatedJacc: number | null = null;
+    let simulating = false;
+
+    function toggleMultiSelectMode() {
+        $multiSelectMode = !$multiSelectMode;
+        if (!$multiSelectMode) clearSelections();
+    }
+
+    function clearSelections() {
+        $selectedTokensForCombining = [];
+        simulatedL0 = null;
+        simulatedJacc = null;
+    }
+
+    // Reactively simulate merge whenever selections change
+    $: if ($selectedTokensForCombining.length > 0 && layersWithSelections.length === 1) {
+        simulateMergeL0();
+    } else {
+        simulatedL0 = null;
+        simulatedJacc = null;
+    }
+
+    async function simulateMergeL0() {
+        if (layersWithSelections.length !== 1) {
+            simulatedL0 = null;
+            simulatedJacc = null;
+            return;
+        }
+
+        const layer = layersWithSelections[0];
+        const tokenIndices = $selectedTokensForCombining
+            .filter((t) => t.layer === layer)
+            .map((t) => t.tokenIdx);
+
+        if (tokenIndices.length === 0) {
+            simulatedL0 = null;
+            simulatedJacc = null;
+            return;
+        }
+
+        simulating = true;
+        try {
+            const response = await api.simulateMerge({
+                prompt_id: promptId,
+                layer,
+                token_indices: tokenIndices
+            });
+            simulatedL0 = response.l0;
+            simulatedJacc = response.jacc;
+        } catch (error) {
+            console.error("Failed to simulate merge:", error);
+            simulatedL0 = null;
+            simulatedJacc = null;
+        } finally {
+            simulating = false;
+        }
+    }
+
+    // Make this reactive
+    $: layersWithSelections = (() => {
+        const layers = new Set<string>();
+        $selectedTokensForCombining.forEach((token) => layers.add(token.layer));
+        return Array.from(layers);
+    })();
+
+    async function combineMasks_() {
+        if (combining) return;
+
+        if (layersWithSelections.length !== 1) return;
+
+        const layer = layersWithSelections[0];
+        const tokenIndices = $selectedTokensForCombining
+            .filter((t) => t.layer === layer)
+            .map((t) => t.tokenIdx);
+
+        combining = true;
+        try {
+            await api.combineMasks({
+                prompt_id: promptId,
+                layer,
+                token_indices: tokenIndices,
+                description
+            });
+
+            // Clear selections after successful combination
+            $selectedTokensForCombining = [];
+            $multiSelectMode = false;
+            description = ""; // Reset description
+            simulatedL0 = null; // Reset simulated L0
+            simulatedJacc = null;
+
+            // Notify parent to refresh saved masks
+            dispatch("maskCreated");
+        } catch (error) {
+            console.error("Failed to combine masks:", error);
+        } finally {
+            combining = false;
+        }
+    }
+</script>
+
+<div class="mask-combine-panel">
+    <div class="controls">
+        <button
+            class="mode-toggle"
+            class:active={$multiSelectMode}
+            on:click={toggleMultiSelectMode}
+        >
+            {$multiSelectMode ? "✓ Multi-Select Mode" : "Enable Multi-Select"}
+        </button>
+        <input type="text" bind:value={description} placeholder="Description" />
+
+        {#if $multiSelectMode && $selectedTokensForCombining.length > 0}
+            <button class="clear-btn" on:click={clearSelections}>
+                Clear ({$selectedTokensForCombining.length})
+            </button>
+
+            {#if simulatedL0 !== null}
+                <span class="metric-display">
+                    L0: {simulating ? "..." : simulatedL0}
+                </span>
+            {/if}
+
+            {#if simulatedJacc !== null}
+                <span class="metric-display">
+                    Jacc: {simulating ? "..." : simulatedJacc}
+                </span>
+            {/if}
+
+            <button
+                class="combine-btn"
+                disabled={layersWithSelections.length !== 1 || combining}
+                on:click={combineMasks_}
+            >
+                {combining ? "Combining..." : "Combine Masks"}
+            </button>
+
+            {#if layersWithSelections.length > 1}
+                <div class="multi-layer-warning">
+                    <span class="warning-icon">⚠️</span>
+                    <span class="warning-text">
+                        Multi-select only available on a single layer. Please clear selections and
+                        select from one layer only.
+                    </span>
+                </div>
+            {/if}
+        {/if}
+    </div>
+</div>
+
+<style>
+    .mask-combine-panel {
+        padding: 0.75rem;
+        border: 1px solid #ddd;
+        border-radius: 8px;
+        margin-bottom: 1rem;
+        background: white;
+    }
+
+    .controls {
+        display: flex;
+        gap: 0.5rem;
+        align-items: center;
+    }
+
+    .mode-toggle {
+        padding: 0.5rem 1rem;
+        border: 2px solid #007bff;
+        background: white;
+        color: #007bff;
+        border-radius: 4px;
+        cursor: pointer;
+        font-weight: bold;
+        transition: all 0.2s;
+    }
+
+    .mode-toggle:hover {
+        background: #f0f8ff;
+    }
+
+    .mode-toggle.active {
+        background: #007bff;
+        color: white;
+    }
+
+    .clear-btn {
+        padding: 0.5rem 1rem;
+        background: #f44336;
+        color: white;
+        border: none;
+        border-radius: 4px;
+        cursor: pointer;
+    }
+
+    .clear-btn:hover {
+        background: #d32f2f;
+    }
+
+    .combine-btn {
+        padding: 0.5rem 1rem;
+        background: #4caf50;
+        color: white;
+        border: none;
+        border-radius: 4px;
+        cursor: pointer;
+        font-weight: bold;
+    }
+
+    .combine-btn:hover:not(:disabled) {
+        background: #45a049;
+    }
+
+    .combine-btn:disabled {
+        background: #ccc;
+        cursor: not-allowed;
+    }
+
+    .warning {
+        padding: 0.25rem 0.5rem;
+        color: #856404;
+        font-size: 0.85rem;
+    }
+
+    .multi-layer-warning {
+        display: flex;
+        align-items: flex-start;
+        gap: 0.5rem;
+        padding: 0.75rem;
+        background: #fff3cd;
+        border: 1px solid #ffeaa7;
+        border-left: 4px solid #ff6b35;
+        border-radius: 6px;
+        color: #664d03;
+        max-width: 400px;
+        margin: 0.5rem 0;
+    }
+
+    .warning-icon {
+        font-size: 1.2rem;
+        margin-top: 0.1rem;
+    }
+
+    .warning-text {
+        font-size: 0.9rem;
+        line-height: 1.4;
+        font-weight: 500;
+    }
+
+    .metric-display {
+        padding: 0.5rem 1rem;
+        background: #e3f2fd;
+        border: 1px solid #2196f3;
+        border-radius: 4px;
+        color: #1976d2;
+        font-weight: bold;
+        font-size: 0.9rem;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/MiniModelView.svelte b/spd/app/frontend/src/lib/components/MiniModelView.svelte
new file mode 100644
index 00000000..20ace8ac
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/MiniModelView.svelte
@@ -0,0 +1,144 @@
+<script lang="ts">
+    type ComponentInfo = { module: string; index: number };
+    export let components: ComponentInfo[];
+    if (components == null) throw new Error('Components are required');
+
+    export let layerCount: number;
+
+    const SUBLAYER_COLUMNS = [
+        'self_attn.q_proj',
+        'self_attn.k_proj',
+        'self_attn.v_proj',
+        'self_attn.o_proj',
+        'mlp.gate_proj',
+        'mlp.up_proj',
+        'mlp.down_proj'
+    ];
+
+    function getLayer(moduleName: string): number {
+        const parts = moduleName.split('.');
+        const i = parts.indexOf('layers');
+        if (i >= 0 && i + 1 < parts.length) {
+            const n = parseInt(parts[i + 1]);
+            return Number.isFinite(n) ? n : 0;
+        }
+        return 0;
+    }
+
+    function getColumnIndex(moduleName: string): number {
+        for (let i = 0; i < SUBLAYER_COLUMNS.length; i++) {
+            if (moduleName.includes(SUBLAYER_COLUMNS[i])) return i;
+        }
+        return -1; // ignore others
+    }
+
+    type Cell = { count: number; indices: number[] };
+    $: grid = Array.from({ length: layerCount }, () =>
+        SUBLAYER_COLUMNS.map(() => ({ count: 0, indices: [] as number[] }))
+    );
+
+    $: {
+        // reset
+        for (let r = 0; r < layerCount; r++) {
+            for (let c = 0; c < SUBLAYER_COLUMNS.length; c++) {
+                grid[r][c].count = 0;
+                grid[r][c].indices = [];
+            }
+        }
+        // accumulate
+        for (const comp of components) {
+            const layer = getLayer(comp.module);
+            const col = getColumnIndex(comp.module);
+            if (layer >= 0 && layer < layerCount && col >= 0) {
+                grid[layer][col].count += 1;
+                grid[layer][col].indices.push(comp.index);
+            }
+        }
+    }
+
+    $: maxCount = Math.max(1, ...grid.flat().map((c) => c.count));
+
+    function colorFor(v: number): string {
+        if (v <= 0) return '#eef2f6';
+        const t = Math.min(1, v / maxCount);
+        const r = 230 - Math.round(150 * t);
+        const g = 240 - Math.round(170 * t);
+        const b = 255;
+        return `rgb(${r},${g},${b})`;
+    }
+
+    // tooltip state
+    let tipVisible = false;
+    let tipX = 0;
+    let tipY = 0;
+    let tipText = '';
+
+    function showTip(e: MouseEvent, layer: number, col: number, cell: Cell) {
+        tipVisible = true;
+        tipX = (e as MouseEvent).clientX + 10;
+        tipY = (e as MouseEvent).clientY + 10;
+        const modulePath = SUBLAYER_COLUMNS[col];
+        const moduleName = `model.layers.${layer}.${modulePath}`;
+        const indices = cell.indices.join(',');
+        tipText = `${moduleName}\nComponents: ${cell.count}\nIndices: ${indices || 'none'}`;
+    }
+    function moveTip(e: MouseEvent) {
+        tipX = (e as MouseEvent).clientX + 10;
+        tipY = (e as MouseEvent).clientY + 10;
+    }
+    function hideTip() {
+        tipVisible = false;
+    }
+</script>
+
+<div class="mini-model-view" style={`--cols:${SUBLAYER_COLUMNS.length}; --rows:${layerCount};`}>
+    {#each Array.from({ length: layerCount }) as _, r}
+        {#each SUBLAYER_COLUMNS as path, c}
+            <div
+                class="cell"
+                role="img"
+                aria-label={`Layer ${r}, ${path} - ${grid[r][c].count} components`}
+                style={`background:${colorFor(grid[r][c].count)}`}
+                on:mouseenter={(e) => showTip(e, r, c, grid[r][c])}
+                on:mousemove={moveTip}
+                on:mouseleave={hideTip}
+            ></div>
+        {/each}
+    {/each}
+    {#if tipVisible}
+        <div class="tooltip" style={`left:${tipX}px; top:${tipY}px;`}>{tipText}</div>
+    {/if}
+</div>
+
+<style>
+    .mini-model-view {
+        position: relative;
+        display: grid;
+        grid-template-columns: repeat(var(--cols), 12px);
+        grid-template-rows: repeat(var(--rows), 12px);
+        gap: 2px;
+        padding: 2px;
+        background: #fff;
+        border: 1px solid #eee;
+        border-radius: 3px;
+        width: max-content;
+    }
+    .cell {
+        width: 12px;
+        height: 12px;
+        border-radius: 2px;
+    }
+    .tooltip {
+        position: fixed;
+        z-index: 1000;
+        pointer-events: none;
+        background: rgba(0,0,0,0.9);
+        color: #fff;
+        font-size: 11px;
+        line-height: 1.2;
+        padding: 6px 8px;
+        border-radius: 4px;
+        white-space: pre-line;
+    }
+</style>
+
diff --git a/spd/app/frontend/src/lib/components/OriginalPredictions.svelte b/spd/app/frontend/src/lib/components/OriginalPredictions.svelte
new file mode 100644
index 00000000..b1b6d3c7
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/OriginalPredictions.svelte
@@ -0,0 +1,32 @@
+<script lang="ts">
+    import TokenPredictions from "./TokenPredictions.svelte";
+    import type { OutputTokenLogit } from "$lib/api";
+
+    export let tokenLogits: OutputTokenLogit[][];
+    export let promptTokens: string[];
+    export let title: string;
+</script>
+
+<div class="predictions-section">
+    <h2>{@html title}</h2>
+    <TokenPredictions
+        {tokenLogits}
+        {promptTokens}
+        containerClass="original"
+    />
+</div>
+
+<style>
+    .predictions-section {
+        padding: 1rem;
+        border: 2px solid #4caf50;
+        border-radius: 8px;
+        background-color: #f8fff8;
+        margin-bottom: 1rem;
+    }
+
+    .predictions-section h2 {
+        margin: 0 0 0.5rem 0;
+        color: #2e7d2e;
+    }
+</style>
\ No newline at end of file
diff --git a/spd/app/frontend/src/lib/components/PromptInput.svelte b/spd/app/frontend/src/lib/components/PromptInput.svelte
new file mode 100644
index 00000000..a38fde54
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/PromptInput.svelte
@@ -0,0 +1,56 @@
+<script lang="ts">
+    export let prompt: string;
+    export let isLoading: boolean;
+    export let onInput: () => void;
+    export let onRandomPrompt: () => void;
+</script>
+
+<div class="prompt-section">
+    <textarea
+        id="prompt"
+        bind:value={prompt}
+        disabled={isLoading}
+        placeholder="Enter your prompt here..."
+        rows="2"
+        on:input={onInput}
+    ></textarea>
+
+    <button on:click={onRandomPrompt}>Random Prompt</button>
+</div>
+
+<style>
+    .prompt-section {
+        display: flex;
+        flex-direction: row;
+        gap: 0.5rem;
+    }
+
+    textarea {
+        flex: 1;
+        padding: 0.5rem;
+        border: 1px solid #ccc;
+        border-radius: 4px;
+        font-size: 1rem;
+        resize: vertical;
+    }
+
+    button {
+        padding: 0.5rem 1rem;
+        background-color: #4a90e2;
+        color: white;
+        border: none;
+        border-radius: 4px;
+        font-size: 1rem;
+        cursor: pointer;
+        white-space: nowrap;
+    }
+
+    button:hover:not(:disabled) {
+        background-color: #357abd;
+    }
+
+    button:disabled {
+        background-color: #ccc;
+        cursor: not-allowed;
+    }
+</style>
\ No newline at end of file
diff --git a/spd/app/frontend/src/lib/components/RunSelector.svelte b/spd/app/frontend/src/lib/components/RunSelector.svelte
new file mode 100644
index 00000000..e69de29b
diff --git a/spd/app/frontend/src/lib/components/SavedMasksPanel.svelte b/spd/app/frontend/src/lib/components/SavedMasksPanel.svelte
new file mode 100644
index 00000000..509831e8
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/SavedMasksPanel.svelte
@@ -0,0 +1,198 @@
+<script lang="ts">
+    import { onMount } from "svelte";
+    import * as api from "$lib/api";
+    import type { MaskOverrideDTO } from "$lib/api";
+
+    export let onApplyMask: (maskId: string) => void;
+
+    let savedMasks: MaskOverrideDTO[] = [];
+    let loading = false;
+
+    export async function loadMasks() {
+        loading = true;
+        try {
+            savedMasks = await api.getMaskOverrides();
+        } catch (error) {
+            console.error("Failed to load mask overrides:", error);
+        } finally {
+            loading = false;
+        }
+    }
+
+    function handleApply(maskId: string) {
+        onApplyMask(maskId);
+    }
+
+    onMount(() => {
+        loadMasks();
+    });
+</script>
+
+<div class="saved-masks-panel">
+    <div class="panel-header">
+        <h3>Saved Masks</h3>
+        <button class="refresh-btn" on:click={loadMasks} disabled={loading}>
+            {loading ? "Loading..." : "Refresh"}
+        </button>
+    </div>
+
+    {#if savedMasks.length === 0}
+        <div class="empty-state">
+            No saved masks yet. Create masks using multi-select mode below.
+        </div>
+    {:else}
+        <div class="masks-container">
+            {#each savedMasks as mask}
+                <div class="mask-card">
+                    <div class="mask-info">
+                        <div class="mask-description">
+                            {mask.description || "Unnamed mask"}
+                        </div>
+                        <div class="mask-details">
+                            <span class="mask-layer">Layer: {mask.layer}</span>
+                            <span class="mask-l0">L0: {mask.combined_mask.l0}</span>
+                        </div>
+                    </div>
+                    <button class="apply-btn" on:click={() => handleApply(mask.id)}>
+                        Apply as Ablation
+                    </button>
+                </div>
+            {/each}
+        </div>
+    {/if}
+</div>
+
+<style>
+    .saved-masks-panel {
+        margin-bottom: 1rem;
+        padding: 1rem;
+        background: #f8f9fa;
+        border: 1px solid #dee2e6;
+        border-radius: 8px;
+    }
+
+    .panel-header {
+        display: flex;
+        justify-content: space-between;
+        align-items: center;
+        margin-bottom: 1rem;
+    }
+
+    .panel-header h3 {
+        margin: 0;
+        font-size: 1.1rem;
+        color: #333;
+    }
+
+    .refresh-btn {
+        padding: 0.25rem 0.75rem;
+        background: #007bff;
+        color: white;
+        border: none;
+        border-radius: 4px;
+        cursor: pointer;
+        font-size: 0.85rem;
+    }
+
+    .refresh-btn:hover:not(:disabled) {
+        background: #0056b3;
+    }
+
+    .refresh-btn:disabled {
+        background: #ccc;
+        cursor: not-allowed;
+    }
+
+    .empty-state {
+        padding: 2rem;
+        text-align: center;
+        color: #6c757d;
+        font-style: italic;
+    }
+
+    .masks-container {
+        display: flex;
+        gap: 0.75rem;
+        overflow-x: auto;
+        padding-bottom: 0.5rem;
+    }
+
+    .mask-card {
+        flex: 0 0 auto;
+        min-width: 200px;
+        padding: 0.75rem;
+        background: white;
+        border: 2px solid #e9ecef;
+        border-radius: 6px;
+        transition: all 0.2s;
+    }
+
+    .mask-card:hover {
+        border-color: #007bff;
+        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+    }
+
+    .mask-info {
+        margin-bottom: 0.75rem;
+    }
+
+    .mask-description {
+        font-weight: 500;
+        color: #333;
+        margin-bottom: 0.5rem;
+        overflow: hidden;
+        text-overflow: ellipsis;
+        white-space: nowrap;
+    }
+
+    .mask-details {
+        display: flex;
+        flex-direction: column;
+        gap: 0.25rem;
+        font-size: 0.85rem;
+        color: #6c757d;
+    }
+
+    .mask-layer {
+        font-weight: 500;
+    }
+
+    .mask-l0 {
+        color: #007bff;
+    }
+
+    .apply-btn {
+        width: 100%;
+        padding: 0.5rem;
+        background: #007bff;
+        color: white;
+        border: none;
+        border-radius: 4px;
+        cursor: pointer;
+        font-weight: 500;
+        transition: background 0.2s;
+    }
+
+    .apply-btn:hover {
+        background: #0056b3;
+    }
+
+    /* Scrollbar styling */
+    .masks-container::-webkit-scrollbar {
+        height: 6px;
+    }
+
+    .masks-container::-webkit-scrollbar-track {
+        background: #f1f1f1;
+        border-radius: 3px;
+    }
+
+    .masks-container::-webkit-scrollbar-thumb {
+        background: #888;
+        border-radius: 3px;
+    }
+
+    .masks-container::-webkit-scrollbar-thumb:hover {
+        background: #555;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/Sparkbars.svelte b/spd/app/frontend/src/lib/components/Sparkbars.svelte
new file mode 100644
index 00000000..bb9484bc
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/Sparkbars.svelte
@@ -0,0 +1,51 @@
+<script lang="ts">
+    export let bins: number[] = [];
+    export let width = 200;
+    export let height = 60;
+    export let color = "#4169E1";
+    export let logScale = true;
+    export let margin = 2;
+
+    $: maxVal = bins.length ? Math.max(...bins) : 0;
+    $: barCount = bins.length;
+    $: innerW = Math.max(0, width - margin * 2);
+    $: innerH = Math.max(0, height - margin * 2);
+    $: barW = barCount > 0 ? innerW / barCount : 0;
+
+    function yFor(v: number): number {
+        if (maxVal <= 0) return innerH;
+        if (logScale) {
+            const lv = Math.log10(Math.max(1, v));
+            const maxLv = Math.log10(Math.max(1, maxVal));
+            const ratio = maxLv === 0 ? 0 : lv / maxLv;
+            return innerH * (1 - ratio);
+        }
+        return innerH * (1 - v / maxVal);
+    }
+</script>
+
+<svg {width} {height} class="sparkbars">
+    <!-- background -->
+    <rect x="0" y="0" width={width} height={height} fill="transparent" />
+    <g transform={`translate(${margin}, ${margin})`}>
+        {#each bins as v, i}
+            {#if barW >= 0.5}
+                <rect
+                    x={i * barW}
+                    y={yFor(v)}
+                    width={Math.max(0, barW - 1)}
+                    height={innerH - yFor(v)}
+                    fill={color}
+                />
+            {/if}
+        {/each}
+    </g>
+    
+</svg>
+
+<style>
+    .sparkbars {
+        display: block;
+    }
+</style>
+
diff --git a/spd/app/frontend/src/lib/components/TokenHighlights.svelte b/spd/app/frontend/src/lib/components/TokenHighlights.svelte
new file mode 100644
index 00000000..d5fda689
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/TokenHighlights.svelte
@@ -0,0 +1,106 @@
+<script lang="ts">
+    export let rawText: string;
+    export let offsetMapping: [number, number][];
+    export let tokenCiValues: number[];
+    export let activePosition: number = -1;
+    export let precision: number = 3;
+
+    type Segment = {
+        text: string;
+        ciValue: number;
+        isActive: boolean;
+    };
+
+    const defaultHighlightColor = (importance: number): string => {
+        const clamped = Math.min(Math.max(importance, 0), 1);
+        const opacity = 0.15 + clamped * 0.35;
+        return `rgba(0, 200, 0, ${opacity})`;
+    };
+
+    export let getHighlightColor: (importance: number) => string = defaultHighlightColor;
+
+    $: segments = buildSegments(rawText, offsetMapping, tokenCiValues, activePosition);
+
+    function buildSegments(
+        text: string,
+        offsets: [number, number][],
+        ciValues: number[],
+        activeIdx: number
+    ): Segment[] {
+        const result: Segment[] = [];
+        let cursor = 0;
+
+        offsets.forEach(([start, end], idx) => {
+            if (cursor < start) {
+                result.push({ text: text.slice(cursor, start), ciValue: 0, isActive: false });
+            }
+
+            const tokenText = text.slice(start, end);
+            const ciValue = ciValues[idx] ?? 0;
+            result.push({ text: tokenText, ciValue, isActive: idx === activeIdx });
+
+            cursor = end;
+        });
+
+        if (cursor < text.length) {
+            result.push({ text: text.slice(cursor), ciValue: 0, isActive: false });
+        }
+
+        return result.filter((segment) => segment.text.length > 0);
+    }
+</script>
+
+<span class="token-highlights">
+    {#each segments as segment, idx}
+        {#if segment.ciValue > 0}
+            <span
+                class="token-highlight"
+                class:active-token={segment.isActive}
+                style={`background-color:${getHighlightColor(segment.ciValue)};`}
+                data-ci={`CI: ${segment.ciValue.toFixed(precision)}`}
+            >{segment.text}</span>
+        {:else}
+            {segment.text}
+        {/if}
+    {/each}
+</span>
+
+<style>
+    .token-highlights {
+        display: inline;
+        white-space: pre-wrap;
+    }
+
+    .token-highlight {
+        display: inline;
+        padding: 2px 4px;
+        border-radius: 3px;
+        position: relative;
+    }
+
+    .token-highlight::after {
+        content: attr(data-ci);
+        position: absolute;
+        bottom: 100%;
+        left: 50%;
+        transform: translateX(-50%);
+        background: rgba(0, 0, 0, 0.9);
+        color: white;
+        padding: 4px 8px;
+        border-radius: 4px;
+        font-size: 12px;
+        white-space: nowrap;
+        opacity: 0;
+        pointer-events: none;
+        transition: opacity 0s;
+        margin-bottom: 4px;
+    }
+
+    .token-highlight:hover::after {
+        opacity: 1;
+    }
+
+    .token-highlight.active-token {
+        border: 2px solid rgba(255, 100, 0, 0.6);
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/components/TokenPredictions.svelte b/spd/app/frontend/src/lib/components/TokenPredictions.svelte
new file mode 100644
index 00000000..d1bfaaaa
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/TokenPredictions.svelte
@@ -0,0 +1,176 @@
+<script lang="ts">
+    import type { OutputTokenLogit, ComponentMask } from "$lib/api";
+    import { isScrolling } from "$lib/stores/componentState";
+
+    export let tokenLogits: OutputTokenLogit[][];
+    export let promptTokens: string[];
+    export let containerClass: string = "";
+    export let appliedMask: ComponentMask | null = null;
+
+    function hasAblation(tokenIdx: number): boolean {
+        if (!appliedMask) return false;
+        return Object.values(appliedMask).some(
+            tokenMasks => tokenMasks[tokenIdx] && tokenMasks[tokenIdx].length > 0
+        );
+    }
+
+    function getProbabilityColor(probability: number): string {
+        // Clamp probability between 0 and 1
+        const p = Math.max(0, Math.min(1, probability));
+        // Linear interpolation from white (255) to medium blue (100)
+        const whiteAmount = Math.round(255 - (255 - 100) * p);
+        return `rgb(${whiteAmount}, ${whiteAmount}, 255)`;
+    }
+
+    function syncScroll(event: Event) {
+        if ($isScrolling) return;
+
+        const target = event.target as HTMLElement;
+        const scrollLeft = target.scrollLeft;
+
+        $isScrolling = true;
+
+        const containers = document.querySelectorAll(".logits-display-container");
+        for (const container of containers) {
+            if (container !== target) {
+                (container as HTMLElement).scrollLeft = scrollLeft;
+            }
+        }
+
+        setTimeout(() => {
+            $isScrolling = false;
+        }, 10);
+    }
+</script>
+
+<div class="logits-display-container {containerClass}" on:scroll={syncScroll}>
+    <div class="logits-display">
+        {#each tokenLogits as tokenPredictions, tokenIdx}
+            <div class="token-predictions" class:has-ablation={hasAblation(tokenIdx)}>
+                <div class="token-header">
+                    <div class="token-name">
+                        "{promptTokens[tokenIdx]}"
+                    </div>
+                </div>
+                <div class="predictions-list">
+                    {#each tokenPredictions as prediction}
+                        <div
+                            class="prediction-item"
+                            style="background-color: {getProbabilityColor(prediction.probability)}"
+                        >
+                            <span class="prediction-token">"{prediction.token}"</span>
+                            <span class="prediction-prob">{prediction.probability.toFixed(3)}</span>
+                        </div>
+                    {/each}
+                </div>
+            </div>
+        {/each}
+    </div>
+</div>
+
+<style>
+    .logits-display-container {
+        overflow-x: auto;
+        margin-bottom: 0;
+        border: 1px solid #ddd;
+        border-radius: 6px;
+        background: white;
+        scrollbar-width: none;
+    }
+
+    .logits-display-container::-webkit-scrollbar {
+        display: none;
+    }
+
+    .logits-display-container.original {
+        border-color: #4caf50;
+    }
+
+    .logits-display {
+        display: flex !important;
+        flex-direction: row !important;
+        flex-wrap: nowrap !important;
+        gap: 0;
+        min-width: fit-content;
+        padding: 0.5rem;
+        width: max-content;
+        overflow: visible;
+    }
+
+    .token-predictions {
+        background: white;
+        border-radius: 6px;
+        border: 1px solid #ddd;
+        width: 140px;
+        padding: 0.25rem;
+        margin-right: 0.25rem;
+    }
+
+    .token-header {
+        color: #333;
+        text-align: center;
+        position: relative;
+    }
+
+    .token-predictions.has-ablation {
+        border-color: #ff6b35;
+        border-width: 2px;
+        background: #fff8f5;
+    }
+
+    .ablation-indicator {
+        position: absolute;
+        top: -8px;
+        right: -8px;
+        font-size: 0.6rem;
+        background: white;
+        border-radius: 50%;
+        padding: 2px;
+    }
+
+    .token-name {
+        font-size: 0.8rem;
+        color: #333;
+        font-family: monospace;
+        margin-top: 0.2rem;
+        word-break: break-all;
+    }
+
+    .predictions-list {
+        display: flex;
+        flex-direction: column;
+        gap: 0.1rem;
+    }
+
+    .prediction-item {
+        display: flex;
+        flex-direction: row;
+        justify-content: space-between;
+        align-items: center;
+        border-radius: 2px;
+        font-size: 0.7rem;
+        padding: 0.1rem 0.2rem;
+        margin: 0.05rem 0;
+    }
+
+    .prediction-token {
+        font-family: monospace;
+        font-size: 0.7rem;
+        color: #333;
+        overflow: hidden;
+        white-space: nowrap;
+        text-overflow: ellipsis;
+        text-align: left;
+        flex: 1;
+        margin-right: 0.2rem;
+        padding: 0.1rem 0.3rem;
+        border-radius: 2px;
+    }
+
+    .prediction-prob {
+        font-family: monospace;
+        font-size: 0.65rem;
+        text-align: right;
+        flex-shrink: 0;
+    }
+</style>
\ No newline at end of file
diff --git a/spd/app/frontend/src/lib/components/VirtualList.svelte b/spd/app/frontend/src/lib/components/VirtualList.svelte
new file mode 100644
index 00000000..ee176626
--- /dev/null
+++ b/spd/app/frontend/src/lib/components/VirtualList.svelte
@@ -0,0 +1,65 @@
+<script lang="ts">
+    export let items: any[] = [];
+    export let rowHeight = 200;
+    export let buffer = 6;
+    export let getKey: (item: any, index: number) => string | number = (_item, index) => index;
+
+    let viewportHeight = 0;
+    let scrollTop = 0;
+
+    $: totalHeight = items.length * rowHeight;
+    $: startIndex = Math.max(0, Math.floor(scrollTop / rowHeight) - buffer);
+    $: endIndex = Math.min(
+        items.length,
+        Math.ceil((scrollTop + viewportHeight) / rowHeight) + buffer,
+    );
+    $: visible = items.slice(startIndex, endIndex);
+</script>
+
+<div class="virtual-list">
+    <div
+        class="virtual-viewport"
+        bind:clientHeight={viewportHeight}
+        on:scroll={(event) => (scrollTop = event.currentTarget.scrollTop)}
+    >
+        <div class="virtual-spacer" style={`height:${totalHeight}px`}>
+            <div
+                class="virtual-content"
+                style={`transform: translateY(${startIndex * rowHeight}px);`}
+            >
+                {#each visible as item, localIndex (getKey(item, startIndex + localIndex))}
+                    <slot
+                        {item}
+                        index={startIndex + localIndex}
+                    ></slot>
+                {/each}
+            </div>
+        </div>
+    </div>
+</div>
+
+<style>
+    .virtual-list {
+        position: relative;
+        width: 100%;
+    }
+
+    .virtual-viewport {
+        overflow-y: auto;
+        position: relative;
+        width: 100%;
+    }
+
+    .virtual-spacer {
+        position: relative;
+        width: 100%;
+    }
+
+    .virtual-content {
+        position: absolute;
+        top: 0;
+        left: 0;
+        right: 0;
+        will-change: transform;
+    }
+</style>
diff --git a/spd/app/frontend/src/lib/index.ts b/spd/app/frontend/src/lib/index.ts
new file mode 100644
index 00000000..856f2b6c
--- /dev/null
+++ b/spd/app/frontend/src/lib/index.ts
@@ -0,0 +1 @@
+// place files you want to import through the `$lib` alias in this folder.
diff --git a/spd/app/frontend/src/lib/stores/componentState.ts b/spd/app/frontend/src/lib/stores/componentState.ts
new file mode 100644
index 00000000..27e880f4
--- /dev/null
+++ b/spd/app/frontend/src/lib/stores/componentState.ts
@@ -0,0 +1,58 @@
+import { writable } from "svelte/store";
+import type {
+    OutputTokenLogit,
+    RunPromptResponse,
+    MaskOverrideDTO,
+    ComponentMask,
+    LayerCIs,
+    MatrixCausalImportances,
+    AblationStats
+} from "$lib/api";
+
+export interface AblationResult {
+    tokenLogits: OutputTokenLogit[][];
+    applied_mask: ComponentMask;
+    id: number;
+    maskOverride?: MaskOverrideDTO;
+    ablationStats: AblationStats;
+}
+
+export interface SelectedToken {
+    layer: string;
+    tokenIdx: number;
+    token: string;
+}
+
+export interface LayerMask {
+    layer: string;
+    mask: number[];
+    name?: string;
+}
+
+export interface CombinedMask {
+    layer: string;
+    tokenIndices: number[];
+    description: string;
+    l0: number;
+    createdAt: number;
+}
+
+export interface PromptWorkspace {
+    promptId: string;
+    promptData: RunPromptResponse;
+    ablationResults: AblationResult[];
+    runAblation: ComponentMask;
+}
+
+export const ablationComponentMask = writable<ComponentMask>({});
+export const ablationResults = writable<AblationResult[]>([]);
+export const isScrolling = writable(false);
+
+// Multi-select state for combining masks
+export const multiSelectMode = writable(false);
+export const selectedTokensForCombining = writable<SelectedToken[]>([]);
+export const combinedMasks = writable<CombinedMask[]>([]);
+
+// Multi-prompt workspace management
+export const promptWorkspaces = writable<PromptWorkspace[]>([]);
+export const currentWorkspaceIndex = writable<number>(0);
diff --git a/spd/app/frontend/src/routes/+layout.svelte b/spd/app/frontend/src/routes/+layout.svelte
new file mode 100644
index 00000000..7e3ffed9
--- /dev/null
+++ b/spd/app/frontend/src/routes/+layout.svelte
@@ -0,0 +1,8 @@
+<script lang="ts">
+	import '../app.css';
+
+	let { children } = $props();
+</script>
+
+
+{@render children?.()}
diff --git a/spd/app/frontend/src/routes/+page.svelte b/spd/app/frontend/src/routes/+page.svelte
new file mode 100644
index 00000000..5cb387c0
--- /dev/null
+++ b/spd/app/frontend/src/routes/+page.svelte
@@ -0,0 +1,414 @@
+<!-- svelte-ignore a11y_click_events_have_key_events -->
+<!-- svelte-ignore a11y_no_static_element_interactions -->
+<script lang="ts">
+    import type { Status } from "$lib/api";
+    import * as api from "$lib/api";
+    import { onMount } from "svelte";
+
+    import ActivationContextsTab from "$lib/components/ActivationContextsTab.svelte";
+    import NewClusterDashboard from "$lib/components/ClusterDashboardTab.svelte";
+    import InterventionsTab from "$lib/components/InterventionsTab.svelte";
+
+    let loadingStatus: boolean = true;
+
+    let trainWandbRunId: string | null = null;
+    let loadingTrainRun: boolean = false;
+
+    let status: Status | null = null;
+    $: availableClusterRuns = status?.train_run?.available_cluster_runs;
+
+    let clusterWandbRunPath: string | null = null; // "goodfire/spd-cluster/wj3xq8ds"; // defaults for dev
+    let clusterIteration: number | null = null; // 7000;
+    let loadingClusterRun: boolean = false;
+
+    async function loadStatus() {
+        loadingStatus = true;
+        console.log("getting status");
+        status = await api.getStatus();
+        loadingStatus = false;
+
+        console.log("status:", status);
+        if (!status.train_run) {
+            return;
+        }
+
+        trainWandbRunId = status.train_run.wandb_path.split("/").pop()!;
+        availableClusterRuns = status.train_run.available_cluster_runs;
+
+        if (status.cluster_run) {
+            clusterWandbRunPath = status.cluster_run.wandb_path;
+        }
+    }
+    
+    setInterval(loadStatus, 3000);
+
+    async function loadRun() {
+        if (!trainWandbRunId?.trim()) return;
+
+        loadingTrainRun = true;
+
+        status = null;
+        await api.loadRun(trainWandbRunId);
+
+        loadingTrainRun = false;
+
+        await loadStatus();
+    }
+
+    async function loadClusterRun() {
+        console.log("loading cluster run", clusterWandbRunPath, clusterIteration);
+        const canLoadCluster = clusterWandbRunPath !== null && clusterIteration !== null;
+        if (!canLoadCluster) {
+            console.log("cannot submit cluster settings", {
+                clusterWandbRunPath,
+                clusterIteration
+            });
+            return;
+        }
+
+        loadingClusterRun = true;
+        await api.loadClusterRun(clusterWandbRunPath!.split("/").pop()!, clusterIteration!);
+        loadingClusterRun = false;
+
+        await loadStatus();
+    }
+
+    onMount(() => {
+        loadStatus();
+    });
+
+    let activeTab: "ablation" | "activation-contexts" | "cluster-dashboard" | null = null;
+</script>
+
+<div class="app-layout">
+    <!-- Left Sidebar -->
+    {#if loadingStatus}
+        <div class="loading">Loading...</div>
+    {:else}
+        <aside class="sidebar">
+            <div class="run-selector">
+                <label for="wandb-run-id">W&B Run ID</label>
+                <div class="input-group">
+                    <input
+                        type="text"
+                        id="wandb-run-id"
+                        list="run-options"
+                        bind:value={trainWandbRunId}
+                        disabled={loadingTrainRun}
+                        placeholder="Select or enter run ID"
+                    />
+                    <button on:click={loadRun} disabled={loadingTrainRun || !trainWandbRunId?.trim()}>
+                        {loadingTrainRun ? "Loading..." : "Load Run"}
+                    </button>
+                </div>
+            </div>
+            <div class="tab-navigation">
+                {#if status?.train_run}
+                    <button
+                        class="tab-button"
+                        class:active={activeTab === "activation-contexts"}
+                        on:click={() => (activeTab = "activation-contexts")}
+                    >
+                        Activation Contexts
+                    </button>
+                    <div class="cluster-settings">
+                        <h4>Cluster Settings</h4>
+                        <!-- svelte-ignore a11y_consider_explicit_label -->
+                        <form on:submit|preventDefault={loadClusterRun}>
+                            <label>
+                                Clustering Run
+                                <select bind:value={clusterWandbRunPath}>
+                                    {#if availableClusterRuns != null}
+                                        {#each availableClusterRuns as run}
+                                            <option value={run}>{run}</option>
+                                        {/each}
+                                    {/if}
+                                </select>
+                            </label>
+                            <div class="settings-grid">
+                                <label>
+                                    Iteration
+                                    <input type="number" bind:value={clusterIteration} />
+                                </label>
+                            </div>
+                            <button class="cluster-load" type="submit" disabled={loadingClusterRun}
+                                >Load Cluster Run</button
+                            >
+                        </form>
+                    </div>
+                    <button
+                        class="tab-button"
+                        class:active={activeTab === "ablation"}
+                        disabled={status?.cluster_run == null}
+                        on:click={() => (activeTab = "ablation")}
+                    >
+                        Component Ablation
+                        <div class="spinner" class:hidden={!loadingClusterRun}></div>
+                    </button>
+                    <button
+                        class="tab-button"
+                        class:active={activeTab === "cluster-dashboard"}
+                        disabled={status?.cluster_run == null}
+                        on:click={() => (activeTab = "cluster-dashboard")}
+                    >
+                        Cluster Dashboard
+                        <div class="spinner" class:hidden={!loadingClusterRun}></div>
+                    </button>
+                {/if}
+            </div>
+            {#if status?.train_run}
+                <div class="config">
+                    <h4>Config</h4>
+                    <pre>{JSON.stringify(status?.train_run?.config, null, 2)}</pre>
+                </div>
+            {/if}
+        </aside>
+
+        <!-- Main Content -->
+        <div class="main-content">
+            {#if status?.train_run}
+                <div class:hidden={activeTab !== "activation-contexts"}>
+                    <ActivationContextsTab
+                        availableComponentLayers={status.train_run.component_layers}
+                    />
+                </div>
+                <div class:hidden={activeTab !== "ablation"}>
+                    {#if status?.cluster_run && clusterIteration !== null}
+                        <InterventionsTab
+                            cluster_run={status.cluster_run}
+                            iteration={clusterIteration}
+                        />
+                    {:else}
+                        <div class="status">No cluster run selected.</div>
+                    {/if}
+                </div>
+                <div class:hidden={activeTab !== "cluster-dashboard"}>
+                    {#if status?.cluster_run && clusterIteration !== null}
+                        <NewClusterDashboard iteration={clusterIteration} />
+                    {:else}
+                        <div class="status">No cluster run selected.</div>
+                    {/if}
+                </div>
+            {/if}
+        </div>
+    {/if}
+</div>
+
+<style>
+    .app-layout {
+        display: flex;
+        min-height: 100vh;
+    }
+
+    .sidebar {
+        background: #f8f9fa;
+        border-right: 1px solid #dee2e6;
+        padding: 1.5rem;
+        display: flex;
+        flex-direction: column;
+        position: sticky;
+        top: 0;
+        height: 100vh;
+        overflow-y: auto;
+    }
+
+    .main-content {
+        flex: 1;
+        min-width: 0;
+        padding: 2rem;
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+    }
+
+    .tab-navigation {
+        display: flex;
+        flex-direction: column;
+        gap: 0.5rem;
+    }
+
+    .tab-button {
+        padding: 0.75rem 1rem;
+        background: white;
+        border: 1px solid #dee2e6;
+        border-radius: 6px;
+        cursor: pointer;
+        font-size: 0.9rem;
+        font-weight: 500;
+        color: #495057;
+        transition: all 0.15s ease;
+        text-align: left;
+        display: flex;
+        align-items: center;
+        gap: 0.5rem;
+    }
+    .tab-button:disabled {
+        opacity: 0.6;
+        cursor: not-allowed;
+    }
+
+    .tab-button:hover {
+        color: #007bff;
+        background: #f8f9fa;
+        border-color: #007bff;
+    }
+
+    .tab-button.active {
+        color: white;
+        background: #007bff;
+        border-color: #007bff;
+        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.2);
+    }
+
+    .cluster-settings {
+        padding: 1.25rem;
+        background: white;
+        border: 1px solid #e9ecef;
+        border-radius: 8px;
+    }
+
+    .cluster-settings h4 {
+        margin: 0 0 1rem 0;
+        font-size: 0.95rem;
+        font-weight: 600;
+        color: #343a40;
+    }
+
+    .cluster-settings form {
+        display: flex;
+        flex-direction: column;
+        gap: 1rem;
+    }
+
+    .cluster-settings label {
+        display: flex;
+        flex-direction: column;
+        gap: 0.5rem;
+        font-size: 0.85rem;
+        font-weight: 500;
+        color: #495057;
+    }
+
+    .cluster-settings select,
+    .cluster-settings input {
+        padding: 0.5rem;
+        border: 1px solid #ced4da;
+        border-radius: 4px;
+        font-size: 0.9rem;
+        background: white;
+    }
+
+    .cluster-settings select:focus,
+    .cluster-settings input:focus {
+        outline: none;
+        border-color: #007bff;
+        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
+    }
+
+    .cluster-load {
+        padding: 0.625rem 1rem;
+        background: #007bff;
+        color: white;
+        border: none;
+        border-radius: 6px;
+        font-size: 0.9rem;
+        font-weight: 500;
+        cursor: pointer;
+        transition: all 0.15s ease;
+    }
+
+    .cluster-load.done {
+        background: #28a745;
+    }
+
+    .cluster-load:hover:not(:disabled) {
+        background: #0056b3;
+    }
+
+    .cluster-load:disabled {
+        opacity: 0.6;
+        cursor: not-allowed;
+    }
+
+    .spinner {
+        border: 4px solid #f3f3f3;
+        border-top: 4px solid #007bff;
+        border-radius: 50%;
+        width: 20px;
+        height: 20px;
+        animation: spin 1s linear infinite;
+    }
+
+    @keyframes spin {
+        0% {
+            transform: rotate(0deg);
+        }
+        100% {
+            transform: rotate(360deg);
+        }
+    }
+
+    .run-selector {
+        margin-bottom: 1rem;
+    }
+
+    .run-selector label {
+        display: block;
+        margin-bottom: 0.5rem;
+        font-weight: 600;
+        color: #333;
+        font-size: 0.9rem;
+    }
+
+    .input-group {
+        display: flex;
+        gap: 0.5rem;
+    }
+
+    .input-group input[type="text"] {
+        flex: 1;
+        padding: 0.5rem;
+        border: 1px solid #ddd;
+        border-radius: 4px;
+        font-size: 1rem;
+    }
+
+    .input-group input[type="text"]:focus {
+        outline: none;
+        border-color: #4a90e2;
+        box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.1);
+    }
+
+    .input-group button {
+        padding: 0.5rem 1rem;
+        background-color: #4a90e2;
+        color: white;
+        border: none;
+        border-radius: 4px;
+        font-size: 1rem;
+        cursor: pointer;
+        white-space: nowrap;
+    }
+
+    .input-group button:hover:not(:disabled) {
+        background-color: #357abd;
+    }
+
+    .input-group button:disabled {
+        background-color: #ccc;
+        cursor: not-allowed;
+    }
+
+    .config {
+        margin-top: 1rem;
+    }
+
+    .config h4 {
+        margin: 0;
+    }
+
+    .config pre {
+        margin: 0;
+        font-size: 0.8rem;
+    }
+</style>
diff --git a/spd/app/frontend/static/robots.txt b/spd/app/frontend/static/robots.txt
new file mode 100644
index 00000000..b6dd6670
--- /dev/null
+++ b/spd/app/frontend/static/robots.txt
@@ -0,0 +1,3 @@
+# allow crawling everything by default
+User-agent: *
+Disallow:
diff --git a/spd/app/frontend/svelte.config.js b/spd/app/frontend/svelte.config.js
new file mode 100644
index 00000000..69361771
--- /dev/null
+++ b/spd/app/frontend/svelte.config.js
@@ -0,0 +1,18 @@
+import adapter from '@sveltejs/adapter-auto';
+import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';
+
+/** @type {import('@sveltejs/kit').Config} */
+const config = {
+	// Consult https://svelte.dev/docs/kit/integrations
+	// for more information about preprocessors
+	preprocess: vitePreprocess(),
+
+	kit: {
+		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
+		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
+		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
+		adapter: adapter()
+	},
+};
+
+export default config;
diff --git a/spd/app/frontend/tsconfig.json b/spd/app/frontend/tsconfig.json
new file mode 100644
index 00000000..49b25594
--- /dev/null
+++ b/spd/app/frontend/tsconfig.json
@@ -0,0 +1,21 @@
+{
+	"extends": "./.svelte-kit/tsconfig.json",
+	"compilerOptions": {
+		"allowJs": true,
+		"checkJs": true,
+		"target": "es2024",
+		// "lib": ["ES2024", "DOM"], // maybe add back in
+		"esModuleInterop": true,
+		"forceConsistentCasingInFileNames": true,
+		"resolveJsonModule": true,
+		"skipLibCheck": true,
+		"sourceMap": true,
+		"strict": true,
+		"moduleResolution": "bundler"
+	}
+	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
+	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
+	//
+	// To make changes to top-level options such as include and exclude, we recommend extending
+	// the generated config; see https://svelte.dev/docs/kit/configuration#typescript
+}
diff --git a/spd/app/frontend/vite.config.ts b/spd/app/frontend/vite.config.ts
new file mode 100644
index 00000000..2d35c4f5
--- /dev/null
+++ b/spd/app/frontend/vite.config.ts
@@ -0,0 +1,7 @@
+import tailwindcss from '@tailwindcss/vite';
+import { sveltekit } from '@sveltejs/kit/vite';
+import { defineConfig } from 'vite';
+
+export default defineConfig({
+	plugins: [tailwindcss(), sveltekit()]
+});
diff --git a/spd/app/run.sh b/spd/app/run.sh
new file mode 100755
index 00000000..08fe8373
--- /dev/null
+++ b/spd/app/run.sh
@@ -0,0 +1,4 @@
+# run the backend in development mode in the background
+
+
+# run the frontend in development mode in the background
